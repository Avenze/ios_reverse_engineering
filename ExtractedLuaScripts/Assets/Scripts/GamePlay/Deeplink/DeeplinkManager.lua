---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Microsoft-GXY.
--- DateTime: 2024/12/12 14:57
---

---@class DeeplinkManager
local DeeplinkManager = GameTableDefine.DeeplinkManager
local DeviceUtil = CS.Game.Plat.DeviceUtil

---@class DeeplinkData deeplink数据
---@field activity_type string 开启活动类型
---@field instance_id number 副本类型id
---@field deeplink_activity_id number DL打开的副本的实例ID
---@field endtime number 活动持续时间, 单位h
---@field settlementtime number 领奖持续时间, 单位h
---@field deeplink_channel number 不同渠道的deeplink使用不同id
local deeplinkData = {}
local DEEPLINK = "deeplink"

function DeeplinkManager:Init()
    if LocalDataManager:IsNewPlayerRecord() then
        return
    end
    local saveData = LocalDataManager:GetDataByKey(DEEPLINK) 
        
    local deeplinkMsg = DeviceUtil.GetDeeplinkData()
    if deeplinkMsg == "" or deeplinkMsg == nil then
        return
    end
    local propertysGroups = Tools:SplitEx(deeplinkMsg, "&");
    for i = 1, #propertysGroups do
        local curProp = Tools:SplitEx(propertysGroups[i], "=")
        if curProp[1] == "instance_id" then
            deeplinkData[curProp[1]] = tonumber(curProp[2])
        elseif curProp[1] == "deeplink_activity_id" then
            deeplinkData[curProp[1]] = tonumber(curProp[2])
        elseif curProp[1] == "endtime" then
            deeplinkData[curProp[1]] = tonumber(curProp[2])
        elseif curProp[1] == "settlementtime" then
            deeplinkData[curProp[1]] = tonumber(curProp[2])
        else
            deeplinkData[curProp[1]] = curProp[2]
        end
    end
    -- 埋点
    GameSDKs:TrackForeign("deeplink", {activity_id = deeplinkData.deeplink_activity_id, channel = deeplinkData.deeplink_channel})

    -- 判断是否为有效活动, 如果为无效活动则清除这次的deeplink数据
    if saveData[deeplinkData.activity_type] then
        if saveData[deeplinkData.activity_type].deeplink_activity_id >= deeplinkData.deeplink_activity_id then
            deeplinkData = {}
        else
            saveData[deeplinkData.activity_type].deeplink_activity_id = deeplinkData.deeplink_activity_id
        end
    else
        saveData[deeplinkData.activity_type] = {}
        saveData[deeplinkData.activity_type].deeplink_activity_id = deeplinkData.deeplink_activity_id
    end
    
end

--region 循环副本活动
local DLInstanceData = nil

---@return DeeplinkData
---所有活动获取deeplink数据时都实现一个这样的接口, 避免因某个模块中误操作对原数据进行修改导致其他活动信息也报错
function DeeplinkManager:GetDLInstanceData()
    if Tools:GetTableSize(deeplinkData) == 0 then
        return nil
    end
    if not DLInstanceData then
        DLInstanceData = Tools:CopyTable(deeplinkData)
    end
    return DLInstanceData
end

function DeeplinkManager:HaveActiveInstance()
    local dlInstanceData = self:GetDLInstanceData()
    if not dlInstanceData or not dlInstanceData.activity_type == "instance" then
        return nil
    end
    return dlInstanceData
end


--endregion





return DeeplinkManager