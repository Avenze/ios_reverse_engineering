---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/10/16 10:50
---

---首冲双倍钻石界面(不是首次IAP)
---@class FirstPurchaseUI
local FirstPurchaseUI = GameTableDefine.FirstPurchaseUI

local UIPopManager = GameTableDefine.UIPopupManager
local GameUIManager = GameTableDefine.GameUIManager
local StarMode = GameTableDefine.StarMode
local GameLauncher = CS.Game.GameLauncher
local ShopManager = GameTableDefine.ShopManager
local GameTimeManager = GameTimeManager

local DiamondShopIdList = {1000, 1001, 1002, 1003, 1004, 1005}

---@class FirstPurchaseData
---@field reset boolean 是否需要重置
---@field tags table<number,table>
---@field version number 存档版本
local FirstPurchaseData = {}

function FirstPurchaseUI:GetView()
    self.m_view = GameUIManager:SafeOpenUI(ENUM_GAME_UITYPE.FIRST_PURCHASE_UI, self.m_view, require("GamePlay.Common.UI.FirstPurchaseUIView"), self, self.CloseView)
    return self.m_view
end

function FirstPurchaseUI:OpenView()
    self:GetView()
    self:SetEnterDay()
end

---锁定进入商城时间,进入商城后活动持续开启
function FirstPurchaseUI:LockEnterShopUITime()
    self.m_lockedShopUITime = GameTimeManager:GetCurLocalTime(true)
end

---解锁进入商城时间
function FirstPurchaseUI:UnlockEnterShopUITime()
    self.m_lockedShopUITime = nil
end

---获取存档数据
---@return FirstPurchaseData
function FirstPurchaseUI:GetSaveData()
    local shopSaveData = ShopManager:GetLocalData()
    local firstPurchaseData = shopSaveData.doubleDiamond
    if not firstPurchaseData then
        firstPurchaseData = {}
        shopSaveData.doubleDiamond = firstPurchaseData
    end
    return firstPurchaseData
end

---获取首充重置活动的结束时间
function FirstPurchaseUI:GetEndTime()
    local firstPurchaseData = self:GetSaveData()
    return tonumber(firstPurchaseData.endTime) or 0
end

---获取首充重置活动的开始时间
function FirstPurchaseUI:GetStartTime()
    local firstPurchaseData = self:GetSaveData()
    return tonumber(firstPurchaseData.startTime) or 0
end

---获取首充重置活动是否正在进行中, ShopUI开启时，如果双倍活动是开启状态，那至少持续到ShopUI关闭才失效
function FirstPurchaseUI:GetActivityIsOpen()
    if  StarMode:GetStar() < 3 then
        return false
    end
    local now = self.m_lockedShopUITime or GameTimeManager:GetCurrentServerTime()
    local startTime = FirstPurchaseUI:GetStartTime()
    if now < startTime then
        return false
    end
    local endTime = FirstPurchaseUI:GetEndTime()
    return endTime > now and self:GetSaveData().ResetDoubleEnable
end

---存档升级,每一档单独计算
function FirstPurchaseUI:CheckUpgradeSaveData()
    local firstPurchaseData = self:GetSaveData()
    if not firstPurchaseData.version then
        firstPurchaseData.version = 2
        firstPurchaseData.tags = {}
        local shopItemCount = #DiamondShopIdList
        for i = 1, shopItemCount do
            local tag = {}
            local shopID = DiamondShopIdList[i]
            firstPurchaseData.tags[tostring(shopID)] = tag
            local bought = ShopManager:BoughtBefor(shopID)
            tag.forever = not bought
        end
    end
end

---是否是钻石商品
function FirstPurchaseUI:IsShopDiamond(shopID)
    local shopItemCount = #DiamondShopIdList
    for i = 1, shopItemCount do
        if DiamondShopIdList[i] == shopID then
            return true
        end
    end

    return false
end

---是否是双倍钻石商品
function FirstPurchaseUI:IsFirstDouble(shopID)
    local firstPurchaseData = self:GetSaveData()
    local shopItemCount = #DiamondShopIdList
    for i = 1, shopItemCount do
        if DiamondShopIdList[i] == shopID then
            local tag = firstPurchaseData.tags[tostring(shopID)]
            if tag.forever then
                return true
            elseif tag.limitTime then
                return self:GetActivityIsOpen()
            end
        end
    end

    return false
end

---设为首充双倍已使用
function FirstPurchaseUI:SetNotFirstDouble(shopID)
    local firstPurchaseData = self:GetSaveData()
    local kID = tostring(shopID)
    local tag = firstPurchaseData.tags[kID]
    if tag then
        if tag.forever or tag.limitTime then
            tag.forever = false
            tag.limitTime = false
            LocalDataManager:WriteToFile()
        end
    end
end

---活动生效
function FirstPurchaseUI:EnsureResetDoubleDiamond()
    local firstPurchaseData = self:GetSaveData()
    if not firstPurchaseData.reset then
        ShopManager:ResetDoubleDiamond()
        firstPurchaseData.reset = true
        --修改对应Tag
        local shopItemCount = #DiamondShopIdList
        for i = 1, shopItemCount do
            local shopID = DiamondShopIdList[i]
            local tag = firstPurchaseData.tags[tostring(shopID)]
            tag.limitTime = true
        end
    end
end

---获取剩余时间
function FirstPurchaseUI:GetActivityLeftTime()
    local endTime = FirstPurchaseUI:GetEndTime()
    local limitTime = math.max(0,endTime - GameTimeManager:GetCurrentServerTime())
    return limitTime
end

function FirstPurchaseUI:SetEnterDay()
    local firstPurchaseData = self:GetSaveData()
    local now = GameTimeManager:GetCurrentServerTime(true)
    local day = GameTimeManager:FormatTimeToD(now)
    firstPurchaseData.enterDay = day
    LocalDataManager:WriteToFile()
end

function FirstPurchaseUI:CloseView()
    GameUIManager:CloseUI(ENUM_GAME_UITYPE.FIRST_PURCHASE_UI)
    self.m_view = nil
    collectgarbage("collect")
    UIPopManager:DequeuePopView(self)
end

---判断是否需要当天第一次打开
function FirstPurchaseUI:OpenPanelTodayFirst()
    --到期了或没有活动
    local endTime = self:GetEndTime()
    local now = GameTimeManager:GetCurrentServerTime(true)
    if now >= tonumber(endTime) then
        return
    end

    --用于当天第一次判断
    local firstPurchaseData = self:GetSaveData()
    local enterDay = firstPurchaseData.enterDay
    local day = GameTimeManager:FormatTimeToD(now)
    if (enterDay == day) then
        return
    end

    if not GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.MAIN_UI) then
        return
    end
    if self.waitOpenTimer then
        return
    end
    local startTime = self:GetStartTime()
    if StarMode:GetStar() < 3 or now < startTime or not GameLauncher.Instance:IsHide() or GameTableDefine.CutScreenUI.m_view or GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.OFFLINE_REWARD_UI) or
            GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.INTRODUCE_UI) then
        self.waitOpenTimer = GameTimer:CreateNewMilliSecTimer(1000,function()
            --GameTimer:StopTimer(self.waitOpenTimer)
            self.waitOpenTimer = GameTimer:CreateNewMilliSecTimer(100,function()
                now = GameTimeManager:GetTheoryTime()
                if not (StarMode:GetStar() < 3 or now < startTime or not GameLauncher.Instance:IsHide() or GameTableDefine.CutScreenUI.m_view or GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.OFFLINE_REWARD_UI) or
                        GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.INTRODUCE_UI)) then
                    --达到活动开启条件 刷新按钮
                    if GameTableDefine.MainUI.m_view then
                        GameTableDefine.MainUI.m_view:RefreshFirstPurchaseBtn()
                    end
                    if enterDay ~= day then
                        self:OpenView()
                    end
                    GameTimer:StopTimer(self.waitOpenTimer)
                    self.waitOpenTimer = nil
                end
            end, true)
        end)
        return
    else
        if enterDay ~= day then
            self:OpenView()
        end
    end
end

function FirstPurchaseUI:CheckCanOpen()
    --到期了或没有活动
    local endTime = self:GetEndTime()
    local now = GameTimeManager:GetCurrentServerTime(true)
    if now >= tonumber(endTime) then
        return
    end

    --用于当天第一次判断
    local firstPurchaseData = self:GetSaveData()
    local enterDay = firstPurchaseData.enterDay
    local day = GameTimeManager:FormatTimeToD(now)
    if (enterDay == day) then
        return
    end

    if not GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.MAIN_UI) then
        return
    end
    if GameUIManager:IsUIOpen(ENUM_GAME_UITYPE.INTRODUCE_UI) then
        return
    end
    if self.waitOpenTimer then
        return
    end

    if not GameTableDefine.ActivityRemoteConfigManager:CheckPackEnable(GameTableDefine.TimeLimitedActivitiesManager.ActivityList[3]) then
        return
    end
    
    return true
end

return FirstPurchaseUI