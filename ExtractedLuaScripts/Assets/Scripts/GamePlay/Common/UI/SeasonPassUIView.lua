---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by .
--- DateTime: 2024/12/18 10:57
---

local Class = require("Framework.Lua.Class")
local UIView = require("Framework.UI.View")

local GameUIManager = GameTableDefine.GameUIManager
local SeasonPassUI = GameTableDefine.SeasonPassUI
local SeasonPassManager = GameTableDefine.SeasonPassManager
local GameResMgr = require("GameUtils.GameResManager")
local ShopManager = GameTableDefine.ShopManager
local FeelUtil = CS.Common.Utils.FeelUtil

---@class SeasonPassUIView:UIBaseView
local SeasonPassUIView = Class("SeasonPassUIView", UIView)
local UnityHelper = CS.Common.Utils.UnityHelper
local EventDispatcher = EventDispatcher

SeasonPassUIView.PageType = {
    None = "None",
    Reward = "Reward",
    Game = "Game",
    Task = "Task",
}
local PageBtnAnim = {
    IsOn = "UI_tuibiji_gameBth_normaltoselect",
    IsOff = "UI_tuibiji_gameBth_normal"
}

function SeasonPassUIView:ctor()

    self.m_currentPage = SeasonPassUIView.PageType.None

    self.m_rewardPanelGO = nil ---@type UnityEngine.GameObject
    self.m_gamePanelGO = nil ---@type UnityEngine.GameObject
    self.m_taskPanelGO = nil ---@type UnityEngine.GameObject
    ---
    self.m_subGODic = nil ---@type UnityEngine.GameObject[]

    self.m_rewardPageToggle = nil ---@type UnityEngine.UI.Button
    self.m_gamePageBtn = nil ---@type UnityEngine.UI.Button
    self.m_taskPageBtn = nil ---@type UnityEngine.UI.Button
    self.m_mainPageTypeToBtnDic = {} ---@type table<string,UnityEngine.UI.Button>
    self.m_mainPageTypeToBtnAnimDic = {} ---@type table<string,UnityEngine.Animator>

    self:ctorReward()
    self:ctorGame()
    self:ctorTask()
    --2024-12-25 fy添加小游戏奖品选择界面
    self:ctorGameChoose()

    self.RefreshGameHintPointCB = function()
        self:RefreshGameHintPoint()
    end
    EventDispatcher:RegEvent("SEASON_PASS_REFRESH_GAME_HINT_POINT", self.RefreshGameHintPointCB)

    self.m_refreshRedPointHandler = handler(self,self.RefreshRewardRedPoint)
    EventDispatcher:RegEvent(GameEventDefine.SeasonPassLevelUp,self.m_refreshRedPointHandler)
end

function SeasonPassUIView:OnEnter()
    self.m_quitBtn = self:GetComp("RootPanel/tabPanel/quitBtn","Button")
    self:SetButtonClickHandler(self.m_quitBtn,function()
        self:DestroyModeUIObject()
    end)

    self.m_rewardPageBtn = self:GetComp("RootPanel/tabPanel/rewardBtn","Button")
    self:SetButtonClickHandler(self.m_rewardPageBtn,function(isOn)
        self:ChangePage(SeasonPassUIView.PageType.Reward)
    end)
    self.m_mainPageTypeToBtnDic[SeasonPassUIView.PageType.Reward] = self.m_rewardPageBtn
    self.m_mainPageTypeToBtnAnimDic[SeasonPassUIView.PageType.Reward] = self:GetComp(self.m_rewardPageBtn.gameObject,"","Animator")

    self.m_gamePageBtn = self:GetComp("RootPanel/tabPanel/gameBtn","Button")
    self:SetButtonClickHandler(self.m_gamePageBtn,function(isOn)
        self:ChangePage(SeasonPassUIView.PageType.Game)
    end)
    self.m_mainPageTypeToBtnDic[SeasonPassUIView.PageType.Game] = self.m_gamePageBtn
    self.m_mainPageTypeToBtnAnimDic[SeasonPassUIView.PageType.Game] = self:GetComp(self.m_gamePageBtn.gameObject,"","Animator")

    self.m_taskPageBtn = self:GetComp("RootPanel/tabPanel/taskBtn","Button")
    self:SetButtonClickHandler(self.m_taskPageBtn,function(isOn)
        self:ChangePage(SeasonPassUIView.PageType.Task)
    end)
    self.m_mainPageTypeToBtnDic[SeasonPassUIView.PageType.Task] = self.m_taskPageBtn
    self.m_mainPageTypeToBtnAnimDic[SeasonPassUIView.PageType.Task] = self:GetComp(self.m_taskPageBtn.gameObject,"","Animator")

    self.m_uiRootTrans = self:GetTrans("RootPanel/contentPanel")

    self.m_rewardRedPointNormalGO = self:GetGo("RootPanel/tabPanel/rewardBtn/normal/tip")
    self.m_rewardRedPointNormalNumText = self:GetComp("RootPanel/tabPanel/rewardBtn/normal/tip/num","TMPLocalization")
    self.m_rewardRedPointSelectGO = self:GetGo("RootPanel/tabPanel/rewardBtn/select/tip")
    self.m_rewardRedPointSelectNumText = self:GetComp("RootPanel/tabPanel/rewardBtn/select/tip/num","TMPLocalization")

    self.m_subGODic = {}

    --活动倒计时
    self.m_countDownText = self:GetComp(self.m_uiObj, "RootPanel/topPanel/timer/num","TMPLocalization")
    self.m_updateTimer = GameTimer:CreateNewTimer(1,function()
        local leftTime = SeasonPassManager:GetActivityLeftTime()
        --self.m_countDownText.text = GameTimeManager:FormatTimeLength(leftTime)
        if leftTime > 86400 then
            local timeDate = GameTimeManager:GetTimeLengthDate(leftTime)
            self.m_countDownText.text = string.format("%dd %dh",timeDate.d,timeDate.h)
        else
            self.m_countDownText.text = GameTimeManager:FormatTimeLength(leftTime)
        end
    end,true,true)

    --2024-12-25 fy添加通行证任务可领取红点
    self:RefreshTaskHintPoint()
    --2024-12-25 fy添加小游戏奖品选择界面进入调用
    self:OnEnterGameChooseView()

    self:RefreshGameHintPoint()
    self:RefreshRewardRedPoint()
end

---加载子界面
function SeasonPassUIView:LoadSubUI(uiType,onLoadedCB)
    local path = SeasonPassUI.m_prefabPath[uiType]
    if path then
        GameResMgr:AInstantiateObjectAsyncManual(path, self, function(go)
            UnityHelper.AddChildToParent(self.m_uiRootTrans, go.transform)
            if onLoadedCB then
                onLoadedCB(go)
            end
        end)
    end
end

function SeasonPassUIView:ShowSubUI(uiType,onShowCB,onLoadCB)
    local subGo = self.m_subGODic[uiType]
    if subGo then
        subGo:SetActive(true)
        if onLoadCB then
            onLoadCB()
        end
        self:OnUIShow()
        if onShowCB then
            onShowCB()
        end
    else
        GameUIManager:SetEnableTouch(false,"加载通行证子界面")
        self:LoadSubUI(uiType,function(go)
            go:SetActive(true)
            if onLoadCB then
                onLoadCB()
            end
            self.m_subGODic[uiType] = go
            GameUIManager:SetEnableTouch(true,"加载通行证子界面")
            self:OnUILoaded()
            self:OnUIShow()
            if onShowCB then
                onShowCB()
            end
        end)
    end
end

function SeasonPassUIView:HideSubUI(uiType)
    local subGo = self.m_subGODic[uiType]
    if subGo then
        subGo:SetActive(false)
    end
end

---切换到对应页面
function SeasonPassUIView:ChangePage(page,isCloseView,onUILoadedCallback)

    if self.m_currentPage == page then
        return
    end

    local prePage
    if self.m_currentPage then
        prePage = self.m_currentPage
        if self.m_currentPage == SeasonPassUIView.PageType.Reward then
            self:OnExitRewardView(isCloseView)
        elseif self.m_currentPage == SeasonPassUIView.PageType.Game  then
            self:OnExitGameView(isCloseView)
        elseif self.m_currentPage == SeasonPassUIView.PageType.Task  then
            self:OnExitTaskView(isCloseView)
        end
    end
    self.m_currentPage = page
    if not isCloseView then
        self:ShowSubUI(self.m_currentPage,function()
            if prePage then
                self:HideSubUI(prePage)
            end
        end,onUILoadedCallback)
        --self.m_typeToBtnDic[self.m_currentPage].isOn = true
        for k,v in pairs(self.m_mainPageTypeToBtnDic) do
            if k == self.m_currentPage then
                self.m_mainPageTypeToBtnAnimDic[k]:Play(PageBtnAnim.IsOn)
            else
                self.m_mainPageTypeToBtnAnimDic[k]:Play(PageBtnAnim.IsOff)
            end
        end
    end
end

function SeasonPassUIView:OnUILoaded()
    if self.m_currentPage == SeasonPassUIView.PageType.Reward then
        self:OnEnterRewardView()
    elseif self.m_currentPage == SeasonPassUIView.PageType.Game  then
        self:OnEnterGameView()
    elseif self.m_currentPage == SeasonPassUIView.PageType.Task  then
        self:OnEnterTaskView()
    end
end

function SeasonPassUIView:OnUIShow()
    if self.m_currentPage == SeasonPassUIView.PageType.Reward then
        self:OnShowRewardView()
    elseif self.m_currentPage == SeasonPassUIView.PageType.Game  then
        self:OnShowGameView()
    elseif self.m_currentPage == SeasonPassUIView.PageType.Task  then
        self:OnShowTaskView()
    end
    --2024-12-30 fy添加用于埋点使用的属性添加
    SeasonPassManager:SetIsFirstFlag(0)
end

function SeasonPassUIView:Init()
    if self.m_currentPage and self.m_currentPage ~= SeasonPassUIView.PageType.None then
        self:ChangePage(SeasonPassUIView.PageType.Reward,false)
    else
        local firstPage = SeasonPassUIView.PageType.Game

        if SeasonPassManager:GetCurGameManager():IsNeedShowGameHintPoint() then
            firstPage = SeasonPassUIView.PageType.Game
        elseif SeasonPassManager:CanClaimAnyReward() then
            firstPage = SeasonPassUIView.PageType.Reward
        elseif GameTableDefine.SeasonPassTaskManager:GetCanClaimTaskTotalNum() > 0 then
            firstPage = SeasonPassUIView.PageType.Task
        end

        local rootPanelGO = self:GetGo("RootPanel")
        rootPanelGO.transform.localScale = CS.UnityEngine.Vector3(1,0,1)
        self:ChangePage(firstPage,false,function()
            rootPanelGO.transform.localScale = CS.UnityEngine.Vector3(1,1,1)
        end)
    end
end

function SeasonPassUIView:OnExit(view)
    self:ChangePage(SeasonPassUIView.PageType.None,true)

    if self.m_updateTimer then
        GameTimer:StopTimer(self.m_updateTimer)
        self.m_updateTimer = nil
    end

    EventDispatcher:UnRegEvent("SEASON_PASS_REFRESH_GAME_HINT_POINT", self.RefreshGameHintPointCB)
    EventDispatcher:UnRegEvent(GameEventDefine.SeasonPassLevelUp,self.m_refreshRedPointHandler)
    self.super:OnExit(self)
end

--region FlyIcon

local flyIconName = {
    [3] = "item_diamond",
    [9] = "item_cash",
    [37] = "item_ticket",
    [38] = "item_point",
    [4] = "item_ad_token",
    [29] = "item_wheel_token",
    ["exp"] = "item_task_exp",
    [1001] = "item_snack_1",
    [1002] = "item_snack_2",
    [1003] = "item_snack_3",

}

---@class SeasonPassFlyIconResInfo
---@field id number shopID, 任务传"exp"
---@field num number 奖励数量
local SeasonPassFlyIconResInfo = {}

---飞图标
---@param  flyIconInfoList SeasonPassFlyIconResInfo[]
function SeasonPassUIView:FlyIcon(flyIconInfoList, cb)
    local activityGO = {}
    local normalVFXRoot = self:GetGo("vfx/normalVFX/list")
    for _, v in pairs(flyIconInfoList) do
        local shopCfg = ShopManager:GetCfg(v.id)
        local type = shopCfg and shopCfg.type
        if v.id == "exp" then
            type = "exp"
        end
        local num = v.num
        local amount = 0
        local flyIconGO = nil
        if type == 9 then   --小时现金
            local cashNam = nil
            amount, cashNam = ShopManager:GetValue(shopCfg) * num
            flyIconGO = flyIconName[type]
            --当前场景的小时数量的现金
            local resType = GameTableDefine.ResourceManger:GetShopCashType(shopCfg.country)
            local icon = "icon_shop_cash_1"
            if resType == "euro" then
                icon = "icon_shop_cash_1_euro"
            end
            local Image = self:GetComp(normalVFXRoot, flyIconGO .. "/bg/icon", "Image")
            self:SetSprite(Image, "UI_Shop", icon)
            self:SetText(flyIconGO .. "/num/num", amount)

        elseif type == 18 then --宠物零食
            --local snackConfig = ConfigMgr.config_snack
            amount = ShopManager:GetValue(shopCfg) * num
            local snackID = shopCfg.param[1]
            flyIconGO = flyIconName[snackID]
            self:SetText(flyIconGO .. "/num/num", amount)

        elseif type == "exp" then
            amount = num
            flyIconGO = flyIconName["exp"]
            self:SetText(flyIconGO .. "/num/num", amount)
            flyIconGO = flyIconName["exp"]
        else
            amount = ShopManager:GetValue(shopCfg) * num
            flyIconGO = flyIconName[type]
            self:SetText(flyIconGO .. "/num/num", amount)
        end
        table.insert(activityGO, flyIconGO)
    end
    local vfxList = UnityHelper.GetAllChilds(normalVFXRoot)
    for i = 0, vfxList.Length - 1 do
        local curGO = vfxList[i].gameObject
        curGO:SetActive(false)
    end
    for i = 1, #activityGO do
        for k = 0, vfxList.Length - 1 do
            local trans = vfxList[k]
            if trans.name == activityGO[i] then
                trans.gameObject:SetActive(true)
                local fb = self:GetGo(trans.gameObject, "flyFB")
                FeelUtil.StopFeel(fb)
                FeelUtil.PlayFeelCallback(fb, function()
                    if cb then
                        cb()
                        cb = nil
                    end
                    CollectList = {}
                end, true)
            end
        end
    end

end

--endregion

---显示道具信息界面
function SeasonPassUIView:OpenRewardInfo(locationPos, infoTitle,infoDesc)
    local infoGo = self:GetGoOrNil("reward")
    if infoGo.isActive then
        return
    end
    self:GetGo(infoGo, "rewardInfo"):SetActive(true)
    self:GetGo(infoGo, "rewardInfo_icon"):SetActive(false)
    if infoGo then
        self:SetText("reward/rewardInfo/title/txt", infoTitle or "Title-Null")
        self:SetText("reward/rewardInfo/fix/txt", infoDesc or "Desc-Null")
        local rewardInfoGo = self:GetGoOrNil("reward/rewardInfo")
        if rewardInfoGo and locationPos then
            local clampRectTransform = self:GetTrans("reward")
            local arrowTrans = self:GetTrans(rewardInfoGo,"arrow")
            UnityHelper.ClampInfoUIPosition(rewardInfoGo.transform, arrowTrans,
                    locationPos.transform.position,clampRectTransform)
        end
        infoGo:SetActive(true)
    end
end

---@class SeasonPassRewardInfoList
---@field icon string
---@field num number
local rewardInfoList = {}
---显示道具信息界面
---@param rewardInfoList SeasonPassRewardInfoList
function SeasonPassUIView:OpenRewardsInfoWithIcon(locationPos, rewardInfoList)
    local infoGo = self:GetGoOrNil("reward")
    if infoGo.isActive then
        return
    end
    local rewardInfo = self:GetGo(infoGo, "rewardInfo")
    local rewardInfo_icon = self:GetGo(infoGo, "rewardInfo_icon")
    rewardInfo:SetActive(false)
    rewardInfo_icon:SetActive(true)
    if infoGo then
        Tools:SetTempGo(self:GetGo(rewardInfo_icon, "contant/temp"), #rewardInfoList, true, function(go, index)
            self:SetSprite(self:GetComp(go, "icon", "Image"), "UI_Shop", rewardInfoList[index].icon)
            self:SetText(go, "num", rewardInfoList[index].num)
        end)

        if rewardInfo_icon and locationPos then
            local clampRectTransform = self:GetTrans("reward")
            local arrowTrans = self:GetTrans(rewardInfo_icon,"arrow")
            UnityHelper.ClampInfoUIPosition(rewardInfo_icon.transform, arrowTrans,
                    locationPos.transform.position,clampRectTransform)
        end
        infoGo:SetActive(true)
    end
end

function SeasonPassUIView:OpenViewByDataUpdate(shopID)
    if self.m_currentPage and self.m_currentPage == SeasonPassUIView.PageType.Reward then
        self:ResotreBuySccuess(shopID)
    end
end

return SeasonPassUIView