---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/4/7 10:23
---
--- prefab:MainLineUI

local Class = require("Framework.Lua.Class")

local UIBaseView = require("Framework.UI.View")
local EventManager = require("Framework.Event.Manager")
---@class StoryLineUIView:UIBaseView
---@field super UIBaseView
local StoryLineUIView = Class("StoryLineUIView",UIBaseView)
local GameTextLoader = GameTextLoader
local StoryLineUI = GameTableDefine.StoryLineUI
local ConfigMgr = GameTableDefine.ConfigMgr
local StoryLineManager = GameTableDefine.StoryLineManager
local ResourceManger = GameTableDefine.ResourceManger
local ValueManager = GameTableDefine.ValueManager
local StarMode = GameTableDefine.StarMode
local CountryMode = GameTableDefine.CountryMode
local CityMode = GameTableDefine.CityMode
local LocalDataManager = LocalDataManager
local HouseMode = GameTableDefine.HouseMode
local AnimationUtil = CS.Common.Utils.AnimationUtil
local FlyIconsUI = GameTableDefine.FlyIconsUI
local ChooseUI = GameTableDefine.ChooseUI
local StageType = {
    First = "item_first",
    Normal = "item",
    Last = "item_last"
}
local PlayButtonType = {
    Unlock = "btn_unlock",
    Locked = "btn_locked",
    Relive = "btn_relive",
    Facebook = "btn_fb"
}
local PassBtnAnim = {
    Select = "mainline_title_1_anim",
    UnSelect = "mainline_title_2_anim"
}

function StoryLineUIView:ctor()
    self.m_passConfigs = nil ---@type table[]
    self.m_stageConfigs = nil
    self.m_snapIndex = 1 ---停靠在中心的StageIndex

    self.m_passList = nil ---@type UnityEngine.UI.ScrollRectEx
    self.m_stageList = nil ---@type UnityEngine.UI.ScrollRectEx

    self.m_progressLineRect = nil ---@type UnityEngine.UI.Image
    self.m_starText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_moneyText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_forbesText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_diamondText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_moneyImage = nil ---@type UnityEngine.UI.Image
    self.m_passBgImage = nil ---@type UnityEngine.UI.Image

    self.m_selectPassID = 0 ---当前选中的Pass
    self.m_preSelectPassID = 0 ---之前选中的Pass

    self.m_playButtons = {} ---@type table<string,UnityEngine.UI.Button>
end

function StoryLineUIView:OnEnter()
    self.m_snapIndex = 0
    self:SetButtonClickHandler(self:GetComp("RootPanel/quit_btn","Button"), function()
        self:DestroyModeUIObject()
    end)
    --ResPanel
    self.m_starText = self:GetComp("RootPanel/Res/CurrStarFrame/star/lvl", "TMPLocalization")
    self.m_moneyText = self:GetComp("RootPanel/Res/Money/num", "TMPLocalization")
    self.m_forbesText = self:GetComp("RootPanel/Res/Forbes/num", "TMPLocalization")
    self.m_diamondText = self:GetComp("RootPanel/Res/Diamond/num", "TMPLocalization")
    self.m_moneyImage = self:GetComp("RootPanel/Res/Money/icon", "Image")

    --PassPanel
    self.m_passList = self:GetComp("RootPanel/Stage/ScrollRectEx", "ScrollRectEx")
    self.m_stageList = self:GetComp("RootPanel/Info/ScrollRectEx", "ScrollRectEx")
    self.m_progressLineRect = self:GetComp("RootPanel/Stage/ScrollRectEx/Viewport/Content/line", "RectTransform")
    self.m_passBgImage = self:GetComp("BgCover/banner", "Image")

    --ButtonArea
    self.m_playButtons[PlayButtonType.Unlock] = self:GetComp("RootPanel/btn_area/btn_unlock","Button")
    self.m_playButtons[PlayButtonType.Locked] = self:GetComp("RootPanel/btn_area/btn_locked","Button")
    self.m_playButtons[PlayButtonType.Relive] = self:GetComp("RootPanel/btn_area/btn_relive","Button")
    self.m_playButtons[PlayButtonType.Facebook] = self:GetComp("RootPanel/btn_area/btn_fb","Button")
    self:SetButtonClickHandler(self.m_playButtons[PlayButtonType.Unlock],handler(self,self.OnUnlockBtnDown))
    self:SetButtonClickHandler(self.m_playButtons[PlayButtonType.Locked],handler(self,self.OnLockedBtnDown))
    self:SetButtonClickHandler(self.m_playButtons[PlayButtonType.Relive],handler(self,self.OnReliveBtnDown))
    self:SetButtonClickHandler(self.m_playButtons[PlayButtonType.Facebook],handler(self,self.OnFacebookBtnDown))
end

function StoryLineUIView:Init(passID,stageID)

    self:InitResPanel()

    self.m_passConfigs = StoryLineManager:GetPassList()

    --当前要跳转到的Pass和Stage
    stageID = stageID or StoryLineManager:GetCurrentStageID(true)
    local stageConfig = StoryLineManager:GetStageConfig(stageID)
    if stageConfig then
        passID = stageConfig.pass
    end

    local currentPassID = passID or StoryLineManager:GetCurrentPassID()
    --self.m_selectPassID = currentPassID
    --pass
    self:SetListItemCountFunc(self.m_passList, function()
        return #self.m_passConfigs
    end)
    self:SetListItemNameFunc(self.m_passList, function(index)
        return "item"
    end)
    self:SetListUpdateFunc(self.m_passList, handler(self, self.RefreshPassItem))

    self.m_passList:UpdateData()
    self.m_passList:ScrollTo(self:IndexOfSelectPassInList(currentPassID))

    local currentPassItem = self.m_passList:GetScrollItemTranByIndex(self:IndexOfSelectPassInList(currentPassID))
    local size = self.m_progressLineRect.sizeDelta
    size.x = currentPassItem.localPosition.x + 150
    self.m_progressLineRect.sizeDelta = size
    self.m_progressLineRect.gameObject:SetActive(true)
    --stage
    self:SetListItemCountFunc(self.m_stageList, function()
        if StoryLineManager:IsLastDevelopedPass(self.m_selectPassID) then
            return #self.m_stageConfigs + 1
        else
            return self.m_stageConfigs and #self.m_stageConfigs or 1
        end
    end)
    self:SetListItemNameFunc(self.m_stageList, function(index)
        if self.m_stageConfigs == nil then
            return StageType.Last
        else
            index = index + 1
            if self.m_stageConfigs[index] and self.m_stageConfigs[index].id == 1 then
                return StageType.First
            elseif not self.m_stageConfigs[index] then
                --最后一个章节多显示出来facebook页
                return StageType.Last
            end
        end
        return StageType.Normal
    end)
    self:SetListUpdateFunc(self.m_stageList, handler(self, self.RefreshStageItem))
    self:SetSnapMoveDoneFunc(self.m_stageList,handler(self,self.RefreshBtnArea))

    self:InitStage(currentPassID)
    if passID then
        if StoryLineManager:IsLastDevelopedStage(stageID) and StoryLineManager:IsCompleteAllStage() then
            self.m_snapIndex = self:GetStageItemIndexByPassID(stageID)+1
        else
            self.m_snapIndex = stageID and self:GetStageItemIndexByPassID(stageID) or 1
        end
        self.m_stageList:SetSnapIndex(self.m_snapIndex and (self.m_snapIndex-1) or 0)
    end
end

---设置资源栏的值
function StoryLineUIView:InitResPanel()
    local star = StarMode:GetStar()
    local cash = ResourceManger:GetLocalMoney()
    local forbes = ValueManager:GetValue()
    local diamond = ResourceManger:GetDiamond()

    self.m_starText.text = tostring(star)
    self.m_moneyText.text = Tools:SeparateNumberWithComma(cash)
    self.m_forbesText.text = tostring(forbes)
    self.m_diamondText.text = Tools:SeparateNumberWithComma(diamond)

    self:SetSprite(self.m_moneyImage, "UI_Main", CountryMode.cash_icon)
end

---设置章节栏的值
function StoryLineUIView:RefreshPassItem(index, tran)
    index = index + 1
    local go = tran.gameObject

    local btn = self:GetComp(go,"btn","Button")
    local passConfig = self.m_passConfigs[index]
    local titleStr = GameTextLoader:ReadText(passConfig.title)
    self:SetText(go,"btn/bg/name",titleStr)
    self:SetButtonClickHandler(btn,function()
        self:InitStage(passConfig.id)
        if self.m_snapIndex == 1 then
            self:RefreshBtnArea(0)
        else
            self.m_snapIndex = 1
            self.m_stageList:SetSnapIndex(0)
        end
        --self.m_passList:UpdateData()
    end)

    --bg
    local bgImage = self:GetComp(go,"btn/bg","Image")
    if bgImage then
        self:SetSprite(bgImage,"UI_Common",passConfig.pass_banner)
    end

    local nowMark = self:GetGoOrNil(go,"btn/bg/now")
    local lockMark = self:GetGoOrNil(go,"btn/bg/lock")
    local currentPassID = StoryLineManager:GetCurrentPassID()

    if nowMark then
        nowMark:SetActive(passConfig.id <= currentPassID and passConfig.id == self.m_selectPassID)
    end
    if lockMark then
        lockMark:SetActive(passConfig.id > currentPassID)
    end

    local btnAnimation = self:GetComp(go,"btn","Animation")
    if btnAnimation then
        ---还原btn的选中动画
        if passConfig.id == self.m_selectPassID then
            --AnimationUtil.Reset(btnAnimation,PassBtnAnim.UnSelect)
            AnimationUtil.Play(btnAnimation,PassBtnAnim.UnSelect,nil,0)
        else
            --AnimationUtil.Reset(btnAnimation,PassBtnAnim.Select)
            AnimationUtil.Play(btnAnimation,PassBtnAnim.Select,nil,0)
        end
    end
end

---当前pass在UI中的Index,从0开始
function StoryLineUIView:IndexOfSelectPassInList(passID)
    for i,v in ipairs(self.m_passConfigs) do
        if v.id == passID then
            return i-1
        end
    end
    return 0
end

---切换Pass时调用刷新界面显示内容
function StoryLineUIView:InitStage(passID)
    if self.m_selectPassID == passID then
        return
    end
    self.m_preSelectPassID = self.m_selectPassID
    self.m_selectPassID = passID
    if self.m_preSelectPassID then
        local index = self:GetPassItemIndexByPassID(self.m_preSelectPassID)
        if index then
            local preItemTrans = self.m_passList:GetScrollItemTranByIndex(index-1)
            if preItemTrans then
                self:RefreshPassItem(index-1,preItemTrans)
                local preAnimator = self:GetComp(preItemTrans.gameObject,"btn","Animation")
                if preAnimator then
                    AnimationUtil.Play(preAnimator, PassBtnAnim.UnSelect)
                end
            end
        end
    end
    if self.m_selectPassID then
        local index = self:GetPassItemIndexByPassID(self.m_selectPassID)
        if index then
            local curItemTrans = self.m_passList:GetScrollItemTranByIndex(index-1)
            if curItemTrans then
                self:RefreshPassItem(index-1,curItemTrans)
                local curAnimator = self:GetComp(curItemTrans.gameObject,"btn","Animation")
                if curAnimator then
                    AnimationUtil.Play(curAnimator, PassBtnAnim.Select)
                end
            end
        end
    end
    --passBg
    local passConfig = StoryLineManager:GetPassConfigsByPassID(passID)
    if passConfig and passConfig.pass_bg then
        self:SetSprite(self.m_passBgImage,"UI_Common",passConfig.pass_bg)
    end
    self.m_stageConfigs = StoryLineManager:GetStageConfigsByPassID(passID)
    self.m_stageList:UpdateData(true)
end

---获取建筑名称
function StoryLineUIView:GetBuildingName(buildingID)
    return GameTextLoader:ReadText("TXT_BUILDING_B"..buildingID.."_NAME")
end

---获取Story专用建筑Icon
function StoryLineUIView:GetBuildingIconStory(buildingID)
    return "icon_story_building_"..buildingID
end

---获取建筑Icon
function StoryLineUIView:GetBuildingIcon(buildingID)
    return "icon_building_"..buildingID
end

---获取汽车名称
function StoryLineUIView:GetCarName(carID)
    return GameTextLoader:ReadText("TXT_CAR_C"..carID.."_NAME")
end

---获取汽车Icon
function StoryLineUIView:GetCarIcon(carID)
    return "icon_BossCar_"..carID
end

function StoryLineUIView:SetSprite(image,atlas,sprite)
    self.super.SetSprite(self,image,atlas,sprite,nil,true)
end

---设置故事栏的信息
function StoryLineUIView:RefreshStageItem(index, tran)
    index = index + 1
    local go = tran.gameObject

    if not self.m_stageConfigs then
        --self:RefreshBtnArea(index-1)
        return
    else
        --if index == self.m_snapIndex then
        --    self:RefreshBtnArea(self.m_snapIndex-1)
        --end
    end
    if self.m_stageConfigs and not self.m_stageConfigs[index] then
        local lastLockedMark = self:GetGoOrNil(go,"bg/locked")
        if lastLockedMark then
            lastLockedMark:SetActive(not StoryLineManager:IsCompleteAllStage())
        end
        return
    end
    local passID = self.m_selectPassID
    local stageIndex = index
    local stageConfig = self.m_stageConfigs[index]
    local stageName = tostring(passID).."-"..tostring(stageIndex)
    --章节号
    self:SetText(go,"bg/stage/num",stageName)
    go.name = stageName

    --背景
    local bgImage = self:GetComp(go,"bg/title/banner","Image")
    local bossSex = LocalDataManager:GetBossSex()
    self:SetSprite(bgImage,"UI_Common", bossSex == 2 and stageConfig.icon_bg_wm or stageConfig.icon_bg)


    self:SetText(go,"bg/title/name/txt",GameTextLoader:ReadText(stageConfig.name))
    self:SetText(go,"bg/title/desc/txt",GameTextLoader:ReadText(stageConfig.desc))

    --任务
    local starGO = self:GetGoOrNil(go,"bg/req/list/star")
    local forbesGO = self:GetGoOrNil(go,"bg/req/list/forbes")
    local buildingGO = self:GetGoOrNil(go,"bg/req/list/building")
    local carGO = self:GetGoOrNil(go,"bg/req/list/car")
    --Star
    local taskIndex = 1
    if stageConfig.req_star and stageConfig.req_star>0 then
        local reqText = self:GetComp(starGO,"icon/num","TMPLocalization")
        reqText.text = tostring(stageConfig.req_star)
        local toggle = self:GetComp(starGO,"Toggle","Toggle")
        toggle.isOn = StarMode:GetStar()>=stageConfig.req_star

        local indexText = self:GetComp(starGO,"num","TMPLocalization")
        indexText.text = tostring(taskIndex)
        taskIndex = taskIndex + 1
        starGO:SetActive(true)
    else
        starGO:SetActive(false)
    end
    --Forbes
    if stageConfig.req_forbes and stageConfig.req_forbes>0 then
        local reqText = self:GetComp(forbesGO,"txt_2","TMPLocalization")
        reqText.text = tostring(stageConfig.req_forbes)
        local toggle = self:GetComp(forbesGO,"Toggle","Toggle")
        toggle.isOn = ValueManager:GetValue()>=stageConfig.req_forbes

        local indexText = self:GetComp(forbesGO,"num","TMPLocalization")
        indexText.text = tostring(taskIndex)
        taskIndex = taskIndex + 1
        forbesGO:SetActive(true)
    else
        forbesGO:SetActive(false)
    end
    --Building
    if stageConfig.req_building and stageConfig.req_building>0 then
        local reqText = self:GetComp(buildingGO,"txt","TMPLocalization")
        reqText.text = string.format(GameTextLoader:ReadText("TXT_STAGE_REQ_3"),self:GetBuildingName(stageConfig.req_building))
        local toggle = self:GetComp(buildingGO,"Toggle","Toggle")
        toggle.isOn = CityMode:IsHaveBuilding(stageConfig.req_building)
        local iconImage = self:GetComp(buildingGO,"icon","Image")
        self:SetSprite(iconImage,"UI_Common",self:GetBuildingIconStory(stageConfig.req_building))

        local indexText = self:GetComp(buildingGO,"num","TMPLocalization")
        indexText.text = tostring(taskIndex)
        taskIndex = taskIndex + 1
        buildingGO:SetActive(true)
    else
        buildingGO:SetActive(false)
    end
    --Car
    if carGO then
        if stageConfig.req_car and stageConfig.req_car>0 then
            local reqText = self:GetComp(carGO,"txt","TMPLocalization")
            reqText.text = string.format(GameTextLoader:ReadText("TXT_STAGE_REQ_3"),self:GetCarName(stageConfig.req_car))
            local toggle = self:GetComp(carGO,"Toggle","Toggle")
            toggle.isOn = StoryLineManager:IsHaveCar(stageConfig.req_car)
            local iconImage = self:GetComp(buildingGO,"icon","Image")
            self:SetSprite(iconImage,"UI_Common",self:GetCarIcon(stageConfig.req_car))

            local indexText = self:GetComp(carGO,"num","TMPLocalization")
            indexText.text = tostring(taskIndex)
            taskIndex = taskIndex + 1
            carGO:SetActive(true)
        else
            carGO:SetActive(false)
        end
    end

    local rewards = stageConfig.reward_buildings or {}
    --Reward
    local rewardList = self:GetComp(go,"bg/rewards/list/ScrollRectEx","ScrollRectEx")
    if rewardList then
        self:SetListItemCountFunc(rewardList, function()
            return #rewards
        end)
        self:SetListItemNameFunc(rewardList, function(index)
            return "item"
        end)
        self:SetListUpdateFunc(rewardList, function(index2,tran2)
            self:RefreshRewardList(tran2,rewards[index2+1])
        end)
        rewardList:UpdateData()
    end

    local stageState = StoryLineManager:GetStageState(stageConfig.id)
    local doneGO = self:GetGoOrNil(go,"bg/done")
    if doneGO then
        doneGO:SetActive(stageState == 1 or stageState == 2)
        local anim = self:GetComp(doneGO,"","Animation")
        if anim then
            AnimationUtil.Play(anim,"mainline_done_3_Anim")
        end
    end
    if stageState == 1 or stageState == 2 then
        self:CompleteReqLine(go,true)
    elseif stageState == 0 then
        self:CompleteReqLine(go,false)
    end

    local curStageID = StoryLineManager:GetCurrentStageID()
    local greyUI = self:GetComp(go,"","GreyUI")
    if greyUI then
        if stageConfig.id > curStageID then
            greyUI.GrayBlend = 1
        else
            greyUI.GrayBlend = 0
        end
    end
    local lockedMark = self:GetGoOrNil(go,"bg/locked")
    if lockedMark then
        lockedMark:SetActive(stageConfig.id > curStageID)
    end
end

---根据停靠在中间的Stage刷新播放按钮的状态
function StoryLineUIView:RefreshBtnArea(index)
    index = index + 1
    self.m_snapIndex = index
    local snapStageConfig = self.m_stageConfigs and self.m_stageConfigs[index] or nil
    local showBtnType = PlayButtonType.Locked
    if snapStageConfig then
        --判断Pass状态
        if self.m_selectPassID and self.m_selectPassID > StoryLineManager:GetCurrentPassID() then
            --Pass未解锁
            showBtnType = PlayButtonType.Locked
        else
            local stageID = snapStageConfig.id
            local curStageID = StoryLineManager:GetCurrentStageID()
            if stageID>curStageID then
                --比当前stageID大，不论是什么状态都不可播放
                showBtnType = PlayButtonType.Locked
            else
                --判断Stage状态
                local stageState = StoryLineManager:GetStageState(stageID)
                if stageState == 0 then
                    --判断Stage是否满足解锁条件
                    if StoryLineManager:CheckCanCompleteState(stageID) then
                        showBtnType = PlayButtonType.Unlock
                    else
                        showBtnType = PlayButtonType.Locked
                    end
                elseif stageState == 1 then
                    showBtnType = PlayButtonType.Unlock
                elseif stageState == 2 then
                    showBtnType = PlayButtonType.Relive
                else
                    showBtnType = PlayButtonType.Locked
                end
            end
        end
    else
        if StoryLineManager:IsCompleteAllStage() then
            showBtnType = PlayButtonType.Facebook
        else
            showBtnType = PlayButtonType.Locked
        end
    end
    for btnType,btn in pairs(self.m_playButtons) do
        btn.gameObject:SetActive(btnType == showBtnType)
    end
    if showBtnType == PlayButtonType.Unlock and snapStageConfig then
        local needShowCompleteMark = StoryLineManager:GetStageState(snapStageConfig.id) == 0
        if needShowCompleteMark then
            StoryLineManager:MarkStageCanComplete(snapStageConfig.id)
            self:PlayReqLineAnim(index,function()
                self:PlayDoneAnim(index)
            end)
        end
    end
end

---将所有划线设为完成,或未完成
function StoryLineUIView:CompleteReqLine(stageGO,isComplete)
    if stageGO then
        local reqParent = self:GetTrans(stageGO,"bg/req/list")
        if reqParent then
            for k,v in pairs(reqParent) do
                local anim = self:GetComp(v.gameObject,"","Animation")
                if anim and (not anim:IsNull()) then
                    if isComplete then
                        AnimationUtil.Play(anim,"mainline_done_2_Anim")
                    else
                        AnimationUtil.Play(anim,"mainline_done_2_Anim",nil,0)
                    end
                end
            end
        end
    end
end

---播放划线动画
function StoryLineUIView:PlayReqLineAnim(index,onEnd)
    local stageTrans = self.m_stageList:GetScrollItemTranByIndex(index-1)
    if stageTrans then
        local animations = {}
        local reqParent = self:GetTrans(stageTrans.gameObject,"bg/req/list")
        if reqParent and (not reqParent:IsNull()) then
            for k,v in pairs(reqParent) do
               local anim = self:GetComp(v.gameObject,"","Animation")
                if anim  and (not anim:IsNull()) and anim.gameObject.activeSelf then
                    table.insert(animations,anim)
                end
            end
        end
        local animCount = #animations
        if animCount>0 then
            local playLineFunc
            playLineFunc = function(animIndex)
                if animIndex>animCount then
                    if onEnd then
                        onEnd()
                    end
                    return
                end

                AnimationUtil.Play(animations[animIndex],"mainline_done_2_Anim",function()
                    playLineFunc(animIndex+1)
                end)
            end
            playLineFunc(1)
        else
            if onEnd then
                onEnd()
            end
        end
    else
        if onEnd then
            onEnd()
        end
    end
end

---播放完成动画
function StoryLineUIView:PlayDoneAnim(index)
    local stageGO = self.m_stageList:GetScrollItemTranByIndex(index-1)
    if stageGO then
        --播放done
        local doneTrans = self:GetGoOrNil(stageGO.gameObject,"bg/done")
        if doneTrans then
            doneTrans:SetActive(true)
            local anim = self:GetComp(doneTrans,"","Animation")
            if anim then
                AnimationUtil.Play(anim,"mainline_done_Anim")
            end
        end
    end
end

function StoryLineUIView:OnUnlockBtnDown()
    printf("主线故事：任务已完成,解锁并播放故事")
    local snapStageConfig = self.m_stageConfigs and self.m_stageConfigs[self.m_snapIndex] or nil
    if snapStageConfig then
        StoryLineManager:CompleteStage(snapStageConfig.id)
    end

    local itemGO = self:GetItemGo(self.m_snapIndex-1,self.m_stageList)
    if itemGO then
        self:RefreshStageItem(self.m_snapIndex-1,itemGO.transform)
    end

    self:PlayStory()

    local snapStageConfig = self.m_stageConfigs and self.m_stageConfigs[self.m_snapIndex] or nil
    if snapStageConfig then
        GameSDKs:TrackForeign("mainline_task", {type = 3,stage_new = tonumber(snapStageConfig.id)})
    end
    --self:RefreshBtnArea(self.m_snapIndex)
end

function StoryLineUIView:OnLockedBtnDown()
    printf("主线故事：未解锁")
    local snapStageConfig = self.m_stageConfigs and self.m_stageConfigs[self.m_snapIndex] or nil
    if snapStageConfig then
        if StoryLineManager:GetCurrentStageID()<snapStageConfig.id then
            EventManager:DispatchEvent("UI_NOTE", GameTextLoader:ReadText("TXT_MAINLIVE_LOCKED_1"))
        else
            EventManager:DispatchEvent("UI_NOTE", GameTextLoader:ReadText("TXT_MAINLIVE_LOCKED_2"))
        end
    end
end

function StoryLineUIView:OnReliveBtnDown()
    printf("主线故事：重播")
    local selectIndex = self.m_snapIndex
    ChooseUI:Choose("TXT_MAINLIVE_RELIVE", function ()
        self:PlayStory(selectIndex)
    end)
end

function StoryLineUIView:OnFacebookBtnDown()
    printf("主线故事：跳转Facebook")
    GameDeviceManager:OpenURL("https://www.facebook.com/IdleOfficeTycoon")
end

function StoryLineUIView:PlayStory(selectIndex)
    local snapStageConfig = self.m_stageConfigs and self.m_stageConfigs[selectIndex or self.m_snapIndex] or nil
    if snapStageConfig then
        --显示云层
        FlyIconsUI:SetScenceSwitchEffect(1,function()
            self:DestroyModeUIObject()
            --直接关闭
            GameTableDefine.FloorMode:GetScene():InitGuideTimeLine(snapStageConfig.prefab)
            --暂时隐藏UI,播放完再打开
            --GameTableDefine.FloorMode:GetScene():InitGuideTimeLine(snapStageConfig.prefab,function()
            --    --显示UI
            --    StoryLineUI:ShowStoryLineUI(nil,snapStageConfig.id)
            --end)
            FlyIconsUI:SetScenceSwitchEffect(-1)
        end)
    end
end

function StoryLineUIView:RefreshRewardList(tran,buildingID)
    local go = tran.gameObject

    local iconImage = self:GetComp(go,"icon","Image")
    self:SetSprite(iconImage,"UI_Common",self:GetBuildingIcon(buildingID))
    self:SetText(go,"name",self:GetBuildingName(buildingID))
end

function StoryLineUIView:OnExit(view)
    self.super:OnExit(self)
end

---根据passID获取pass在PassConfigList中的Index
function StoryLineUIView:GetPassItemIndexByPassID(passID)
    for index,v in ipairs(self.m_passConfigs) do
        if v.id == passID then
            return index
        end
    end
end

---根据stageID获取stage在stageConfigs中的Index
function StoryLineUIView:GetStageItemIndexByPassID(stageID)
    for index,v in ipairs(self.m_stageConfigs) do
        if v.id == stageID then
            return index
        end
    end
end

return StoryLineUIView