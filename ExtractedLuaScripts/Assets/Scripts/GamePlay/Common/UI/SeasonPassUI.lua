---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by .
--- DateTime: 2024/12/18 10:57
---

---@class SeasonPassUI
local SeasonPassUI = GameTableDefine.SeasonPassUI
local GameUIManager = GameTableDefine.GameUIManager
local SeasonPassManager = GameTableDefine.SeasonPassManager
local UIPopManager = GameTableDefine.UIPopupManager

SeasonPassUI.TypeToPrefabPathFormat = {
    Main = "Assets/Res/UI/SeasonPass/UI_SeasonPass_%s_%s_Main.prefab",
    Game = "Assets/Res/UI/SeasonPass/UI_SeasonPass_%s_%s_Game.prefab",
    Reward = "Assets/Res/UI/SeasonPass/UI_SeasonPass_%s_%s_Reward.prefab",
    Task = "Assets/Res/UI/SeasonPass/UI_SeasonPass_%s_%s_Task.prefab",
}

function SeasonPassUI:GetView()
    local mainPrefabBase = SeasonPassManager:GetCurrentType()
    local theme = SeasonPassManager:GetTheme()
    
    local viewClass = require("GamePlay.Common.UI.SeasonPassUIView")
    require("GamePlay.Common.UI.SeasonPassUIView_Reward")
    require("GamePlay.Common.UI.SeasonPassUIView_" .. mainPrefabBase)
    require("GamePlay.Common.UI.SeasonPassUIView_Task")
    if mainPrefabBase == SeasonPassManager.MiniGameType.tuibiji then
        require("GamePlay.Common.UI.SeasonPassUIView_tuibijiChoose")
    end

    self.m_prefabPath = self.m_prefabPath or {}
    self.m_prefabPath.Main = string.format(SeasonPassUI.TypeToPrefabPathFormat.Main, mainPrefabBase, theme)
    self.m_prefabPath.Game = string.format(SeasonPassUI.TypeToPrefabPathFormat.Game, mainPrefabBase, theme)
    self.m_prefabPath.Reward = string.format(SeasonPassUI.TypeToPrefabPathFormat.Reward, mainPrefabBase, theme)
    self.m_prefabPath.Task = string.format(SeasonPassUI.TypeToPrefabPathFormat.Task, mainPrefabBase, theme)

    GameUIManager:RedirectPrefab(ENUM_GAME_UITYPE.SEASON_PASS_UI, self.m_prefabPath.Main)

    self.m_view = GameUIManager:SafeOpenUI(ENUM_GAME_UITYPE.SEASON_PASS_UI, self.m_view, viewClass, self, self.CloseView)
    return self.m_view
end

function SeasonPassUI:OpenView(openByPopupUI)
    self.m_openByPopupUI = openByPopupUI
    if not openByPopupUI then
        --2024-12-30 fy添加通行证进入埋点(通过主界面按钮进入)
        GameSDKs:TrackForeign("pass_open", {first_time = tonumber(GameTableDefine.SeasonPassManager:GetIsFirstEnter()) or 1, source = 1})
    else
        --2024-12-30 fy添加通行证进入埋点(通过拍脸图进入)
        GameSDKs:TrackForeign("pass_open", {first_time = tonumber(GameTableDefine.SeasonPassManager:GetIsFirstEnter()) or 1, source = 2})
    end
    self:GetView():Invoke("Init")
end

function SeasonPassUI:CloseView()
    GameUIManager:CloseUI(ENUM_GAME_UITYPE.SEASON_PASS_UI)
    self.m_view = nil
    collectgarbage("collect")
    --关闭界面后才能切换赛季
    SeasonPassManager:CheckChangeToNextPassData()
    --由Popup打开时，关闭界面弹出下一个Popup
    if self.m_openByPopupUI then
        UIPopManager:DequeuePopView(GameTableDefine.SeasonPassPopupUI)
    end

end

---飞图标
---@param  flyIconInfoList SeasonPassFlyIconResInfo[]
function SeasonPassUI:FlyIcon(flyIconInfoList, cb)
    if not self.m_view then
        return
    end
    self.m_view:Invoke("FlyIcon", flyIconInfoList, cb)
end

function SeasonPassUI:RefreshGameView()
    if self.m_view and self.m_view.m_gameRootGO then
        self.m_view:Invoke("RefreshGameView")
    end
end

function SeasonPassUI:OpenViewByDataUpdate(shopID)
    if self.m_view then
        self.m_view:Invoke("OpenViewByDataUpdate", shopID)
    end
end

return SeasonPassUI