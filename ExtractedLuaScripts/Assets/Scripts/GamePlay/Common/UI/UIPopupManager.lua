---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/3/25 11:20
---
--- Modify by GuoXiaoYu
--- DataTime: 2025-2-5 16:05:12
--- 将游戏中的大部分自动弹窗通过该管理器管理弹出顺序

---@class UIPopupManager
local UIPopManager = GameTableDefine.UIPopupManager
local GameUIManager = GameTableDefine.GameUIManager
local GameLauncher = CS.Game.GameLauncher

local orderTable = {
    GameTableDefine.OfflineRewardUI,
    GameTableDefine.IntroduceUI,
    GameTableDefine.LimitPackUI,
    GameTableDefine.LimitChooseUI,
    GameTableDefine.ClockOutPopupUI,
    GameTableDefine.AccumulatedChargeACUI,
    GameTableDefine.FirstPurchaseUI,
    GameTableDefine.PiggyBankUI,
    GameTableDefine.SeasonPassPopupUI,

    GameTableDefine.CycleInstanceDataManager,
}
local blockPop = false
local initialized = false

function UIPopManager:ctor()
    self.m_PopUIQueue = {} --- 弹窗队列
    self.timer = nil
end

function UIPopManager:Init()
    if not self.timer then
        self.timer = GameTimer:CreateNewTimer(0.1, function()
            local floorScene = GameTableDefine.FloorMode:GetScene()
            local tl = floorScene and floorScene.m_GuideTimeLine
            if not tl and not blockPop and GameLauncher.Instance:IsHide() and GameUIManager:UIIsOnTop(ENUM_GAME_UITYPE.MAIN_UI, true, {
                    ENUM_GAME_UITYPE.FLY_ICONS_UI,
                }) then
                self:DequeueTopPopView()
            end
        end, true, true)
    end
    initialized = true

    self.BlockPop = function(block)
        blockPop = block
    end

    EventDispatcher:RegEvent("BLOCK_POP_VIEW", self.BlockPop)
    
end

function UIPopManager:GetUIOrderIndex(ui)
    for k, v in pairs(orderTable) do
        if ui == v then
            return k
        end
    end
end

---将弹窗加入队列，上一个弹窗关闭后会打开下一个弹窗
function UIPopManager:EnqueuePopView(ui, openViewFunc, uiName)
    if not openViewFunc or not ui then
        return
    end
    for i, v in ipairs(self.m_PopUIQueue) do
        if v.ui == ui then
            return
        end
    end
    if not initialized then
        self:Init()
    end

    local uiInfo = { ui = ui, openViewFunc = openViewFunc, name = uiName }
    if next(self.m_PopUIQueue) == nil then
        table.insert(self.m_PopUIQueue, #self.m_PopUIQueue + 1, uiInfo)
    elseif uiName == "OfflineRewardUI" then
        table.insert(self.m_PopUIQueue, 1, uiInfo)
    else
        local uiIndex = self:GetUIOrderIndex(ui)
        local bigger = true
        for i = 1, #self.m_PopUIQueue do
            local curIndex = self:GetUIOrderIndex(self.m_PopUIQueue[i].ui)
            if uiIndex and curIndex and uiIndex < curIndex then
                table.insert(self.m_PopUIQueue, i, uiInfo)
                bigger = false
                break
            end
        end
        if bigger then
            table.insert(self.m_PopUIQueue, #self.m_PopUIQueue + 1, uiInfo)
        end
    end
    
    --if #self.m_PopUIQueue == 1 then
    --    self:OpenFirstUI()
    --end
end

function UIPopManager:OpenFirstUI()
    if #self.m_PopUIQueue >= 1 then
        local uiInfo = self.m_PopUIQueue[1]
        if uiInfo.ui:CheckCanOpen() then
            uiInfo.openViewFunc()
            return true
        end
    end
    return false
end

function UIPopManager:DequeueTopPopView()
    if not self:OpenFirstUI() then
        if #self.m_PopUIQueue > 0 then
            table.remove(self.m_PopUIQueue, 1)
            self:DequeueTopPopView()
        end
    else
        table.remove(self.m_PopUIQueue, 1)
        return
    end 
end

function UIPopManager:DequeuePopView(ui)
    --for i, v in ipairs(self.m_PopUIQueue) do
    --    if v.ui == ui then
    --        table.remove(self.m_PopUIQueue, i)
    --        if i == 1 then
    --            self:OpenFirstUI()
    --        end
    --        break
    --    end
    --end
end

--[[
    @desc: 清理队列中的
    author:{author}
    time:2025-01-03 15:28:40
    @return:
]]
function UIPopManager:ClearQueuePopView()
    self.m_PopUIQueue = {}
end

function UIPopManager:ResetPopView()
    --GameTableDefine.OfflineRewardUI,
    --GameTableDefine.IntroduceUI,
    local introducePopData = LocalDataManager:GetDataByKey("pop")
    introducePopData.last = 0
    
    --GameTableDefine.LimitPackUI,
    local tLAData = GameTableDefine.TimeLimitedActivitiesManager:GetTLAData()
    local limitPackData = tLAData["limitPack"]
    if limitPackData then
        local now = GameTimeManager:GetCurrentServerTime(true)
        local day = GameTimeManager:FormatTimeToD(now)
        limitPackData.enterDay = nil
    end
    
    --GameTableDefine.LimitChooseUI,
    local limitChooseData = tLAData[GameTableDefine.TimeLimitedActivitiesManager.GiftPackType.LimitChoose]
    if limitChooseData then
        local now = GameTimeManager:GetCurrentServerTime(true)
        local day = GameTimeManager:FormatTimeToD(now)
        limitChooseData.enterDay = nil
    end
    
    --GameTableDefine.AccumulatedChargeACUI,
    local accChargeACData = GameTableDefine.AccumulatedChargeActivityDataManager.m_accChargeACData
    if accChargeACData then
        local now = GameTimeManager:GetCurrentServerTime(true)
        local day = GameTimeManager:FormatTimeToD(now or 0)
        accChargeACData.enterDay = nil
    end
    
    --GameTableDefine.FirstPurchaseUI,
    local firstPurchaseData = GameTableDefine.FirstPurchaseUI:GetSaveData()
    if firstPurchaseData then
        local enterDay = firstPurchaseData.enterDay
        --local day = GameTimeManager:FormatTimeToD(enterDay or 0)
        firstPurchaseData.enterDay = nil
    end
    
    --GameTableDefine.PiggyBankUI,
    local piggyBankData = GameTableDefine.PiggyBankUI:GetPiggyBankData()
    if piggyBankData then
        local enterDay = piggyBankData.enterDay
        local now = GameTimeManager:GetCurrentServerTime(true)
        local day = GameTimeManager:FormatTimeToD(now or 0)
        enterDay = nil
    end
    
    --GameTableDefine.SeasonPassPopupUI,
    local currentData = GameTableDefine.SeasonPassManager:GetCurrentPassData()
    if currentData then
        currentData.enterDay = nil
    end
 
    
    --GameTableDefine.CycleCastleViewUI,
    --GameTableDefine.CycleToyViewUI,
    local model = GameTableDefine.CycleInstanceDataManager:GetCurrentModel()
    if model then
        model.saveData.m_CurEnterTime = nil
    end
end

UIPopManager:ctor()

return UIPopManager
