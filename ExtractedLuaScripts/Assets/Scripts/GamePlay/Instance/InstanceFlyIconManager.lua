---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/3/14 16:25
---
---@class InstanceFlyIconManager
local InstanceFlyIconManager = GameTableDefine.InstanceFlyIconManager
local ConfigMgr = GameTableDefine.ConfigMgr
local ResourceManger = GameTableDefine.ResourceManger
local InstanceModel = GameTableDefine.InstanceModel
local InstanceDataManager = GameTableDefine.InstanceDataManager
local FlyIconsUI = GameTableDefine.FlyIconsUI
local EventManager = require("Framework.Event.Manager")


function InstanceFlyIconManager:ctor()
    self.m_storageIcons = {}
end

function InstanceFlyIconManager:GetFlyIcon(config)
    local type = config and config.type or nil
    if not type then
        return nil
    end
    if type == 3 then
        return 3
    elseif type == 9 then
        local cashType = ResourceManger:GetShopCashType(config.country)
        if cashType == "euro" then
            return 6
        else
            return 2
        end
    elseif type == 22 then
        local productions = InstanceDataManager:GetProdutionsData()
        local resData = {}
        for k,v in pairs(productions) do
            if v and v>0 then
                local productionConfig = InstanceDataManager.config_resource_instance[tonumber(k)]
                table.insert(resData,{
                    count = 1,
                    resCfg = productionConfig
                })
            end
        end
        FlyIconsUI:SetInstanceResItem(resData)
        return 107
    elseif type == 24 or type == 25 then
        local instanceBind = InstanceDataManager:GetInstanceBind()
        return instanceBind.cash_fly
    else
        return nil
    end
end

---如果ShopItem需要FlyIcons,就储存FlyIcons
function InstanceFlyIconManager:StorageShopItem(shopId)
    local config = ConfigMgr.config_shop[shopId]
    local flyIconType = self:GetFlyIcon(config)
    if flyIconType then
        if not self.m_storageIcons then
            self.m_storageIcons = {}
        end
        self.m_storageIcons[flyIconType] = true
    end
end

---直接通过flyIconType储存FlyIcons
function InstanceFlyIconManager:StorageFlyIcon(flyIconType)
    self.m_storageIcons[flyIconType] = true
end

---释放储存的FlyIcons
function InstanceFlyIconManager:ReleaseFlyIcons()
    if self.m_storageIcons and next(self.m_storageIcons)~=nil then
        for k,v in pairs(self.m_storageIcons) do
            EventManager:DispatchEvent("FLY_ICON", nil, k)
        end
        self.m_storageIcons = {}
    end
end

InstanceFlyIconManager:ctor()

return InstanceFlyIconManager