---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/1 14:13
---

---@class CycleInstanceAIBlackBoard
local CycleInstanceAIBlackBoard = GameTableDefine.CycleInstanceAIBlackBoard
local Vector3 = CS.UnityEngine.Vector3
local UnityHelper = CS.Common.Utils.UnityHelper
local ActorManager = GameTableDefine.ActorManager
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

local colliderResponse = {}   -- 绑定colliderResponse组件的物体-组件表
local colliderTransTable = {} -- 交互建筑上绑定的数据 roomID,colliderTransTable
local animaTable = {}         --交互建筑上绑定的动画数据

local instanceRoomSeat = {}   -- 副本房间座位

function CycleInstanceAIBlackBoard:ClearSeat()
    instanceRoomSeat = {}
end

---获取演员绑定位置
function CycleInstanceAIBlackBoard:GetActorBindSeat(roomID, actor)
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    local roomData = currentModel:GetRoomDataByID(roomID)
    for k, v in pairs(roomData.furList) do
        -- 初始化列表
        if v.state > 0 then
            if not instanceRoomSeat[roomID] then
                instanceRoomSeat[roomID] = {}
            end
            if not instanceRoomSeat[roomID][k] then
                instanceRoomSeat[roomID][k] = {}
            end

            local seatCount = currentModel:GetRoomFurnitureSeatCount(v.id) -- 已解锁座位数量
            local roomSeatFur = instanceRoomSeat[roomID][k]
            for i2,v2 in ipairs(roomSeatFur) do
                if v2 == actor then
                    print("重复绑定")
                    return roomID, v.index, i2
                end
            end
            if seatCount > 0 and #roomSeatFur < seatCount then
                roomSeatFur[#roomSeatFur + 1] = actor
                actor.data.seat = {
                    roomID = roomID,
                    furIndex = k,
                    index = #roomSeatFur
                }
                return roomID, v.index, #roomSeatFur
            else
                --error(string.format("超出房间 %d 家具 %d 的容量上限 %d", roomID, v.index, seatCount))
            end
        end
    end
    return nil,nil,nil
end

function CycleInstanceAIBlackBoard:UnbindActorWithSeat(actor)
    local seatInfo = actor.data.seat
    if instanceRoomSeat[seatInfo.roomID] then
        if instanceRoomSeat[seatInfo.roomID][seatInfo.furIndex] then
            local isInclude = false
            for k, v in pairs(instanceRoomSeat[seatInfo.roomID][seatInfo.furIndex]) do
                for i = #instanceRoomSeat[seatInfo.roomID][seatInfo.furIndex], 1, -1 do
                    if instanceRoomSeat[seatInfo.roomID][seatInfo.furIndex][i].instanceID == actor.instanceID then
                        table.remove(instanceRoomSeat[seatInfo.roomID][seatInfo.furIndex], i)
                        isInclude = true
                        break
                    end
                end
            end

            if isInclude then
                print("========== 离开房间", actor.instanceID, seatInfo.roomID, seatInfo.furIndex, seatInfo.index)
            else
                error(seatInfo.index)
            end
            actor.data.seat = nil
        end
    end
end

function CycleInstanceAIBlackBoard:RegisterCollider(component)
    if not component then
        return
    end
    local go = component.m_roomObject
    colliderResponse[go] = component
    local furniturePosition = {}
    local furnitureAnim = {}
    component:GetFurnitureGoData(furniturePosition, furnitureAnim)
    colliderResponse[go] = component
    colliderTransTable[go] = furniturePosition
    animaTable[go] = furnitureAnim
end

function CycleInstanceAIBlackBoard:GetInstanceColliderTransTable(roomID)
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    local roomGO = currentModel:GetRoomGameObjectByID(roomID)
    local furniturePosition = colliderTransTable[roomGO]
    return furniturePosition
end


return CycleInstanceAIBlackBoard
