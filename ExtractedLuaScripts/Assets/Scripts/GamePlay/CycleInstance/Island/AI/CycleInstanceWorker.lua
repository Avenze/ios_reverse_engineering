---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/1 14:13
---
local Class = require("Framework.Lua.Class")
local ActorBase = require("CodeRefactoring.Actor.ActorBase")
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager
local FloatUI = GameTableDefine.FloatUI
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local PersonStateMachine = require("CodeRefactoring.AI.StateMachines.PersonStateMachine")
local Animator = CS.UnityEngine.Animator
local Vector3 = CS.UnityEngine.Vector3
local FloorMode = GameTableDefine.FloorMode
local AnimationUtil = CS.Common.Utils.AnimationUtil
local ColliderResponse = require("GamePlay.Floors.Actors.ColliderResponse")

---@class CycleInstanceWorkerClass:ActorBase
---@field super ActorBase
local CycleInstanceWorkerClass = Class("CycleInstanceWorkerClass", ActorBase)

function CycleInstanceWorkerClass:ctor(...)
    self.super:ctor()
    self.initialized = false
    self.data = setmetatable(
            {
                buildID = 0, --所属建筑ID
                roomID = 0, --所属房间ID
                furnitureID = 0, --所属家具ID
                furnitureIndex = 0, --所属家具位置索引
            },
            {
                __index = function(myTable,key)
                    printError(self.instanceID.."  "..self.__cname .. ".data中找不到[ " .. key .. " ]属性")
                    return nil
                end
            }
    )
    local data = select(1, ...)
    self:SetData(data)
    self.m_type = ActorDefine.ActorType.CycleInstanceWorker
    self.m_go = nil
end

function CycleInstanceWorkerClass:Init(id, go, actorData, pos, rot,isBuy)
    self.m_animator = go:GetComponent(typeof(Animator))

    --优化Animator性能
    if not self.m_animator:IsNull() and not self.m_animator.applyRootMotion then
        self.m_animator.cullingMode = CS.UnityEngine.AnimatorCullingMode.CullUpdateTransforms
    end

    if not self.m_stateMachine then
        self.m_stateMachine = PersonStateMachine.create()   ---@type PersonStateMachine
        self.m_stateMachine:SetOwner(self)
        self:AddAI(self.m_stateMachine)
        self:TryTransState(function ()
            self.m_stateMachine:ChangeState(ActorDefine.CycleInstanceState.CycleInstanceWorkerInit, self,isBuy)
        end)
    end
    self.super.Init(self, id, go, actorData, self.m_stateMachine, pos, rot)
    self.data.type = "CycleInstanceWorker"
    self.m_go = go
    self.initialized = true
    self:SetDoorTrigger()
    print("创建 CycleInstanceWorker", id)
end


function CycleInstanceWorkerClass.InitAI(CycleInstanceWorker, roomGo, furnitureGo, spawnPos, workPosTr, facePosTr, actionPosTr, faceTr)
    if not CycleInstanceWorker.aiStateMachine then
        return
    end
    CycleInstanceWorker.aiStateMachine:Init(roomGo, furnitureGo, spawnPos, workPosTr, facePosTr, actionPosTr, faceTr)
end


function CycleInstanceWorkerClass.OnUpdate(CycleInstanceWorker, dt) -- dt为毫秒
    CycleInstanceWorker.super:OnUpdate(dt)
    CycleInstanceWorker.UpdataData(CycleInstanceWorker)
end


--设置气泡的显示
function CycleInstanceWorkerClass:SetTheDisplayOfBubbles(typeB, interactiveRoomId)
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    local workerAttr = currentModel:GetWorkerAttr(self.data.roomID, self.data.furnitureIndex)
    local state =
    {
        interactiveRoomId = interactiveRoomId,
        roomId = self.data.roomID,
        index = self.data.furnitureIndex,
        workProgress = 0,
        hungry = workerAttr.hungry,
        physical = workerAttr.physical,
        productionID = currentModel.roomsConfig[self.data.roomID].production
    }
    local speed
    if typeB == "product" then
        local roomCfg = currentModel.roomsConfig[state.roomId]
        local allReduce = currentModel:GetRoomCDReduce(state.roomId)
        local cd = roomCfg.bastCD - allReduce
        speed = 1 / cd
    elseif typeB == "eat" then
        speed = currentModel:GetRoomHunger(state.interactiveRoomId)
    elseif typeB == "sleep" then  
        speed = currentModel:GetRoomPhysical(state.interactiveRoomId)
    end
    state.speed = speed

    self.bubbleState = state
    self.typeB = typeB
    FloatUI:SetObjectCrossCamera(self, function(view)        
        view:Invoke("RefreshCycleInstanceWorkerBubble", self.typeB, self.bubbleState)
    end,function()
        if not self.view then
            return
        end
        self.view:Invoke("RefreshCycleInstanceWorkerBubble")
    end,0)                   
end

--[[
    @desc: 获取最近的功能房间
    author:{author}
    time:2023-08-25 17:50:32
    --@stateMachine:
	--@roomType: 
    @return:
]]
function CycleInstanceWorkerClass:GetNearestHouse(roomType)
    local actor = self
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    local rooms = currentModel:GetRoomDataByType(roomType)
    local dis = 9999999
    for i=1, #rooms do
        local roomData = rooms[i]
        local roomGO = currentModel:GetRoomGameObjectByID(roomData.roomID)
        local tempDis = Vector3.Distance(actor.gameObject.transform.position,roomGO.transform.position)
        if dis > tempDis and roomData.state == 2 then
            dis = tempDis
            return roomData.roomID, roomGO
        end
    end
end

---睡觉时间改变加班状态
function CycleInstanceWorkerClass:ForceWork(enable)
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    if currentModel.timeType ~= currentModel.TimeTypeEnum.sleep then
        return
    end
    if enable then
        if self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerSleep) or
                self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerWalkToSleep) or
                self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerRunToSleepQueue) then
            self:TryTransState(function()
                self.m_stateMachine:ChangeState(ActorDefine.CycleInstanceState.CycleInstanceWorkerRunToWorkSeat,self)
            end)
        end
    else
        if not (self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerSleep) or
                self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerWalkToSleep) or
                self.m_stateMachine:IsState(ActorDefine.CycleInstanceState.CycleInstanceWorkerRunToSleepQueue)) then
            self:TryTransState(function()
                self.m_stateMachine:ChangeState(ActorDefine.CycleInstanceState.CycleInstanceWorkerRunToSleepQueue,self)
            end)
        end
    end
end

--region 初始化
---设置与门交互的Trigger
function CycleInstanceWorkerClass:SetDoorTrigger()
    local animName = {"DoorOpenAnim", "ToiletDoor_open"}
    local animIndex = 1
    local enterFunc = function(responseGo, activatorGo, outRoom)
        local coll = responseGo:GetComponent("ColliderResponse")
        local anim = coll:GetDoorAnim()
        if not anim or coll:GetTriggerCount() > 1 then
            return
        end

        local lastAni = 1
        local currAni = AnimationUtil.GetAnimationState(anim, animName[lastAni])
        if not currAni then
            lastAni = 2
            currAni = AnimationUtil.GetAnimationState(anim, animName[lastAni])
        end
        local needAni = outRoom == true and "_revert" or ""

        if anim.isPlaying then
            return
        end

        AnimationUtil.Play(anim, animName[lastAni] .. needAni, function()
            AnimationUtil.GotoAndStop(anim, animName[lastAni] .. needAni, "KEY_FRAME_CLOSE_POINT")--放完停在末尾,让isPlay为true
        end)

        FloorMode:MakeDoorTimer(responseGo, function()--几秒后没人自动关闭
            if coll and not CS.UnityEngine.Object.ReferenceEquals( coll, nil ) and coll:GetTriggerCount() == 0 and anim then
                AnimationUtil.Play(anim, animName[lastAni] .. needAni, nil, -1, "KEY_FRAME_SECOND")
                return true
            elseif not anim then
                return 1--切换场景的时候没了...或者其他原因导致的错误
            end

            return false
        end)
    end
    ColliderResponse:SetActivatorTriggerEventOnEnter(ColliderResponse.TYPE_OPEN_DOOR, self.m_go, enterFunc)
end

--endregion

return CycleInstanceWorkerClass
