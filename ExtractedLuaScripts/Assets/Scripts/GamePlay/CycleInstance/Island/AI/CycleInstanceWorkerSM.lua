---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/1 14:13
---
local AIStateMachine = require("CodeRefactoring.AI.AIStateMachine")
local Class = require("Framework.Lua.Class")
---@class CycleInstanceWorkerSM:AIStateMachine
---@field super AIStateMachine
local CycleInstanceWorkerSM = Class("CycleInstanceWorkerSM", AIStateMachine)
local AIStateEnum = require("CodeRefactoring.AI.AIStateEnum")
local UIView = require("Framework.UI.View") -- 当工具类使用
local UnityHelper = CS.Common.Utils.UnityHelper
local ActorTypeEnum = require("CodeRefactoring.Actor.ActorTypeEnum")
local CfgMgr =  GameTableDefine.ConfigMgr

local ActorManager = GameTableDefine.ActorManager
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager
local Random = CS.UnityEngine.Random
local Vector3 = CS.UnityEngine.Vector3
local CycleInstanceAIBlackBoard = GameTableDefine.CycleInstanceAIBlackBoard
local FloatUI = GameTableDefine.FloatUI


local PERSON_ACTION = {
    IDLE = 1,
    IDLE2SIT = 2,
    WORK = 3,
    SIT2IDLE = 4,
    WALK = 5,
    RUN = 6,
    DANCE = 7,
    SIT = 8,
    POO = 9,
    REST1 = 10,
    REST2 = 11,
    REST3 = 12,
    REST4 = 13,
    REST5 = 14,
    REST6 = 15,
    REST7 = 16,
    DARTS1 = 17,
    DARTS2 = 18,
    GOLF1 = 19,
    GOLF2 = 20,
    WATCH = 21,
    GAMING = 22,
    DANCE1 = 23,
    DANCE2 = 24,
    DANCE3 = 25,
    DANCE4 = 26,
    OBSERVE = 27,
    SHOPPING = 28,
    DRINGK_KING = 29,
    REPAIR = 30
}

local WALK_SPEED = 5.5
local RUN_SPEED = 15

local roomSeat = {} -- 房间座位表

function CycleInstanceWorkerSM:Init( roomGO, furGO, spawnPos, workPosTr, faceTr, actionPosTr, ActionPosFaceTr)
    self.RoomGO = roomGO
    self.FurGO = furGO
    self.SpawnPos = spawnPos
    self.WorkPos = {
        work = workPosTr,
        face = faceTr,
        actPos = actionPosTr,
        actPosFace = ActionPosFaceTr
    }

    self.super.Init(self)
end

function CycleInstanceWorkerSM.InitStates(stateMachine)
    -- 初始化 根据当前条件查找下一个状态
    stateMachine.super.InitStates(stateMachine)

    -- 重写状态
    stateMachine:OverwriteState()
end

function CycleInstanceWorkerSM.OverwriteState(stateMachine)
    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    ----------------初始化状态---------------- 
    stateMachine.states[AIStateEnum.Instance_Init] = function(stateMachine, ...)
        local actor = stateMachine.actor
        local data = stateMachine.data
        -- 根据当前时间阶段初始化位置
        local timeType = currentModel.lastTimeType
        if timeType == currentModel.TimeTypeEnum.work then
            -- 初始化在工作点
            actor.gameObject.transform.position = stateMachine.WorkPos.actPos.transform.position
            actor.gameObject.transform.rotation = stateMachine.WorkPos.actPosFace.transform.rotation
            -- 变换行为
            actor:TryTransState(
                function()
                    stateMachine:TransState(AIStateEnum.Instance_Work)
                end
            )
        elseif timeType == currentModel.TimeTypeEnum.eat then
            -- 获取吃饭对应的角色, 在座位的初始化到座位上, 不在座位的初始化到工位点
            if not currentModel.actorSeatBind[currentModel.timeType] or next(currentModel.actorSeatBind[currentModel.timeType]) == nil then
                currentModel:WorkerAttrRevert(currentModel.timeType, true)
            end
            local actorSeatBind = currentModel.actorSeatBind[currentModel.timeType]
            local rooms = currentModel:GetRoomDataByType(3)
            local targetRoomID = rooms[1].roomID
            local actorData = actor.data
            local stateMachine = actor.aiStateMachine
            if actorSeatBind[actorData.roomID] and actorSeatBind[actorData.roomID][actorData.furnitureIndex] then
                local roomId, furIndex, index = CycleInstanceAIBlackBoard:GetActorBindSeat(targetRoomID,actor)
                local roomGO = currentModel:GetRoomGameObjectByID(roomId)
                local workPosName = "workPos_"..index
                local workPosTrans = UIView:GetTrans(roomGO, workPosName)
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_Eat, targetRoomID, workPosTrans)
                    end
                )
            else
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_RunToEatLine, targetRoomID, false)
                    end
                )
            end

        elseif timeType == currentModel.TimeTypeEnum.sleep then
            -- 获取睡觉对应的角色, 在床上的初始化到床上, 不再床上的初始化到工位点
            if not currentModel.actorSeatBind[currentModel.timeType] or next(currentModel.actorSeatBind[currentModel.timeType]) == nil then
                currentModel:WorkerAttrRevert(currentModel.timeType, true)
            end
            local actorSeatBind = currentModel.actorSeatBind[currentModel.timeType]
            local actorData = actor.data
            local stateMachine = actor.aiStateMachine
            if actorSeatBind[actorData.roomID] and actorSeatBind[actorData.roomID][actorData.furnitureIndex] then
                local targetRoomID = actorSeatBind[actorData.roomID][actorData.furnitureIndex]
                local roomId, furIndex, index = CycleInstanceAIBlackBoard:GetActorBindSeat(targetRoomID,actor)
                local roomGO = currentModel:GetRoomGameObjectByID(roomId)
                local workPosName = "workPos_"..index
                local workPosTrans = UIView:GetTrans(roomGO, workPosName)
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_Sleep, targetRoomID, workPosTrans)
                    end
                )
            else
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_RunToSleepLine)
                    end
                )
            end

        end

        actor:SetTheDisplayOfBubbles("state")

    end

    -------------------待机----------------- 
    stateMachine.states[AIStateEnum.Instance_Idle] = function(stateMachine, ...)
        local actor = stateMachine.actor
        actor:SetTheDisplayOfBubbles("state")
    end

    -------------------工作----------------- 
    stateMachine.states[AIStateEnum.Instance_Work] = function(stateMachine, ...)
        local actor = stateMachine.actor
        -- 初始化在工作点
        actor.gameObject.transform.position = stateMachine.WorkPos.actPos.transform.position
        actor.gameObject.transform.rotation = stateMachine.WorkPos.actPosFace.transform.rotation
        -- 播放动画
        stateMachine:SetAnimator(PERSON_ACTION.WORK)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles("product")

    end

    -------------------吃饭------------------
    stateMachine.states[AIStateEnum.Instance_Eat] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local workPosGO = select(2, ...)
        local colliderRespTable = CycleInstanceAIBlackBoard:GetInstanceColliderTransTable(roomID)
        if not colliderRespTable then
            return
        end
        local headStr = workPosGO.transform.parent.parent.gameObject:GetInstanceID()..workPosGO.name
        local furPosTable = colliderRespTable[headStr]
        local anim = furPosTable.anim
        local needSetting = furPosTable.setting
        local pos = furPosTable.pos
        local furnGo = furPosTable.furnGo
        local posGo = furPosTable.posGo

        local actor = stateMachine.actor
        local face = UIView:GetTrans(workPosGO.gameObject, "face") 
        -- 设置位置和旋转
        actor.gameObject.transform.position = workPosGO.transform.position
        UnityHelper.RotateTowards(actor.gameObject.transform, Vector3(face.position.x, workPosGO.transform.position.y, face.position.z))
        --播放动画
        stateMachine:SetAnimator(anim[1])
        -- 显示气泡
        actor:SetTheDisplayOfBubbles("eat",roomID)
    end

    -------------------睡觉------------------
    stateMachine.states[AIStateEnum.Instance_Sleep] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local workPosGO = select(2, ...)
        local colliderRespTable = CycleInstanceAIBlackBoard:GetInstanceColliderTransTable(roomID)
        if not colliderRespTable then
            return
        end
        local headStr = workPosGO.transform.parent.parent.gameObject:GetInstanceID()..workPosGO.name
        local furPosTable = colliderRespTable[headStr]
        local anim = furPosTable.anim
        local needSetting = furPosTable.setting
        local pos = furPosTable.pos
        local furnGo = furPosTable.furnGo
        local posGo = furPosTable.posGo

        local actor = stateMachine.actor
        local face = UIView:GetTrans(workPosGO.gameObject, "face") 
        local actionPos = UIView:GetTrans(workPosGO.gameObject, "actionPos")
        local actionFace = UIView:GetTrans(actionPos.gameObject, "face")
        -- 设置位置和旋转
        actor.gameObject.transform.position = actionPos.transform.position
        UnityHelper.RotateTowards(actor.gameObject.transform, Vector3(actionFace.position.x, actionPos.transform.position.y, actionFace.position.z))
        --播放动画
        stateMachine:SetAnimator(anim[1])
        -- 显示气泡
        actor:SetTheDisplayOfBubbles("sleep", roomID)
    end

    -------------------跑到吃饭排队点------------------
    stateMachine.states[AIStateEnum.Instance_RunToEatLine] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local eat = select(2, ...)
        local actor = stateMachine.actor
        local speed = RUN_SPEED + Random.Range(-1.1, 1.1)
        
        -- 设置寻路
        if eat then -- 有座位 进房间吃饭的人
            local roomGO = currentModel:GetRoomGameObjectByID(roomID)
            local queuePos = UIView:GetTrans(roomGO, "QueuePoint")
            actor:CalculatePath(
                queuePos,
                true,
                speed,
                Random.Range(1.1, 4.1),
                function()
                    local roomId, furIndex, index = stateMachine.InstanceAIBlackBoard:GetActorBindSeat(roomID,actor)
                    actor:TryTransState(
                        function()
                            stateMachine:TransState(AIStateEnum.Instance_WalkToEat, roomId, furIndex, index)
                        end
                    )
                end
            )
            
        else -- 没位置, 在房间外排队等待的人
            local targetRoomID,TargetRoomGO = stateMachine.actor:GetNearestHouse(3)
            local queuePos = UIView:GetTrans(TargetRoomGO, "QueuePoint")
            actor:CalculatePath(
                queuePos,
                true,
                speed,
                Random.Range(1.1, 4.1),
                function ()
                    actor:TryTransState(
                        function()
                            stateMachine:TransState(AIStateEnum.Instance_LineUp, targetRoomID, TargetRoomGO , nil)
                        end
                    )
                end
            )
            
        end
        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.RUN)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles()
    end

    ------------------跑到睡觉排队点------------------
    stateMachine.states[AIStateEnum.Instance_RunToSleepLine] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local sleep = roomID ~= nil
        local actor = stateMachine.actor
        local speed = RUN_SPEED + Random.Range(-1.1, 1.1)
        
        -- 设置寻路
        if sleep then -- 有床位 进房间睡觉的人
            local roomGO = currentModel:GetRoomGameObjectByID(roomID)
            local queuePos = UIView:GetTrans(roomGO, "QueuePoint")
            actor:CalculatePath(
                queuePos,
                true,
                speed,
                Random.Range(1.1, 4.1),
                function()
                    local roomId, furIndex, index = stateMachine.InstanceAIBlackBoard:GetActorBindSeat(roomID,actor)
                    actor:TryTransState(
                        function()
                            stateMachine:TransState(AIStateEnum.Instance_WalkToSleep, roomId, furIndex, index)
                        end
                    )
                end
            )
            
        else -- 没位置, 在房间外排队等待的人
            local targetRoomID,TargetRoomGO = stateMachine.actor:GetNearestHouse(2)
            local queuePos = UIView:GetTrans(TargetRoomGO, "QueuePoint")
            actor:CalculatePath(
                queuePos,
                true,
                speed,
                Random.Range(1.1, 4.1),
                function ()
                    actor:TryTransState(
                        function()
                            stateMachine:TransState(AIStateEnum.Instance_LineUp, targetRoomID, TargetRoomGO , nil)
                        end
                    )
                end
            )
            
        end
        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.RUN)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles()
    end

    ------------------跑到工位点------------------
    stateMachine.states[AIStateEnum.Instance_RunToWorkSet] = function(stateMachine, ...)
        local actor = stateMachine.actor
        local speed = RUN_SPEED + Random.Range(-1.1, 1.1)
        --寻路到workSet
        actor:CalculatePath(
            stateMachine.WorkPos.work,
            true,
            speed,
            Random.Range(1.1, 4.1),
            function()
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_WalkToWorkPos)
                    end
                )
            end
        )
        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.RUN)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles()
    end

    ------------------走到工作动作点------------------
    stateMachine.states[AIStateEnum.Instance_WalkToWorkPos] = function(stateMachine, ...)
        local actor = stateMachine.actor
        local speed = WALK_SPEED + Random.Range(-1.1, 1.1)
        --寻路到workSet
        actor:CalculatePath(
            stateMachine.WorkPos.actPos,
            true,
            speed,
            Random.Range(1.1, 4.1),
            function()
                actor:TryTransState(
                    function()
                        stateMachine:TransState(AIStateEnum.Instance_Work)
                    end
                )
            end
        )
        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.WALK)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles()
    end

    ------------------走到吃饭的座位------------------
    stateMachine.states[AIStateEnum.Instance_WalkToEat] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local furIndex = select(2, ...)
        local Index = select(3, ...)
        local actor = stateMachine.actor
        local furGO = currentModel:GetFurGameObject(roomID, furIndex)
        local workPosName = "workPos_"..Index
        local pathTarget = UIView:GetTrans(furGO, workPosName)
        local speed = WALK_SPEED + Random.Range(-1.1, 1.1)

        --设置寻路
        actor:CalculatePath( pathTarget, true, speed, Random.Range(1.1, 4.1), function()
            actor:TryTransState(function()
                stateMachine:TransState(AIStateEnum.Instance_Eat, roomID, pathTarget)
            end) 
        end)

        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.WALK)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles("eat", roomID)
    end

    ------------------走到睡觉的位置------------------
    stateMachine.states[AIStateEnum.Instance_WalkToSleep] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local furIndex = select(2, ...)
        local Index = select(3, ...)
        local actor = stateMachine.actor
        local furGO = currentModel:GetFurGameObject(roomID, furIndex)
        local workPosName = "workPos_"..Index
        local pathTarget = UIView:GetTrans(furGO, workPosName)
        local speed = WALK_SPEED + Random.Range(-1.1, 1.1)

        --设置寻路
        actor:CalculatePath( pathTarget, true, speed, Random.Range(1.1, 4.1), function()
            actor:TryTransState(function()
                stateMachine:TransState(AIStateEnum.Instance_Sleep, roomID, pathTarget)
            end) 
        end)
        --播放动画
        stateMachine:SetAnimator(PERSON_ACTION.WALK)
        -- 显示气泡
        actor:SetTheDisplayOfBubbles("sleep", roomID)
    end

    ------------------排队等待------------------
    stateMachine.states[AIStateEnum.Instance_LineUp] = function(stateMachine, ...)
        local roomID = select(1, ...)
        local targetRoom = select(2, ...)
        local actor = stateMachine.actor
        local colliderTransTable = CycleInstanceAIBlackBoard:GetInstanceColliderTransTable(roomID)
        local start = UIView:GetTrans(targetRoom,"QueueStart")
        
        local queuePathCallback = function(queueIndex, queuePath)
            -- 寻路到排队点
            local speed = RUN_SPEED
            local pathTarget = nil
            if queueIndex <= #queuePath then
                pathTarget = queuePath[queueIndex]
            else
                pathTarget = queuePath[#queuePath]
            end
            actor:CalculatePath( pathTarget, true, speed, Random.Range(1, 4.1), function()
                -- 播放动画
                stateMachine:SetAnimator(math.random(PERSON_ACTION.REST1, PERSON_ACTION.REST4))
                -- 设置位置和旋转
                actor.gameObject.transform.position = pathTarget
                --UnityHelper.RotateTowards(actor.gameObject.transform, Vector3(facPostion.x, self.parent.m_go.transform.position.y, facPostion.z))
    
            end)
            return
            
        end
        local queueIndex,queuePath = CycleInstanceAIBlackBoard:AddInstanceQueue(roomID, start, actor, queuePathCallback)
        if queueIndex and queuePath then
            queuePathCallback(queueIndex, queuePath)
        end
        -- 显示气泡
        actor:SetTheDisplayOfBubbles()
    end
end

function CycleInstanceWorkerSM.TransState(stateMachine, stateType, ...)
    stateMachine.super.TransState(stateMachine, stateType, ...)
end

function CycleInstanceWorkerSM.Destory(stateMachine)
    stateMachine.super.Destory(stateMachine)
end

--[[
    @desc: 获取最近的功能房间
    author:{author}
    time:2023-08-25 17:50:32
    --@stateMachine:
	--@roomType: 
    @return:
]]
--function CycleInstanceWorkerSM.GetNearestHouse(stateMachine, roomType)
--    local actor = stateMachine.actor
--    local rooms = InstanceModel:GetRoomDataByType(roomType)
--    local dis = 9999999
--    for i=1, #rooms do
--        local roomData = rooms[i]
--        local roomGO = InstanceModel:GetRoomGameObjectByID(roomData.roomID)
--        local tempDis = Vector3.Distance(actor.gameObject.transform.position,roomGO.transform.position)
--        if dis > tempDis then
--            dis = tempDis
--            return roomData.roomID, roomGO
--        end
--    end
--end


return CycleInstanceWorkerSM
