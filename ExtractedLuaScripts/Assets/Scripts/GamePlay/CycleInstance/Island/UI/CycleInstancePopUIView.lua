---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/3 11:16
---


local Class = require("Framework.Lua.Class")
local UIView = require("Framework.UI.View")
local GameResMgr = require("GameUtils.GameResManager")
local Shop = GameTableDefine.Shop
local ShopManager = GameTableDefine.ShopManager
local ConfigMgr = GameTableDefine.ConfigMgr
local PurchaseSuccessUI = GameTableDefine.PurchaseSuccessUI
local UnityHelper = CS.Common.Utils.UnityHelper
local GameObject = CS.UnityEngine.GameObject
local CycleInstancePopUI = GameTableDefine.CycleInstancePopUI
local EventManager = require("Framework.Event.Manager")
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

---@class CycleInstancePopUIView:UIBaseView 礼包界面
local CycleInstancePopUIView = Class("CycleInstancePopUIView", UIView)

CycleInstancePopUIView.ShopTypeToItemNamePath = {
    [3]  = "bg/Num_Diamond",
    [26] = "bg/Num_Exp",
    [27] = "bg/Num_Skill",
    [30] = "bg/Num_SlotCoin",
}

local ItemName = {
    [1] = "item1",
    [2] = "item2",
    [3] = "item3",
    [4] = "item4",
    [5] = "item5",
    [6] = "item6",
    [7] = "item7",
    [8] = "item8"
}

function CycleInstancePopUIView:ctor()
    self.super:ctor()
    self.m_giftPackScrollList = nil ---@type UnityEngine.UI.ScrollRectEx
    self.m_packConfigs = nil ---@type table[]
    self.m_focusGiftIndex = 1
    self.m_markItems = nil ---@type UnityEngine.GameObject[]
    self.m_leftRightButtonParentGO = nil ---@type UnityEngine.GameObject
    self.timers = {}
    ---刚点击过购买的礼包的ID
    self.m_clickBuyGiftID = nil

    self.m_currentModel = nil ---@type CycleInstanceModel
end

function CycleInstancePopUIView:OnEnter()

    self.m_currentModel = CycleInstanceDataManager:GetCurrentModel()

    self.m_focusGiftIndex = 1

    self:SetButtonClickHandler(self:GetComp("RootPanel/bg", "Button"), function()
        EventManager:DispatchEvent("FLY_ICON", nil, 204, nil)
        self:DestroyModeUIObject()
    end)

    self.m_leftBtnGO = self:GetGo("RootPanel/info/leftAndRight/leftBtn")
    self.m_rightBtnGO = self:GetGo("RootPanel/info/leftAndRight/rightBtn")
    self:SetButtonClickHandler(self:GetComp("RootPanel/info/leftAndRight/leftBtn","Button"),handler(self,self.OnLeftButtonDown))
    self:SetButtonClickHandler(self:GetComp("RootPanel/info/leftAndRight/rightBtn","Button"),handler(self,self.OnRightButtonDown))

    self.m_packConfigs = {}

    self.m_giftPackScrollList = self:GetComp("RootPanel/info/ScrollRectEx","ScrollRectEx")

    self:SetListItemCountFunc(self.m_giftPackScrollList, function()
        return #self.m_packConfigs
    end)
    self:SetListItemNameFunc(self.m_giftPackScrollList, function(index)
        return "item"
    end)
    self:SetListUpdateFunc(self.m_giftPackScrollList, handler(self, self.RefreshGiftPackItem))

    self:SetSnapMoveDoneFunc(self.m_giftPackScrollList,handler(self,self.OnListSnap))

    self.m_giftPackScrollList:UpdateData()

    ShopManager:refreshBuySuccess(function(shopId)
        ShopManager:Buy(shopId, false, function()
            local clickShopID,packConfig
            if self.m_clickBuyGiftID then
                packConfig = self.m_currentModel:GetGiftCfgByID(self.m_clickBuyGiftID)
                clickShopID = packConfig.price_shop_id
            end
            if clickShopID == shopId then
                local res = {} ---@type CycleFlyIconResInfo[]
                for _, content in ipairs(packConfig.content_shop_id) do
                    local childId = content[1]
                    local childCount = content[2]
                    local rewardInfo = self.m_currentModel:InstanceShopBuySccess(tonumber(childId),nil,nil,childCount)
                    local childCfg = ShopManager:GetCfg(childId)
                    if childCfg.type == 27 then --获得的技能书
                        for k,v in pairs(rewardInfo) do
                            if v>0 then
                                table.insert(res,{itemType = 27,str = v,icon = "icon_cy1_skill_"..k})
                            end
                        end
                    else
                        local value = ShopManager:GetValueByShopId(childId)
                        if type(value) == "number" then
                            value = value * childCount
                        end
                        local showValue,showType = ShopManager:SetValueToShow(value,childCfg)
                        local resInfo = {itemType = childCfg.type,str = showValue} ---@type CycleFlyIconResInfo
                        table.insert(res,resInfo)
                    end
                end
                --GameTableDefine.InstanceFlyIconManager:PlayCycleFlyIcons(res)
                GameTableDefine.FlyIconsUI:SetCycleInstanceNum(res)
                currentModel:AddGiftPackBuyTimes(self.m_clickBuyGiftID,1)
                GameTableDefine.CycleIslandMainViewUI:RefreshPackButton()
            end
        end,
        function()
            local data = ConfigMgr.config_shop[shopId]
            if data then
                --PurchaseSuccessUI:SuccessBuy(shopId, function()
                --    self:DestroyModeUIObject()
                --    GameTableDefine.InstanceFlyIconManager:ReleaseFlyIcons()
                --end)
                self:DestroyModeUIObject()
                --GameTableDefine.InstanceFlyIconManager:ReleaseFlyIcons()
            end
        end)
    end)
    ShopManager:refreshBuyFail(function(shopId)
    end)

    self.m_leftRightButtonParentGO = self:GetGo("RootPanel/info/leftAndRight")
end

function CycleInstancePopUIView:Init(id)
    self.m_markItems = {}
    local markParent = self:GetTrans("RootPanel/info/mark")
    local markTemp = self:GetGo("RootPanel/info/mark/temp")
    local packList = CycleInstancePopUI.packList
    local packCount = #packList

    local currentModel = CycleInstanceDataManager:GetCurrentModel()
    local canBuyCount = 0
    local AddPack = function(packID)
        if self.m_currentModel:CanBuyGift(packID) then
            canBuyCount = canBuyCount + 1
            self.m_packConfigs[canBuyCount] = self.m_currentModel:GetGiftCfgByID(packID)
            local markGO = GameObject.Instantiate(markTemp,markParent)
            self.m_markItems[canBuyCount] = markGO
        end
    end
    for i = 1, packCount do
        local packID = packList[i]
        AddPack(packID)
    end

    
    self.m_leftRightButtonParentGO:SetActive(canBuyCount>1)
    if canBuyCount>1 then
        self.m_leftBtnGO:SetActive(false)
    end
    markTemp:SetActive(false)
    self.m_giftPackScrollList:UpdateData(true)
    if id then
        for i = 1, #self.m_packConfigs do
            if self.m_packConfigs[i].id == id then
                self.m_giftPackScrollList:SetSnapIndex(i - 1)
            end
        end
    else
        self.m_giftPackScrollList:UpdateData(true)
        
    end


end

function CycleInstancePopUIView:RefreshGiftPackItem(index,tran)
    index = index + 1
    local go = tran.gameObject

    local packCfg = self.m_packConfigs[index]
    local packID = packCfg.id
    local priceShopID = packCfg.price_shop_id
    local priceShopCfg = ShopManager:GetCfg(priceShopID)

    if not packCfg then
        printError("没找到礼包配置")
        self:DestroyModeUIObject()
        return
    end
    if not priceShopCfg or not priceShopCfg.iap_id then
        printError("礼包没配 price_shop_id 或 iap_id,giftID = ".. packID)
        self:DestroyModeUIObject()
        return
    end
    local boughtTimes = self.m_currentModel:GetGiftPackBuyTimes(packID)
    local canBuyTimes = packCfg.limit

    local price = Shop:GetShopItemPrice(priceShopID)
    local trackPrice = Shop:GetShopItemPrice(priceShopID, true)

    --Price
    self:SetText(go,"btn/buyBtn/text", tostring(price))
    self:SetText(go,"title/offvalue/num", packCfg.disNum)
    
    --BuyBtn
    local btn = self:GetComp(go,"btn/buyBtn", "Button")
    btn.interactable = self.m_currentModel:CanBuyGift(packID)
    self:SetButtonClickHandler(btn, function()
        btn.interactable = false
        self.m_clickBuyGiftID = packID
        GameSDKs:TrackForeign("store", {operation_type = 1, product_id = GameTableDefine.IAP:GetPurchaseId(priceShopCfg.iap_id), pay_type = 1, cost_num = trackPrice})
        Shop:CreateShopItemOrder(priceShopID)
    end)
    --Name
    self:SetText(go,"title/txt", GameTextLoader:ReadText(packCfg.name))

    --CanBuyTimes
    if canBuyTimes>0 then
        self:SetText(go,"restrictBuy/num", tostring(math.max(0,canBuyTimes - boughtTimes)))
    else
        self:SetText(go,"restrictBuy/num", GameTextLoader:ReadText("无限"))
    end

    --Name
    local nameStr = GameTextLoader:ReadText(packCfg.name)
    self:SetText(go,"title/txt_1", nameStr)
    self:SetText(go,"title/txt_2", nameStr)
    self:SetText(go,"title/txt_3", nameStr)

    --Icon 设置了icon才改变
    --if shopCfg.icon then
    --    local iconImage = self:GetComp("icon")
    --    self:SetSprite(iconImage,"UI_Common", shopCfg.icon)
    --end

    --local allItemIDs = shopCfg.param
    --local itemCount = #allItemIDs
    ----礼包内容
    --local maxItemNum = self:GetMaxPackItemNum()
    --for i = 1, maxItemNum do
    --    local needDelete = i > itemCount
    --    self:InitShopItem(go,allItemIDs[i],i,needDelete)
    --end

    local contentShopIDIndex = 1
    local parentGO = self:GetGo(go,"buff")
    local i = 1
    while i<100 do
        local shopInfo = packCfg.content_shop_id[contentShopIDIndex]
        if shopInfo then
            self:InitShopItem(self:GetOrCreateItem(parentGO,i),shopInfo[1],shopInfo[2])
            contentShopIDIndex = contentShopIDIndex + 1
        else
            local itemGO = self:GetGoOrNil(parentGO,ItemName[i])

            if itemGO then
                itemGO:SetActive(false)
            else
                break
            end
        end
        i = i + 1
    end
    
    -- 剩余时间
    local active = packCfg.time > 0
    self:GetGo(go, "timer"):SetActive(active)
    if active then
        if self.timers[index] then
            GameTimer:StopTimer(self.timers[index])
        end
        self.timers[index] = GameTimer:CreateNewTimer(1, function()
            local packData = self.m_currentModel:GetLimitTimePackData(packCfg.id)
            local remain = packData.time and packData.time + packCfg.time * 60 - GameTimeManager:GetCurrentServerTime(true) or 0
            local remainingTime = GameTimeManager:FormatTimeLength(remain)
            self:SetText(go, "timer/num", remainingTime)
        end, true, true)

    end
end

function CycleInstancePopUIView:GetOrCreateItem(parentGO,index)
    local itemGO = self:GetGoOrNil(parentGO, ItemName[index])
    if not itemGO then
        local temp = self:GetGo(parentGO,"item")
        temp:SetActive(false)
        itemGO = GameObject.Instantiate(temp, parentGO.transform)
        itemGO.name = ItemName[index]
    end
    itemGO:SetActive(true)
    return itemGO
end

function CycleInstancePopUIView:InitShopItem(itemGO,shopID,complex)
    local shopConfig = ShopManager:GetCfg(shopID)

    local value,typeName = ShopManager:GetValueByShopId(shopID)
    if tonumber(value) ~= nil then
        value = value * (complex or 1)
    end
    local showValue = "x" .. ShopManager:SetValueToShow(value, shopConfig)
    if shopConfig.type == 26 then
        showValue = "x" .. shopConfig.amount .. "min"
    end
    --if tonumber(value) == nil or typeName == "offline" or typeName == "income" then
    --    showValue = 1
    --end
    --numText.text = showValue
    for k,v in pairs(CycleInstancePopUIView.ShopTypeToItemNamePath) do
        if shopConfig.type == k then
            local valueParent = self:GetGo(itemGO,v)
            valueParent:SetActive(true)
            self:SetText(valueParent,"num_1",showValue)
            self:SetText(valueParent,"num_2",showValue)
            self:SetText(valueParent,"num_3",showValue)
        else
            local valueParent = self:GetGo(itemGO,v)
            valueParent:SetActive(false)
        end
    end

    local iconImage = self:GetComp(itemGO,"bg/icon","Image")
    self:SetSprite(iconImage,"UI_Shop",shopConfig.icon)
    
    
    --按钮
    if shopConfig.type == 26 then
        local button = self:GetComp(itemGO, "bg/icon", "Button")
        local uiPos = self:GetGo(itemGO, "UIPosition")
        self:SetButtonClickHandler(button, function()
            local gift_info = self:GetGo("gift_info")
            gift_info:SetActive(true)
            gift_info.transform.position = uiPos.transform.position
            self:SetText("gift_info/info/title/txt", GameTextLoader:ReadText(shopConfig.name))
            self:SetSprite(self:GetComp("gift_info/info/item/icon", "Image"), "UI_Shop", shopConfig.icon)
            self:SetText("gift_info/info/item/bg/num", BigNumber:FormatBigNumber(value))
        end)
        
        self:SetButtonClickHandler(self:GetComp("gift_info", "Button"), function()
            self:GetGo("gift_info"):SetActive(false)
        end)
    else

    end
end

function CycleInstancePopUIView:OnLeftButtonDown()
    if self.m_focusGiftIndex == 1 then
        self.m_focusGiftIndex = #self.m_packConfigs
    else
        self.m_focusGiftIndex = self.m_focusGiftIndex - 1
    end
    self.m_leftBtnGO:SetActive(self.m_focusGiftIndex ~= 1)
    self.m_giftPackScrollList:SetSnapIndex(self.m_focusGiftIndex - 1)
end

function CycleInstancePopUIView:OnRightButtonDown()
    if self.m_focusGiftIndex == #self.m_packConfigs then
        self.m_focusGiftIndex = 1
    else
        self.m_focusGiftIndex = self.m_focusGiftIndex + 1
    end
    self.m_rightBtnGO:SetActive(self.m_focusGiftIndex ~= #self.m_packConfigs)
    self.m_giftPackScrollList:SetSnapIndex(self.m_focusGiftIndex - 1)
end

---滑动停靠,更新index
function CycleInstancePopUIView:OnListSnap(index)

    index = index + 1

    self.m_focusGiftIndex = index

    self.m_leftBtnGO:SetActive(self.m_focusGiftIndex ~= 1)
    self.m_rightBtnGO:SetActive(self.m_focusGiftIndex ~= #self.m_packConfigs)

    for i = 1, #self.m_packConfigs do
        local onGO = self:GetGo(self.m_markItems[i],"on")
        onGO:SetActive(index == i)
    end
end

--function CycleInstancePopUIView:ShowGiftPop(shopID)
--    local curDispGo = self:GetGoOrNil("RootPanel/"..tostring(shopID))
--    if not curDispGo or not ShopManager:CheckBuyTimes(shopID) then
--        self:DestroyModeUIObject()
--        return
--    end
--    self.curShopID = shopID
--    curDispGo:SetActive(true)
--    local shopCfg = ConfigMgr.config_shop[shopID]
--    if not shopCfg then
--        self:DestroyModeUIObject()
--        return
--    end
--    if not shopCfg.iap_id then
--        self:DestroyModeUIObject()
--        return
--    end
--    InstanceDataManager:SetInstanceOpenGiftMaxID(shopID)
--    local price = Shop:GetShopItemPrice(shopCfg.id)
--    local trackPrice = Shop:GetShopItemPrice(shopCfg.id, true)
--    self:SetText("RootPanel/btn/goBtn/text", tostring(price))
--    local btn = self:GetComp("RootPanel/btn/goBtn", "Button")
--    btn.interactable = true
--    self:SetButtonClickHandler(btn, function()
--        btn.interactable = false
--        GameSDKs:TrackForeign("store", {operation_type = 1, product_id = GameTableDefine.IAP:GetPurchaseId(shopCfg.iap_id), pay_type = 1, cost_num = trackPrice})
--        Shop:CreateShopItemOrder(shopCfg.id)
--    end)
--    self:SetText("RootPanel/title/txt", GameTextLoader:ReadText(shopCfg.name))
--end

function CycleInstancePopUIView:OnExit()
    ShopManager:refreshBuySuccess()
    ShopManager:refreshBuyFail()
    for k, v in pairs(self.timers) do
        GameTimer:StopTimer(v)
    end
    self.super:OnExit(self)
end

return CycleInstancePopUIView