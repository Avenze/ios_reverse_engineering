---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/3 11:16
---

---@class CycleToyPopUI
local CycleToyPopUI = GameTableDefine.CycleToyPopUI
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

local GameUIManager = GameTableDefine.GameUIManager
local CycleInstanceClassDefine = require("GamePlay.CycleInstance.CycleInstanceDefine")

CycleToyPopUI.EventType = {
    buyRoom = 1,
    needHeroExp = 2,
    needSkillBook = 3,
}

local IgnoreList = {
    ENUM_GAME_UITYPE.INTRODUCE_UI,
    ENUM_GAME_UITYPE.BENAME_UI,
    ENUM_GAME_UITYPE.TALK_UI,
    ENUM_GAME_UITYPE.OFFLINE_REWARD_UI,
    ENUM_GAME_UITYPE.INSTANCE_OFFLINE_REWARD_UI,
    ENUM_GAME_UITYPE.FLY_ICONS_UI,
    ENUM_GAME_UITYPE.LAUNCH,
    ENUM_GAME_UITYPE.AD_TICKET_CHOOSE_UI,
    ENUM_GAME_UITYPE.CHOOSE_UI,
    ENUM_GAME_UITYPE.CUT_SCREEN_UI,
    ENUM_GAME_UITYPE.BOARD_UI,
    ENUM_GAME_UITYPE.TIPS_UI,
    ENUM_GAME_UITYPE.CYCLE_TOY_CUT_SCREEN_UI,
}

function CycleToyPopUI:GetView()
    self.m_view = GameUIManager:SafeOpenUI(ENUM_GAME_UITYPE.CYCLE_TOY_POP_UI, self.m_view, require("GamePlay.CycleInstance.Toy.UI.CycleToyPopUIView"), self, self.CloseView)
    return self.m_view
end

function CycleToyPopUI:CloseView()
    GameUIManager:CloseUI(ENUM_GAME_UITYPE.CYCLE_TOY_POP_UI)
    self.m_view = nil
    collectgarbage("collect")
end

function CycleToyPopUI:OpenView(initID)
    self.packList = CycleInstanceDataManager:GetCurrentModel():GetActivePackList()
    if not self.packList or Tools:GetTableSize(self.packList) < 1 then
        return
    end
    if initID then
        CycleInstanceDataManager:GetCurrentModel():SetGiftOpenTime(initID)
    end
    self:GetView():Invoke("Init", initID)
end

---1-房间解锁触发
---2-升级经验不足
---3-升级技能书不足
---4-每日首次进入触发
---5-首次房间操作触发
---6-首次升级蓝图并退出卖场UI时触发
---7-生产设施等级达标时触发
function CycleToyPopUI:PackTrigger(eventType, param)
    for k, v in pairs(CycleInstanceDataManager:GetCurrentModel().giftsConfig) do
        if v.key[1] == eventType then
            if not v.key[2] then
                if eventType == 4 then
                    local lastOpenTime = CycleInstanceDataManager:GetCurrentModel():GetGiftOpenTime(v.id)
                    local now = GameTimeManager:GetCurrentServerTime(true)
                    local curDay = GameTimeManager:GetTimeLengthDate(now).d
                    if not lastOpenTime or (lastOpenTime and GameTimeManager:GetTimeLengthDate(lastOpenTime).d < curDay) then
                        self:AddPackData(v)
                    end
                else
                    self:AddPackData(v)
                end
                break
            elseif v.key[2] == param then
                self:AddPackData(v)
                break
            end
        end
    end
end

function CycleToyPopUI:AddPackData(giftsCfg)
    local refresh = false
    if CycleInstanceDataManager:GetCurrentModel():CanAddLimitTimePack(giftsCfg.id) then
        CycleInstanceDataManager:GetCurrentModel():AddLimitTimePack(giftsCfg.id)
        CycleInstanceDataManager:GetCurrentModel():SetLimitTimePackCD(giftsCfg.id)
        self.willShow = giftsCfg.id
        refresh = true
    end
    if not self.packList then
        self.packList = CycleInstanceDataManager:GetCurrentModel():GetActivePackList() or {}
    end
    if refresh then
        self:StartTimer()
    end
end

function CycleToyPopUI:StartTimer()
    if not self.Timer then
        self.Timer = GameTimer:CreateNewTimer(1, function()
            if GameUIManager:GetEnableTouch() and GameUIManager:UIIsOnTop(ENUM_GAME_UITYPE.CYCLE_TOY_MAIN_VIEW_UI, true, IgnoreList) then
                local isCompletedGuide = CycleInstanceDataManager:GetCurrentModel():IsGuideCompleted(CycleInstanceClassDefine.GuideDefine.Toy.UnlockMilestone)
                if isCompletedGuide then
                    if self.packList and next(self.packList) then
                        self:OpenView(self.willShow)
                        GameTimer:StopTimer(self.Timer)
                        self.Timer = nil
                    end
                end
            end
        end, true, false)
    end
end


