---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/11/8 14:50
---

---@class CycleNightClubBluePrintManager
local CycleNightClubBluePrintManager = GameTableDefine.CycleNightClubBluePrintManager
local ConfigMgr = GameTableDefine.ConfigMgr
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

local BluePrintSaveDataPath = "BluePrint"
local PRODUCT_MODEL_PATH = "Assets/Res/Prefabs/NightClub_factory/nightClub/"
local EventDispatcher = EventDispatcher

CycleNightClubBluePrintManager.BluePrintUpgradeResult = {
    Success = 1,
    ResNotEnough = 2,
    LevelMax = 3,
    CannotProductionConfig = 4
}

CycleNightClubBluePrintManager.PRODUCTION_LEVEL_MAX = 5

function CycleNightClubBluePrintManager:ctor()
    self.m_isInitialized = false
    self.m_currentModel = nil ---@type CycleNightClubModel
    --存档数据
    self.m_bluePrintData = nil ---@type BluePrintData

    --配置表
    self.m_resConfigList = nil ---@type ConfigBluePrintRes[]
    self.m_resConfigDic = nil ---@type table<number,ConfigBluePrintRes> -材料ID的升级材料配置
    self.m_bpConfigList = nil ---@type table<number,ConfigBluePrint> -玩具ID的蓝图配置,index从1开始 已排序
    self.m_productConfigs = nil
    self.m_productionCount = 0
    self.m_theoryResCountDic = {}
    self.m_revertToBaseResCount = 0
    self.m_ratioToBaseDic = {}
end

---副本重开时，重置数据
function CycleNightClubBluePrintManager:Reset()
    self.m_isInitialized = false
end

function CycleNightClubBluePrintManager:InitSaveData()
    local currentModel = self.m_currentModel
    local saveData = currentModel.saveData[BluePrintSaveDataPath] ---@type BluePrintData
    if not saveData then
        saveData = {}
        currentModel.saveData[BluePrintSaveDataPath] = saveData
    end

    --ResData
    local resDatas = saveData.resItems
    if not resDatas then
        resDatas = {}
        --设置蓝图初始资金, 夜店不给，slot三级再给
        --local firstId = currentModel.config_cy_blueprint_res[1].id
        --resDatas[tostring(firstId)] = currentModel.config_global.cycle_instance_cash[4]
        saveData.resItems = resDatas
    end
    --NightClubData
    local productionDatas = saveData.productionDatas
    if not productionDatas then
        productionDatas = {}
        saveData.productionDatas = productionDatas
    end

    self.m_bluePrintData = saveData
end

---设置蓝图初始资金, 夜店slot三级给
function CycleNightClubBluePrintManager:InitBPOrigin()
    local firstId = self.m_currentModel.config_cy_blueprint_res[1].id
    self.m_bluePrintData.resItems[tostring(firstId)] = self.m_currentModel.config_global.cycle_instance_cash[4]
end

function CycleNightClubBluePrintManager:InitBPConfigs()
    local currentModel = self.m_currentModel

    self.m_bpConfigList = currentModel.config_cy_instance_blueprint
    self.m_productConfigs = {}
    for k,v in pairs(self.m_bpConfigList) do
        table.insert(self.m_productConfigs,currentModel.resourceConfig[k])
    end
    table.sort(self.m_productConfigs,function(a, b)
        return a.id < b.id
    end)
    self.m_productionCount = #self.m_productConfigs

    self.m_resConfigList = currentModel.config_cy_blueprint_res
    self.m_resConfigDic = {}
    for i,v in ipairs(self.m_resConfigList) do
        self.m_resConfigDic[v.id] = v
    end
end

function CycleNightClubBluePrintManager:Init()
    if self.m_isInitialized then
        return
    end
    self:ctor()
    self.m_isInitialized = true

    self.m_currentModel = CycleInstanceDataManager:GetCurrentModel()
    self:InitSaveData()
    self:InitBPConfigs()
    self:RefreshResTheoryCountCache()
end

---获取某类型蓝图升级材料数量
function CycleNightClubBluePrintManager:GetUpgradeResCount(bpResID)
    self:Init()
    local kID = tostring(bpResID)
    return self.m_bluePrintData.resItems[kID] or 0
end

---修改某类型蓝图升级材料数量
function CycleNightClubBluePrintManager:ChangeUpgradeResCount(bpResID,changeCount)
    self:Init()
    if not bpResID then
        bpResID = self:GetBaseResID()
    end
    local kID = tostring(bpResID)
    local count = self.m_bluePrintData.resItems[kID] or 0
    count = math.floor(math.max(0,count+changeCount))
    self.m_bluePrintData.resItems[kID] = count
    self:RefreshResTheoryCountCache()
end

---获取某产品升级材料类型和数量
function CycleNightClubBluePrintManager:GetProductionUpgradeResCount(productID)
    self:Init()
    local productionData = self:GetProductionDataByProductID(productID)
    local level = productionData.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level + 1)
    if bpConfig then
        local bpResID = bpConfig.cost_type
        local needCount = bpConfig.cost
        return bpResID,needCount
    else
        return nil,nil
    end
end

---消耗蓝图升级材料数量
function CycleNightClubBluePrintManager:CostUpgradeResCount(bpResID,needCount)
    self:Init()
    local kID = tostring(bpResID)
    local resCount = self.m_bluePrintData.resItems[kID]
    if not resCount then
        self.m_bluePrintData.resItems[kID] = 0
        resCount = 0
    end
    if needCount <= resCount then
        self.m_bluePrintData.resItems[kID] = resCount - needCount
        self:RefreshResTheoryCountCache()
        return true
    else
        return false
    end
end

---获取某产品的存档数据
function CycleNightClubBluePrintManager:GetProductionDataByProductID(productID)
    assert(productID and type(productID) == "number" or false,"productID必须为number")
    self:Init()
    local kID = tostring(productID)
    local productionData = self.m_bluePrintData.productionDatas[kID]
    if not productionData then
        productionData = {starLevel = 0}
        self.m_bluePrintData.productionDatas[kID] = productionData
    end
    return productionData
end

---获取升级材料的所有配置
function CycleNightClubBluePrintManager:GetResConfigs()
    self:Init()
    return self.m_resConfigList
end

---通过升级材料的ID获取升级材料的配置
---@return ConfigBluePrintRes
function CycleNightClubBluePrintManager:GetResConfigsByID(resID)
    self:Init()
    return self.m_resConfigDic[resID]
end

---获取对应产品的配置信息
function CycleNightClubBluePrintManager:GetProductionConfigs()
    self:Init()
    return self.m_productConfigs
end

---获取对应产品的配置信息
function CycleNightClubBluePrintManager:GetProductionConfigByProductionID(productID)
    self:Init()
    return self.m_currentModel.resourceConfig[productID]
end

---获取所有能升级的产品的数量
function CycleNightClubBluePrintManager:GetNightClubCount()
    self:Init()
    return self.m_productionCount
end

---@return ConfigBluePrint
function CycleNightClubBluePrintManager:GetBPConfigByProductionLevel(productID,level)
    self:Init()
    local bpConfigs = self.m_bpConfigList[productID]
    if bpConfigs then
        return bpConfigs[level]
    else
        return nil
    end
end

---尝试升级产品，消耗对应升级道具
function CycleNightClubBluePrintManager:TryUpgradeProduction(productID)
    self:Init()
    local productionData = self:GetProductionDataByProductID(productID)
    local level = productionData.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level + 1)
    if bpConfig then
        local bpResID = bpConfig.cost_type
        local needCount = bpConfig.cost
        if self:CostUpgradeResCount(bpResID,needCount) then
            productionData.starLevel = level + 1
            LocalDataManager:WriteToFile()
            EventDispatcher:TriggerEvent(GameEventDefine.OnCycleProductionModelChange,productID)
            local baseResCount = self:ConvertToBaseBpResCount(bpResID,needCount)
            --升级消耗埋点
            GameSDKs:TrackForeign("cy_bp_res", { source = "升级"..productID.."玩具", num = tonumber(baseResCount), type = 2 })
            --升级后全等级信息
            local bpDatas = {target = self:GetProductIndex(productID)}
            local productCount = self.m_productionCount
            for i = 1, productCount do
                local curProductionData = self:GetProductionDataByProductID(self.m_productConfigs[i].id)
                local curProductLevel = curProductionData.starLevel or 0
                bpDatas[i.."_level"] = curProductLevel
            end
            GameSDKs:TrackForeign("cy_bp_up", bpDatas)

            return CycleNightClubBluePrintManager.BluePrintUpgradeResult.Success
        else
            return CycleNightClubBluePrintManager.BluePrintUpgradeResult.ResNotEnough
        end
    else
        return CycleNightClubBluePrintManager.BluePrintUpgradeResult.LevelMax
    end
end

---是否有足够的材料升级产品,如果没有下一级那也返回false
---@param containsCombine boolean 是否包括合成
function CycleNightClubBluePrintManager:CanUpgradeProduction(productID,containsCombine)
    self:Init()

    local productionData = self:GetProductionDataByProductID(productID)
    local level = productionData.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level + 1)
    if bpConfig then
        local bpResID = bpConfig.cost_type
        local needCount = bpConfig.cost
        local haveCount = containsCombine and self:GetResTheoryCount(bpResID) or self:GetUpgradeResCount(bpResID)
        if haveCount>=needCount then
            return true
        else
            return false
        end
    else
        return false
    end
end

---尝试合成升级材料
function CycleNightClubBluePrintManager:TryCombineUpgradeRes(resID)
    self:Init()
    local resConfig = self:GetResConfigsByID(resID)
    local materialResID = resConfig.cost_id
    local needCount = resConfig.cost_num
    local haveCount = self:GetUpgradeResCount(materialResID)
    if haveCount>=needCount then
        self:ChangeUpgradeResCount(materialResID,-needCount)
        self:ChangeUpgradeResCount(resID,1)
        return true
    else
        return false
    end
end

---是否能合成升级材料
function CycleNightClubBluePrintManager:CanCombineUpgradeRes(resID)
    self:Init()
    local resConfig = self:GetResConfigsByID(resID)
    local materialResID = resConfig.cost_id
    local needCount = resConfig.cost_num
    local haveCount = self:GetUpgradeResCount(materialResID)
    if haveCount>=needCount then
        return true
    else
        return false
    end
end

---获取此副本最低级的升级材料的ID
function CycleNightClubBluePrintManager:GetBaseResID()
    self:Init()
    if self.m_resConfigList then
        return self.m_resConfigList[1].id
    else
        return nil
    end
end

---获取某个产品的BUFF值 money_buff,mile_buff，无BUFF返回 1,1
---@return number,number
function CycleNightClubBluePrintManager:GetProductBuffValue(productID, lv)
    assert(productID and type(productID) == "number" or false,"productID必须为number")
    self:Init()
    local data = self:GetProductionDataByProductID(productID)
    local level = lv and lv or (data.starLevel or 0)
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level)
    if bpConfig then
        return bpConfig.money_buff,bpConfig.mile_buff
    else
        return 1, 1
    end
end

---获取某个产品下一级的config
---@return ConfigBluePrint
function CycleNightClubBluePrintManager:GetBlueprintNextLevelConfig(productID)
    assert(productID and type(productID) == "number" or false,"productID必须为number")
    self:Init()
    local data = self:GetProductionDataByProductID(productID)
    local level = data.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level+1)
    if bpConfig then
        return bpConfig
    else
        return nil
    end
end

---获取某个产品当前的低模 路径
---@return string
function CycleNightClubBluePrintManager:GetProductLowModelAddress(productID)
    assert(productID and type(productID) == "number" or false,"productID必须为number")
    self:Init()
    local data = self:GetProductionDataByProductID(productID)
    local level = data.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productID,level)
    if bpConfig then
        return PRODUCT_MODEL_PATH..bpConfig.lowModel..".prefab"
    else
        return nil
    end
end

---获取上次播放解锁动画的产品ID
function CycleNightClubBluePrintManager:GetLastUnlockProductID()
    self:Init()
    return self.m_bluePrintData.lastUnlockedProductID
end

---设置上次播放解锁动画的产品ID
function CycleNightClubBluePrintManager:SetLastUnlockProductID(productionID)
    self:Init()
    self.m_bluePrintData.lastUnlockedProductID = productionID
    LocalDataManager:WriteToFile()
end

---产品是否解锁
function CycleNightClubBluePrintManager:IsProductUnlock(productID)
    self:Init()
    local bluePrintConfigs = self.m_bpConfigList[productID] ---@type ConfigBluePrint[]
    local baseBpConfig = bluePrintConfigs[1]
    local roomID = baseBpConfig.room_id

    local isUnlocked = self.m_currentModel:RoomIsUnlock(roomID)
    return isUnlocked
end

---是否有足够的材料升级任意产品,如果没有下一级那也返回false
function CycleNightClubBluePrintManager:CanUpgradeAnyProduction()
    self:Init()
    local bpConfigs = self.m_bpConfigList
    for productID,v in pairs(bpConfigs) do
        local isUnlocked = self:IsProductUnlock(productID)
        if isUnlocked then
            local canUpgrade = self:CanUpgradeProduction(productID,true)
            if canUpgrade then
                return true
            end
        end
    end

    return false
end

---有没有材料能合成到更高级
function CycleNightClubBluePrintManager:CanCombineAnyRes()
    self:Init()
    local resCount = #self.m_resConfigList
    for i=2,resCount do
        if self:CanCombineUpgradeRes(self.m_resConfigList[i].id) then
            return true
        end
    end

    return false
end

---获取产品当前等级对应图标
function CycleNightClubBluePrintManager:GetCurrentProductionIcon(productionID)
    local data = self:GetProductionDataByProductID(productionID)
    local level = data.starLevel or 0
    local bpConfig = self:GetBPConfigByProductionLevel(productionID,level)
    return bpConfig.icon,bpConfig.icon_head
end

function CycleNightClubBluePrintManager:FindLowLevelBpResConfig(bpResID)

end

---换算成基础数量
function CycleNightClubBluePrintManager:ConvertToBaseBpResCount(bpResID,count)
    local ratio = self:GetRatioToBase(bpResID)
    return ratio * count
end

function CycleNightClubBluePrintManager:GetProductIndex(productID)
    local productCount = self.m_productionCount
    for i = 1, productCount do
        if self.m_productConfigs[i].id == productID then
            return i
        end
    end
    return -1
end

function CycleNightClubBluePrintManager:GetRatioToBase(bpResID)
    local ratioToBase = self.m_ratioToBaseDic[bpResID]
    if ratioToBase then
        return ratioToBase
    end
    local ratio = 1
    local bpResConfig = self.m_resConfigDic[bpResID]
    local costResID = bpResConfig.cost_id
    while(costResID and costResID ~= 0) do
        ratio = ratio * bpResConfig.cost_num
        bpResConfig = self.m_resConfigDic[costResID]
        if bpResConfig then
            costResID = bpResConfig.cost_id
        else
            break
        end
    end
    self.m_ratioToBaseDic[bpResID] = ratio
    return ratio
end

---获取折算后的材料数量
function CycleNightClubBluePrintManager:GetResCountRevertToBase()
    return self.m_revertToBaseResCount or 0
end

---获取理论上的材料数量，包括合成
function CycleNightClubBluePrintManager:GetResTheoryCount(resID)
    resID = resID or self:GetBaseResID()
    return self.m_theoryResCountDic[resID] or 0
end

---刷新 理论上可以拥有的材料数量，包括合成
function CycleNightClubBluePrintManager:RefreshResTheoryCountCache()
    self.m_revertToBaseResCount = 0
    local resConfigs = self.m_resConfigList
    for i,v in ipairs(resConfigs) do
        local bpResID = resConfigs[i].id
        local curResCount = self:GetUpgradeResCount(bpResID)
        local bpResConfig = self.m_resConfigDic[bpResID]
        local curRatio = self:GetRatioToBase(bpResID)
        local baseCount = curResCount * curRatio
        self.m_revertToBaseResCount = self.m_revertToBaseResCount + baseCount
        local costResID = bpResConfig.cost_id

        while(costResID and costResID ~= 0) do
            local ratio = self:GetRatioToBase(costResID)
            local resCount = self:GetUpgradeResCount(costResID)
            baseCount = baseCount + resCount * ratio

            local costResConfig = self.m_resConfigDic[costResID]
            if costResConfig then
                costResID = costResConfig.cost_id
            else
                break
            end
        end

        self.m_theoryResCountDic[bpResID] = math.floor( baseCount/curRatio)
    end
end

return CycleNightClubBluePrintManager