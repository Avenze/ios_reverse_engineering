---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Microsoft-GXY.
--- DateTime: 2024/8/15 18:16
---
---@class CycleNightClubAIBlackBoard
local CycleNightClubAIBlackBoard = GameTableDefine.CycleNightClubAIBlackBoard
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local BaseScene = require("Framework.Scene.BaseScene")
local UnityHelper = CS.Common.Utils.UnityHelper ---@type Common.Utils.UnityHelper
local Vector3 = CS.UnityEngine.Vector3 ---@type UnityEngine.Vector3
local AnimationUtil = CS.Common.Utils.AnimationUtil
local PERSON_ACTION = require("CodeRefactoring.Actor.PersonActionDefine")
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager
local CycleNightClubModel = nil ---@type CycleNightClubModel
local ActorManager = GameTableDefine.ActorManager

local queueUpQueue = nil ---@type CycleNightClubClient[]
local queueUpPathTable = nil
---排队距离间隔
local queueInterval = 5
local inClubClientNum = 0
local outClubClientNum = 0
local playPos = {}

function CycleNightClubAIBlackBoard:Init(model, inPos, outPos, gateData, playData, strollPos, shelf, kidPos)
    CycleNightClubModel = model
    queueUpQueue = {}
    self.inPaymentState = false
    self.inPos = inPos
    self.outPos = outPos
    self.gateData = gateData
    self.m_canUsePlayPosList = {}

    inClubClientNum = 0
    outClubClientNum = 0

    -- 初始化playPos表
    playPos = playData

    self.m_queueTimer = GameTimer:CreateNewTimer(1,function()
        self:CheckMoveQueue()
    end,true,false)
end

---检查队列是否应该往前
function CycleNightClubAIBlackBoard:CheckMoveQueue()
    local actorCount = #queueUpQueue
    if actorCount > 0 then
        if not CycleNightClubAIBlackBoard:CheckHaveSparePlayPos() then
            return
        end
        if CycleNightClubAIBlackBoard.inPaymentState then
            return
        end
        if not CycleNightClubAIBlackBoard:CheckCanEnter() then
            return
        end
        --第一个去付款
        local firstActor = queueUpQueue[1]
        local playData = CycleNightClubAIBlackBoard:GetSparePlayPos(firstActor)
        firstActor.m_stateMachine:ChangeState(ActorDefine.CycleInstanceState.CycleNightClubClientPay,playData)
        self:GetOutInstanceQueue(firstActor)
        actorCount = actorCount-1
        --其他人往前
        if actorCount > 0 then
            for i = 1, actorCount do
                if queueUpQueue[i].m_stateMachine.m_curState.MoveToQueuePos then
                    queueUpQueue[i].m_stateMachine.m_curState:MoveToQueuePos()
                end
            end
        end
    end
end

function CycleNightClubAIBlackBoard:GetRandomInPos()
    return self.inPos[math.random(1, #self.inPos)]
end

function CycleNightClubAIBlackBoard:GetRandomOutPos()
    --修完4号房间才能走2号出口
    if not CycleNightClubModel:RoomIsUnlock(1047) then
        return self.outPos[1]
    end

    return self.outPos[math.random(1, #self.outPos)]
end

function CycleNightClubAIBlackBoard:PrintClientCount()
    local curNum = inClubClientNum
    local limitNum = CycleNightClubModel:GetClientLimit()
    printf("当前在玩的顾客数为"..curNum..",可容纳顾客数为"..limitNum)
end

function CycleNightClubAIBlackBoard:CheckCanEnter()
    local curNum = inClubClientNum or #ActorManager:GetActorByType("CycleNightClubClient")
    if curNum < CycleNightClubModel:GetClientLimit() then
        return true
    else
        return false
    end
end

---获取某个Actor在队伍中的排队点的Position
---@return UnityEngine.Vector3
function CycleNightClubAIBlackBoard:GetActorQueuePos(actor)
    local actorCount = #queueUpQueue
    local queuePathCount = #queueUpPathTable
    for i = 1, actorCount do
        if actor == queueUpQueue[i] then
            return queueUpPathTable[math.min(i,queuePathCount)]
        end
    end
    return queueUpPathTable[queuePathCount]
end

---获取排队人数
function CycleNightClubAIBlackBoard:GetQueueActorCount()
    return #queueUpQueue
end

--[[
    @desc: 添加演员到排队队列
    author:{author}
    time:2023-08-25 16:37:07
    --@target:目的地(roomID)
	--@start:排队起点
	--@actor: 演员
    @return:
]]
function CycleNightClubAIBlackBoard:AddInstanceQueue(actor)
    
    local queue = queueUpQueue
    queue[#queue + 1] = actor

    --获取路径
    if not queueUpPathTable then -- 将固定路径存起来, 不需要重复生成
        local start = CycleNightClubAIBlackBoard.gateData.queuePoint
        local endPoint = CycleNightClubAIBlackBoard.gateData.queueStart
        local vectorPath = UnityHelper.SearchPathByNavMesh(start.transform.position, endPoint.transform.position)

        queueUpPathTable = {}
        local lastPos = vectorPath[0]
        for i = 1, vectorPath.Length - 1 do
            local dir = vectorPath[i] - lastPos
            local dis = dir.magnitude
            if dis > queueInterval then
                --插入N个距离大于[queueInterval]的点.
                dir = dir.normalized
                for j = 1, dis, queueInterval do
                    lastPos = lastPos + dir * queueInterval
                    table.insert(queueUpPathTable, lastPos)
                end
            end
        end
    end

    return #queue, queueUpPathTable
end

--[[
    @desc: 将演员从排队队列移除
    author:{author}
    time:2023-08-25 16:37:21
    --@target:
	--@start:
	--@actor:
    @return:
]]
function CycleNightClubAIBlackBoard:GetOutInstanceQueue(actor)
    local queue = queueUpQueue
    for i = 1, #queue do
        if actor == queue[i] then
            table.remove(queue, i)
            break
        end
    end
end

function CycleNightClubAIBlackBoard:ModifyInClubClientNum(num)
    inClubClientNum = inClubClientNum + num
end

function CycleNightClubAIBlackBoard:ModifyOutClubClientNum(num)
    outClubClientNum = outClubClientNum + num
end
---获取夜店外的顾客数量, 只计算来夜店但还没进去的, 走了的不算
function CycleNightClubAIBlackBoard:GetOutClubClientNum(num)
    return outClubClientNum
end

function CycleNightClubAIBlackBoard:PrintTotalPlayPos()
    local playCount = 0
    for roomIDStr, posList in pairs(playPos) do
        local roomSaveData = CycleNightClubModel:GetRoomDataByID(tonumber(roomIDStr))
        if roomSaveData.state == 2 then
            for i = 1, #posList do
                playCount = playCount + 1
            end
        end
    end
    printf("总可玩位置 = "..playCount)
end

function CycleNightClubAIBlackBoard:CheckHaveSparePlayPos()
    for roomIDStr, posList in pairs(playPos) do
        local roomSaveData = CycleNightClubModel:GetRoomDataByID(tonumber(roomIDStr))
        if roomSaveData.state == 2 then
            for i = 1, #posList do
                local playPosData = posList[i]
                if not playPosData.actor then
                    return true
                end
            end
        end
    end
    return false
end

---获取可用play点
function CycleNightClubAIBlackBoard:GetSparePlayPos(actor)
    local canUsr = self.m_canUsePlayPosList
    local canUseCount = 0
    for roomIDStr, posList in pairs(playPos) do
        local roomSaveData = CycleNightClubModel:GetRoomDataByID(tonumber(roomIDStr))
        if roomSaveData.state == 2 then
            for i = 1, #posList do
                local playPosData = posList[i]
                if not playPosData.actor then
                    canUseCount = canUseCount + 1
                    canUsr[canUseCount] = playPosData
                end
            end
        end
    end
    if canUseCount == 0 then
        return nil
    end
    local random = canUsr[math.random(1,canUseCount)]
    random.actor = actor
    return random
end

function CycleNightClubAIBlackBoard:SetPlayPosActor(playData, actor)
    if not playData then
        error("将要设置的PlayData位置信息为空")
    else
        playData.actor = actor
    end
end

function CycleNightClubAIBlackBoard:OnExit()
    queueUpQueue = nil
    playPos = nil
    if self.m_queueTimer then
        GameTimer:StopTimer(self.m_queueTimer)
        self.m_queueTimer = nil
    end
end

return CycleNightClubAIBlackBoard
