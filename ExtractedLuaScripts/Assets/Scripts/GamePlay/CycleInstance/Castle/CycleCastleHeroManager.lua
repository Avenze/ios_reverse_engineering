---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/6/26 19:42
---

---@class CycleCastleHeroManager
local CycleCastleHeroManager = GameTableDefine.CycleCastleHeroManager
--local HERO_DATA_KEY = "CycleIslandHero"
local ConfigMgr = GameTableDefine.ConfigMgr
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

---@type HeroData
---@field level number
---@field heroID string
local HeroData = {}

---@type ConfigCyInstanceHero
---@field buff number
---@field half_icon string
---@field icon string
---@field id number
---@field level number
---@field name string
---@field res string
---@field room_id number
local ConfigCyInstanceHero = {}

---@type HeroUpgradeResult
CycleCastleHeroManager.HeroUpgradeResult = {
    Success = 1,
    ResNotEnough = 2,
    LevelMax = 3,
    CannotFindHeroConfig = 4
}

function CycleCastleHeroManager:ctor()
    self.m_isInitialized = false
    self.m_heroDatas = nil ---@type HeroData
    self.m_heroConfigs = nil ---@type table<number,ConfigCyInstanceHero[]>
end

---副本重开时，重置数据
function CycleCastleHeroManager:Reset()
    self.m_isInitialized = false
end

function CycleCastleHeroManager:Init()
    if self.m_isInitialized then
        return
    end
    self.m_isInitialized = true
    self.m_heroDatas = CycleInstanceDataManager:GetCurrentModel():GetHeroSaveData()
    self.m_heroConfigs = ConfigMgr.config_cy_instance_hero[CycleInstanceDataManager:GetCurrentModel().instance_id]
end

---根据英雄ID和等级 返回配置
---@return ConfigCyInstanceHero
function CycleCastleHeroManager:GetHeroConfig(heroID,level)
    self:Init()
    local heroConfigs = self.m_heroConfigs[heroID]
    if heroConfigs then
        local result = heroConfigs[level]
        if result then
            return result
        end
    end
    printf("找不到英雄配置 heroID:"..heroID.." ,Level:"..level)
    return nil
end

---根据英雄ID 获取buff值
---@return ConfigCyInstanceHero
function CycleCastleHeroManager:GetHeroCurrentBuff(heroID)
    local heroData = self:GetHeroData(heroID)
    local level = heroData.level
    local heroConfig = self:GetHeroConfig(heroID,level)
    return heroConfig.buff
end

---返回对应英雄的存档数据
---@return HeroData
function CycleCastleHeroManager:GetHeroData(heroID)
    self:Init()
    local heroData = self.m_heroDatas[heroID]
    if not heroData then
        heroData = {}
        heroData.level = 1
        heroData.heroID = heroID
        self.m_heroDatas[heroID] = heroData
    end
    return heroData
end

---给英雄升级,并消耗材料
---@param heroID string
---@return boolean,ConfigCyInstanceHero
function CycleCastleHeroManager:UpgradeHero(heroID)
    self:Init()
    local heroData = self:GetHeroData(heroID)
    local curLevelConfig = self:GetHeroConfig(heroID,heroData.level)
    local nextLevelConfig = self:GetHeroConfig(heroID,heroData.level+1)
    ---上传英雄升级埋点，每5级上传一次
    if heroData.level % 5 == 0 then
        GameSDKs:TrackForeign("cy_hero_upgrade", { id = heroID, level = tonumber(heroData.level)})
    end
    if not curLevelConfig then
        error("没找到英雄配置")
        return CycleCastleHeroManager.HeroUpgradeResult.CannotFindHeroConfig,nil
    end
    --判断是否有下一级的配置
    if nextLevelConfig then
        local requireRes = curLevelConfig.res
        if CycleInstanceDataManager:GetCurrentModel():ChangeCurHeroExpRes("-"..requireRes) then
            heroData.level = heroData.level + 1
            return CycleCastleHeroManager.HeroUpgradeResult.Success,nextLevelConfig
        else
            return CycleCastleHeroManager.HeroUpgradeResult.ResNotEnough,nil
        end
    end
    return CycleCastleHeroManager.HeroUpgradeResult.LevelMax,nil
end

---判断是否满级
function CycleCastleHeroManager:IsMaxLevel(heroID)
    self:Init()
    local heroData = self:GetHeroData(heroID)
    local nextLevel = heroData.level + 1

    local heroConfigs = self.m_heroConfigs[heroID]
    if heroConfigs then
        local result = heroConfigs[nextLevel]
        if result then
            return false
        end
        return true
    end
    return true
end

---是否可以升级
---@return boolean
function CycleCastleHeroManager:CanUpgrade(heroID)
    self:Init()
    local heroData = self:GetHeroData(heroID)
    local curLevelConfig = self:GetHeroConfig(heroID,heroData.level)
    local nextLevelConfig = self:GetHeroConfig(heroID,heroData.level+1)

    if not curLevelConfig then
        error("没找到英雄配置")
        return false
    end
    --判断是否有下一级的配置
    if nextLevelConfig then
        local requireRes = tostring(curLevelConfig.res)
        local haveRes = CycleInstanceDataManager:GetCurrentModel():GetCurHeroExpRes()
        if BigNumber:CompareBig(haveRes,requireRes) or haveRes == requireRes then
            return true
        else
            return false
        end
    end
    return false
end

function CycleCastleHeroManager:GetHeroMaxLevel(id)
    return 300
end

return CycleCastleHeroManager