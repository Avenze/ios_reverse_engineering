---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/7/3 11:16
---

---@class CycleCastlePopUI
local CycleCastlePopUI = GameTableDefine.CycleCastlePopUI
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

local GameUIManager = GameTableDefine.GameUIManager

CycleCastlePopUI.EventType = {
    buyRoom = 1,
    needHeroExp = 2,
    needSkillBook = 3,
}

function CycleCastlePopUI:GetView()
    self.m_view = GameUIManager:SafeOpenUI(ENUM_GAME_UITYPE.CYCLE_CASTLE_POP_UI, self.m_view, require("GamePlay.CycleInstance.Castle.UI.CycleCastlePopUIView"), self, self.CloseView)
    return self.m_view
end

function CycleCastlePopUI:CloseView()
    GameUIManager:CloseUI(ENUM_GAME_UITYPE.CYCLE_CASTLE_POP_UI)
    self.m_view = nil
    collectgarbage("collect")
end

function CycleCastlePopUI:OpenView(initID)
    self.packList = CycleInstanceDataManager:GetCurrentModel():GetActivePackList()
    if not self.packList then
        return
    end
    if initID then
        CycleInstanceDataManager:GetCurrentModel():SetGiftOpenTime(initID)
    end
    self:GetView():Invoke("Init", initID)
end

function CycleCastlePopUI:PackTrigger(eventType, param)
    local guideID = CycleInstanceDataManager:GetCurrentModel():GetGuideID()
    if not guideID or (guideID and guideID < 14020) then
        return
    end
    for k, v in pairs(CycleInstanceDataManager:GetCurrentModel().giftsConfig) do
        if v.key[1] == eventType then
            if not v.key[2] then
                if eventType == 4 then
                    local lastOpenTime = CycleInstanceDataManager:GetCurrentModel():GetGiftOpenTime(v.id)
                    local now = GameTimeManager:GetCurrentServerTime(true)
                    local curDay = GameTimeManager:GetTimeLengthDate(now).d
                    if not lastOpenTime or (lastOpenTime and GameTimeManager:GetTimeLengthDate(lastOpenTime).d < curDay) then
                        self:AddPackData(v)
                    end
                else
                    self:AddPackData(v)
                end
                break
            elseif v.key[2] == param then
                self:AddPackData(v)
                break
            end
        end
    end
end

function CycleCastlePopUI:AddPackData(giftsCfg)
    local refresh = false
    if CycleInstanceDataManager:GetCurrentModel():CanAddLimitTimePack(giftsCfg.id) then
        CycleInstanceDataManager:GetCurrentModel():AddLimitTimePack(giftsCfg.id)
        CycleInstanceDataManager:GetCurrentModel():SetLimitTimePackCD(giftsCfg.id)
        self.willShow = giftsCfg.id
        refresh = true
    end
    if not self.packList then
        self.packList = CycleInstanceDataManager:GetCurrentModel():GetActivePackList() or {}
    end
    if refresh then
        self:StartTimer()
    end
end

function CycleCastlePopUI:StartTimer()
    if not self.Timer then
        self.Timer = GameTimer:CreateNewTimer(1, function()
            if GameUIManager:GetEnableTouch() and GameUIManager:UIIsOnTop(ENUM_GAME_UITYPE.CYCLE_CASTLE_MAIN_VIEW_UI, true, {
                ENUM_GAME_UITYPE.INTRODUCE_UI,
                ENUM_GAME_UITYPE.BENAME_UI,
                ENUM_GAME_UITYPE.TALK_UI,
                ENUM_GAME_UITYPE.OFFLINE_REWARD_UI,
                ENUM_GAME_UITYPE.INSTANCE_OFFLINE_REWARD_UI,
                ENUM_GAME_UITYPE.FLY_ICONS_UI,
                ENUM_GAME_UITYPE.LAUNCH,
                ENUM_GAME_UITYPE.AD_TICKET_CHOOSE_UI,
                ENUM_GAME_UITYPE.CHOOSE_UI,
                ENUM_GAME_UITYPE.CUT_SCREEN_UI,
                ENUM_GAME_UITYPE.BOARD_UI,
                ENUM_GAME_UITYPE.TIPS_UI,
                ENUM_GAME_UITYPE.CYCLE_CASTLE_CUT_SCREEN_UI,
            }) then
                if self.packList and next(self.packList) then
                    self:OpenView(self.willShow)
                    GameTimer:StopTimer(self.Timer)
                    self.Timer = nil
                end
            end
        end, true, false)
    end

end

function CycleCastlePopUI:RemoveTrigger(eventType, param)
    local curModel = CycleInstanceDataManager:GetCurrentModel()
    if not curModel or not curModel.giftsConfig then
        return
    end
    for k, v in pairs(CycleInstanceDataManager:GetCurrentModel().giftsConfig) do
        if v.remove[1] == eventType then
            if eventType == 1 then
                if v.remove[2] == param then
                    CycleInstanceDataManager:GetCurrentModel():RemoveGift(v.id)
                    break
                end
            else
                CycleInstanceDataManager:GetCurrentModel():RemoveGift(v.id)
                break
            end
        end
    end
    
end


