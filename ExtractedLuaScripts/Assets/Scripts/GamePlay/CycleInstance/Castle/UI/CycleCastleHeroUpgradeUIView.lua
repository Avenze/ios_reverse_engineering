---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/6/26 19:48
---

local Class = require("Framework.Lua.Class")
local UIBaseView = require("Framework.UI.View")
---@class CycleCastleHeroUpgradeUIView:UIBaseView
local CycleCastleHeroUpgradeUIView = Class("CycleCastleHeroUpgradeUIView",UIBaseView)
---@type SlotMachineUI
local CycleIslandHeroUpgradeUI = GameTableDefine.CycleIslandHeroUpgradeUI
local CycleIslandHeroManager = GameTableDefine.CycleIslandHeroManager
local Timer = GameTimer
local ChooseUI = GameTableDefine.ChooseUI
local UnityHelper = CS.Common.Utils.UnityHelper
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager

function CycleCastleHeroUpgradeUIView:ctor()
    self.m_heroNameText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_buffText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_heroLevelText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_heroLevelMaxText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_upgradeRequireResText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_upgradeHaveResText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_upgradeNotHaveResText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_titleHaveResText = nil ---@type UnityEngine.UI.TMPLocalization
    self.m_upgradeButton = nil ---@type UnityEngine.UI.Button
    self.m_exitButton = nil ---@type UnityEngine.UI.Button
    self.m_levelUpAnimator = nil ---@type UnityEngine.Animator
    self.m_productIcon = nil ---@type UnityEngine.UI.Image
    self.m_levelMaxMark = nil ---@type UnityEngine.UI.TMPLocalization


    self.m_heroConfig = nil ---@type ConfigCyInstanceHero
    self.m_heroData = nil ---@type HeroData
    self.m_heroID = 0 ---@type string
end

function CycleCastleHeroUpgradeUIView:OnEnter()

    self.m_titleHaveResText = self:GetComp(self.m_uiObj,"RootPanel/resShow/have","TMPLocalization")
    self.m_heroNameText = self:GetComp(self.m_uiObj,"RootPanel/heroText/name","TMPLocalization")
    self.m_buffText = self:GetComp(self.m_uiObj,"RootPanel/yield/numAndText/yieldNum","TMPLocalization")
    self.m_heroLevelText = self:GetComp(self.m_uiObj,"RootPanel/levelUp/bg/level/levelNum","TMPLocalization")
    self.m_heroLevelMaxText = self:GetComp(self.m_uiObj,"RootPanel/levelUp/bg/level/levelMax","TMPLocalization")
    self.m_upgradeRequireResText = self:GetComp(self.m_uiObj,"RootPanel/levelUp/levelUpButton/EXP/EXPNeed","TMPLocalization")
    self.m_upgradeHaveResText = self:GetComp(self.m_uiObj,"RootPanel/levelUp/levelUpButton/EXP/EXPNow","TMPLocalization")
    self.m_upgradeNotHaveResText = self:GetComp(self.m_uiObj,"RootPanel/levelUp/levelUpButton/EXP/EXPNowNot","TMPLocalization")
    self.m_heroIconImage = self:GetComp(self.m_uiObj,"RootPanel/heroIcon/heroIconImage","Image")
    self.m_productIcon = self:GetComp(self.m_uiObj,"RootPanel/yield/yieldIcon","Image")
    self.m_levelMaxMark = self:GetGo("RootPanel/levelUp/levelUpButton/btnMaxBg")

    --升级按钮
    self.m_upgradeButton = self:GetComp("RootPanel/levelUp/levelUpButton","ButtonEx")
    self:SetButtonClickHandler(self.m_upgradeButton,function()
        self:OnUpgradeButtonClick(true)
    end)
    self:SetButtonHoldHandler(self.m_upgradeButton,function()
        self:OnUpgradeButtonClick()
    end,nil,0.4, 0.2)
    -- if self.m_upgradeButton then
    --     UnityHelper.SetLongHandleClick(self.m_upgradeButton, function()
    --         -- print("longButton pressed down ==========")
    --         self:OnUpgradeButtonClick()
    --     end, nil, 0, 0)
    -- end
    --关闭按钮
    self.m_exitButton = self:GetComp("RootPanel/BtnList/quitBtn","Button")
    self:SetButtonClickHandler(self.m_exitButton,function()
        self:DestroyModeUIObject()
    end)
    self.m_levelUpAnimator = self:GetComp("RootPanel/levelUpShow","Animator")
    self.m_levelUpAnimator.gameObject:SetActive(false)

    --刷新显示英雄资源
    self.m_refreshTimer = Timer:CreateNewTimer(1,function()
        self:RefreshTitle()
    end,true)
end

---@param heroID
function CycleCastleHeroUpgradeUIView:Init(heroID)
    self:InitWithHeroID(heroID)
    self:RefreshTitle()
end

---Title
function CycleCastleHeroUpgradeUIView:RefreshTitle()
    local heroConfig = self.m_heroConfig
    local haveRes = CycleCastleModel:GetCurHeroExpRes()
    local haveResShow = CycleCastleModel:GetCurHeroExpResShow()
    local needRes = heroConfig.res
    if BigNumber:CompareBig(needRes,haveRes) then
        self.m_upgradeNotHaveResText.text = haveResShow

        self.m_upgradeHaveResText.gameObject:SetActive(false)
        self.m_upgradeNotHaveResText.gameObject:SetActive(true)
    else
        self.m_upgradeHaveResText.text = haveResShow

        self.m_upgradeHaveResText.gameObject:SetActive(true)
        self.m_upgradeNotHaveResText.gameObject:SetActive(false)
    end
    self.m_titleHaveResText.text = haveResShow
end

---HeroBaseInfo
function CycleCastleHeroUpgradeUIView:RefreshHeroBaseInfo()
    local heroConfig = self.m_heroConfig
    self.m_heroNameText.text = GameTextLoader:ReadText(heroConfig.name)
    self:SetSprite(self.m_heroIconImage,"UI_Common",heroConfig.icon)

    local roomConfig = CycleInstanceDataManager:GetCurrentModel().roomsConfig[heroConfig.room_id]
    local productionID = roomConfig.production
    local productConfig = CycleInstanceDataManager:GetCurrentModel().resourceConfig[productionID]
    self:SetSprite(self.m_productIcon,"UI_Common",productConfig.icon)
    self.m_heroLevelMaxText.text = tostring(CycleIslandHeroManager:GetHeroMaxLevel(heroConfig.id))
end

---HeroLevelInfo
function CycleCastleHeroUpgradeUIView:RefreshHeroLevelInfo()
    local heroConfig = self.m_heroConfig
    self.m_heroLevelText.text = tostring(self.m_heroData.level)
    self.m_upgradeRequireResText.text = BigNumber:FormatBigNumber(heroConfig.res)
    self.m_buffText.text = string.format("%.2f",heroConfig.buff)

    local isMax = CycleIslandHeroManager:IsMaxLevel(self.m_heroID)
    if isMax then
        self.m_upgradeButton.interactable = false
        self.m_levelMaxMark:SetActive(true)
    else
        self.m_upgradeButton.interactable = true
        self.m_levelMaxMark:SetActive(false)
    end
    --local heroEXP = CycleInstanceModel:GetCurHeroExpResShow() or 0
    --self.m_upgradeHaveResText.text = tostring(heroEXP)
    --self.m_upgradeHaveResText.text = tostring(heroEXP)
    --self.m_upgradeHaveResText.text = tostring("<cspace=-0.12em>OO</cspace>")
end

---用对应英雄ID初始化界面
function CycleCastleHeroUpgradeUIView:InitWithHeroID(heroID)
    self.m_heroID = heroID
    self.m_heroData = CycleIslandHeroManager:GetHeroData(heroID)
    self.m_heroConfig = CycleIslandHeroManager:GetHeroConfig(heroID,self.m_heroData.level)

    self:RefreshHeroBaseInfo()
    self:RefreshHeroLevelInfo()
end

---升级按钮
function CycleCastleHeroUpgradeUIView:OnUpgradeButtonClick(showResNotEnoughTip)
    local result,nextLevelConfig = CycleIslandHeroManager:UpgradeHero(self.m_heroID)
    if result == CycleIslandHeroManager.HeroUpgradeResult.Success then
        self.m_heroConfig = nextLevelConfig
        self:RefreshHeroLevelInfo()
        self:RefreshTitle()
        self.m_levelUpAnimator.gameObject:SetActive(true)
        self.m_levelUpAnimator:Play("Instance1_hero_levelUp",0,0.0)
    elseif result == CycleIslandHeroManager.HeroUpgradeResult.ResNotEnough then
        if showResNotEnoughTip then
            ChooseUI:Choose("TXT_INSTANCE_SHOP_TIP",function()
                GameTableDefine.CycleInstanceShopUI:GetView()
            end)
        end
        GameTableDefine.CycleInstancePopUI:PackTrigger(2)
    elseif result == CycleIslandHeroManager.HeroUpgradeResult.LevelMax then
        --满级
    end

    --self:SetButtonClickHandler(self.m_upgradeButton,function()
    --    self:OnUpgradeButtonClick(true)
    --end)
    --self.m_upgradeButton:SetButtonHoldHandler(self.m_upgradeButton,function()
    --    self:OnUpgradeButtonClick()
    --end,0.4, 0.2)
end

function CycleCastleHeroUpgradeUIView:OnExit()
    if self.m_refreshTimer then
        Timer:StopTimer(self.m_refreshTimer)
        self.m_refreshTimer = nil
    end
    GameTableDefine.CycleIslandBuildingUI:RefreshView()
end


return CycleCastleHeroUpgradeUIView