---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2024/8/5 14:10
---

local Class = require("Framework.Lua.Class")
---@class CycleInstanceRoomBase
local CycleInstanceRoomBase = Class("CycleInstanceRoomBase")

local UIView = require("Framework.UI.View")
local AnimationUtil = CS.Common.Utils.AnimationUtil
local FloatUI = GameTableDefine.FloatUI
local GameResMgr = require("GameUtils.GameResManager")
local GameObject = CS.UnityEngine.GameObject
local CycleInstanceDefine = require("GamePlay.CycleInstance.CycleInstanceDefine")

function CycleInstanceRoomBase:ctor()
    self.GORoot = nil --房间GameObject根节点
    self.roomGO = {}    --GameObject表
    self.roomID = 0
    self.curRoomType = 0    --当前房间类型
    self.roomData = nil     ---@type CycleInstanceRoomSaveData 房间存档数据
    self.roomConfig = nil  --房间配置数据
    self.furConfig = nil   --家具配置数据
    self.furLevelConfig = nil  --家具等级配置数据
    self.workers = {}    --员工初始化标记列表
    self.CreateFurEndCallback = nil  --创建家具结束回调
    self.furFindIndex = {} --只是作为查找场景物体的临时变量使用
    self.path = nil -- 上次的加载路径
    ---是否缺少原料
    self.m_isLackOfMaterial = false

    self.m_instanceModel = nil ---@type CycleInstanceModelBase
end

---@param model CycleInstanceModelBase
function CycleInstanceRoomBase:Init(roomType,data,roomCfg,GO,cb,model)
    self.m_instanceModel = model

    self.curRoomType = roomType
    self.roomID = data.roomID
    self.roomData = data
    self.roomConfig = roomCfg
    self.GORoot = GO
    self.CreateFurEndCallback = cb
    self.furConfig = model.furnitureConfig
    self.furLevelConfig = model.furnitureLevelConfig
    self:InitRoomGO()
    self:InitFurnitureGo()
end

function CycleInstanceRoomBase:OnEnter()
end

function CycleInstanceRoomBase:OnExit()
end


function CycleInstanceRoomBase:InitRoomGO()
    --构造物体索引表
    local furRoot = UIView:GetGo(self.GORoot, "furniture")
    local UIPos = UIView:GetGo(self.GORoot, "UIPosition")
    local modelRoot = UIView:GetGo(self.GORoot, "model")
    local roomBox = UIView:GetGo(self.GORoot, "roombox")
    local locked = UIView:GetGo(self.GORoot, "locked")
    local unlock = UIView:GetGo(self.GORoot, "unlock")
    local hero = UIView:GetGoOrNil(self.GORoot, "hero")
    local upgradeVFX = UIView:GetGoOrNil(self.GORoot, "vfx_upgrade")
    local levelUp = UIView:GetGoOrNil(self.GORoot, "levelup")
    local furList = {}
    local subFurList = {}

    for k, v in pairs(self.roomConfig.furniture) do
        local furID = v.id
        local furConfig = self.m_instanceModel:GetFurConfigByID(furID)
        local findIndex = 1
        if not self.furFindIndex[furConfig.object_name] then
            self.furFindIndex[furConfig.object_name] = findIndex
        else
            if self.roomConfig.room_category == 4 then

            else
                self.furFindIndex[furConfig.object_name] = self.furFindIndex[furConfig.object_name] + 1
                findIndex = self.furFindIndex[furConfig.object_name]
            end

        end
        local goName = furConfig.object_name .. "_" .. findIndex
        local furGO = UIView:GetGo(furRoot, goName)
        furList[k] = furGO

        if furConfig.seat and furConfig.seat > 0 then --如果是有子节点的家具
            local subCount = self.m_instanceModel:GetAllFurSeatCount(furID)
            subFurList[k] = {}
            for i=1,subCount do
                local subFurName = k .. "workPos"
                local subIndex = 1
                if not self.furFindIndex[subFurName] then
                    self.furFindIndex[subFurName] = findIndex
                else
                    self.furFindIndex[subFurName] = self.furFindIndex[subFurName] + 1
                    findIndex = self.furFindIndex[subFurName]
                end
                local subGOName = "workPos" .. "_" .. i
                local subGO = UIView:GetGo(furGO, subGOName)
                subFurList[k][i] = {
                    GO = subGO,
                    isUsed = false
                }
            end 

        end
    end
    local decorationList = {}
    --装饰节点
    do
        local childCount = furRoot.transform.childCount
        for i = 1, childCount-1 do
            local childGO = furRoot.transform:GetChild(i).gameObject
            if string.find(childGO.name,"decoration") then
                decorationList[childGO.name] = childGO
            end
        end
    end
    self.roomGO = {
        ["furRoot"] = furRoot,
        ["UIPos"] = UIPos,
        ["modelRoot"] = modelRoot,
        ["furList"] = furList,
        ["subFurList"] = subFurList,
        ["roomBox"] = roomBox,
        ["locked"] = locked,
        ["unlock"] = unlock,
        ["hero"] = hero,
        ["decorationList"] = decorationList,
        ["upgradeVFX"] = upgradeVFX,
        ["levelUp"] = levelUp
    }

    self:ShowRoom()
end

function CycleInstanceRoomBase:ShowRoom()
    if self.roomData.state == 0 then -- 未解锁
        local unlock_room = self.roomConfig.unlock_room
        if self.m_instanceModel:RoomIsUnlock(unlock_room) then
            self.GORoot:SetActive(true)
            self.roomGO.UIPos:SetActive(true)
            self.roomGO.furRoot:SetActive(false)
            self.roomGO.modelRoot:SetActive(false)
            self.roomGO.roomBox:SetActive(true)
            self.roomGO.unlock:SetActive(true)
            self.roomGO.locked:SetActive(false)
            if self.roomGO.hero then
                self.roomGO.hero:SetActive(false)
            end
        else
            self.GORoot:SetActive(true)
            self.roomGO.UIPos:SetActive(true)
            self.roomGO.furRoot:SetActive(false)
            self.roomGO.modelRoot:SetActive(false)
            self.roomGO.roomBox:SetActive(false)
            self.roomGO.unlock:SetActive(false)
            self.roomGO.locked:SetActive(true)
            if self.roomGO.hero then
                self.roomGO.hero:SetActive(false)
            end
        end
        if self.roomGO.upgradeVFX then
            self.roomGO.upgradeVFX:SetActive(false)
        end
    elseif self.roomData.state == 1 then -- 修建中
        --self:ShowBubble(CycleInstanceDefine.BubbleType.IsBuilding)
        self.GORoot:SetActive(true)
        self.roomGO.UIPos:SetActive(true)
        self.roomGO.furRoot:SetActive(false)
        self.roomGO.modelRoot:SetActive(false)
        self.roomGO.roomBox:SetActive(true)
        self.roomGO.unlock:SetActive(false)
        self.roomGO.locked:SetActive(false)
        if self.roomGO.upgradeVFX then
            self.roomGO.upgradeVFX:SetActive(true)
        end
        if self.roomGO.hero then
            self.roomGO.hero:SetActive(false)
        end
    elseif self.roomData.state == 2 then -- 修建完成

        self.GORoot:SetActive(true)
        self.roomGO.UIPos:SetActive(true)
        self.roomGO.furRoot:SetActive(true)
        self.roomGO.modelRoot:SetActive(true)
        self.roomGO.roomBox:SetActive(true)
        self.roomGO.unlock:SetActive(false)
        self.roomGO.locked:SetActive(false)
        if self.roomGO.hero then
            self.roomGO.hero:SetActive(true)
        end
        --暂时只在升级时用upgradeVFX 特效
        if self.roomGO.upgradeVFX then
            self.roomGO.upgradeVFX:SetActive(false)
        end
        --if self.roomGO.upgradeVFX then
        --    self.roomGO.upgradeVFX:SetActive(self:IsUpgrading())
        --end
    end

    self:RefreshAllDecorationFurPrefab()
end

function CycleInstanceRoomBase:OnBuildCompleted()

end

function CycleInstanceRoomBase:InitFurnitureGo()
    if self.roomData.state == 2 then
        self:ShowFurniture(nil, false)
    end
    --self:RefreshAllDecorationFurPrefab()
end

function CycleInstanceRoomBase:ShowFurniture(index, isBuy)
    if self.roomData.state == 2 then
        if index then
            local furData = self.roomData.furList[tostring(index)]
            if furData.state == 1 then
                self.roomGO.furList[index]:SetActive(true)
                self:ShowFurPrefab(furData.id, furData.index, isBuy)
            else
                self.roomGO.furList[index]:SetActive(false)
            end
        else
            for k,v in pairs(self.roomData.furList) do
                if v.state == 1 then
                    self.roomGO.furList[tonumber(k)]:SetActive(true)
                    self:ShowFurPrefab(v.id,v.index,isBuy)
                else
                    self.roomGO.furList[tonumber(k)]:SetActive(false)
                end
            end
        end

    end
end


function CycleInstanceRoomBase:ShowFurPrefab(levelID,index,isBuy)
    -- 显示模型,如果没有就先加载再显示
    local furLevelConfig = self.furLevelConfig[levelID]

    local parentGO = self.roomGO.furList[index]

    local needLoad = true
    local targetGO = nil
    for k,v in pairs(parentGO.transform) do
        if string.find(v.gameObject.name , furLevelConfig.prefab) then
            needLoad = false
            targetGO = v.gameObject
            break
        end
    end
    if not needLoad then
        self:LoadFinishHandle(targetGO, index, levelID, isBuy)
        return
    end


    local path = "Assets/Res/Prefabs/furniture/"..furLevelConfig.prefab..".prefab"
    if self.path == path then
        return
    end
    self.path = path
    local oldGO = parentGO.transform:GetChild(0)

    GameResMgr:AInstantiateObjectAsyncManual(path,self,function(GO)
        if self.path ~= path then
            GameObject.Destroy(oldGO.gameObject)
            return
        end
        GO.transform:SetParent(parentGO.transform)
        GO.transform.position = oldGO.transform.position
        GO.transform.rotation = oldGO.transform.rotation
        GO.transform.localScale = oldGO.transform.localScale
        GameObject.Destroy(oldGO.gameObject)
        GO.transform:SetAsFirstSibling()    --将该节点移到父物体的第一个子节点位置
        GO.name = furLevelConfig.prefab

        self:LoadFinishHandle(GO,index,levelID,isBuy)
    end)

end

---刷新所有装饰家具
function CycleInstanceRoomBase:RefreshAllDecorationFurPrefab()

    if not self.roomGO.decorationList or Tools:GetTableSize(self.roomGO.decorationList) == 0 then
        return
    end

    local roomData = self.roomData
    local roomLevelCfg = self.m_instanceModel:GetRoomLevelConfig(self.roomID,roomData.level or 1)
    local unlockedDecorationIDs = roomLevelCfg.unlock_furID
    local needShowDecorationNames = {}
    if unlockedDecorationIDs then
        for i,v in ipairs(unlockedDecorationIDs) do
            local furCfg = self.furConfig[v]
            needShowDecorationNames[furCfg.object_name] = v
        end
    end
    for furGOName, furGO in pairs(self.roomGO["decorationList"]) do
        local furID = needShowDecorationNames[furGOName]
        if furID then
            furGO:SetActive(true)
            local furLevelCfg = self.m_instanceModel.furnitureLevelConfig_furID[furID][1]
            self:ShowDecorationFurPrefab(furGOName,furLevelCfg)
        else
            furGO:SetActive(false)
        end
    end
end

---显示房间等级解锁出来的的装饰家具
function CycleInstanceRoomBase:ShowDecorationFurPrefab(furGOName,furLevelConfig)
    -- 显示模型,如果没有就先加载再显示
    local parentGO = self.roomGO.decorationList[furGOName]

    local needLoad = true
    local targetGO = nil
    for k,v in pairs(parentGO.transform) do
        if string.find(v.gameObject.name , furLevelConfig.prefab) then
            needLoad = false
            targetGO = v.gameObject
            break
        end
    end
    if not needLoad then
        targetGO:SetActive(true)
        return
    end

    local path = "Assets/Res/Prefabs/furniture/"..furLevelConfig.prefab..".prefab"
    if self.path == path then
        return
    end
    self.path = path
    local oldGO = parentGO.transform:GetChild(0)

    GameResMgr:AInstantiateObjectAsyncManual(path,self,function(GO)
        if self.path ~= path then
            GameObject.Destroy(oldGO.gameObject)
            return
        end
        GO.transform:SetParent(parentGO.transform)
        GO.transform.position = oldGO.transform.position
        GO.transform.rotation = oldGO.transform.rotation
        GO.transform.localScale = oldGO.transform.localScale
        GameObject.Destroy(oldGO.gameObject)
        GO.transform:SetAsFirstSibling()    --将该节点移到父物体的第一个子节点位置
        GO.name = furLevelConfig.prefab

        targetGO:SetActive(true)
    end)

end

--加载完成后的处理
function CycleInstanceRoomBase:LoadFinishHandle(GO,index,levelID,isBuy)
    local parent = self.roomGO.furList[index]

    local furLevelConfig = self.furLevelConfig[levelID]
    local furConfig = self.furConfig[furLevelConfig.furniture_id]
    --特殊处理 显示家具下的子节点(椅子/床)
    if furConfig.seat and furConfig.seat > 0 then
        local subFurCount = self.m_instanceModel:GetAllFurSeatCount(furConfig.id)
        self.roomGO.subFurList[index] = {}
        for i=1,subFurCount do
            local subFurName = index.."workPos"
            local subIndex = 1
            if not self.furFindIndex[subFurName] then
                self.furFindIndex[subFurName] = subIndex
            else
                self.furFindIndex[subFurName] = self.furFindIndex[subFurName] + 1
                subIndex = self.furFindIndex[subFurName]
            end
            local subGOName = "workPos_"..i
            local subGO = UIView:GetGo(GO,subGOName)
            self.roomGO.subFurList[index][i] = {
                GO = subGO,
                isUsed = false
            }
        end
        if furConfig.type == 1 then
            for i=1,#self.roomGO.subFurList[index] do
                self.roomGO.subFurList[index][i].GO:SetActive(i <= furLevelConfig.worker)
            end
        elseif furConfig.type == 2 then
            for i=1,#self.roomGO.subFurList[index] do
                self.roomGO.subFurList[index][i].GO:SetActive(i <= furLevelConfig.level)
            end
        end

    end

    if isBuy then
        self.m_instanceModel:ShowSelectFurniture(parent,false)
        --播放物品购买动画
        local anim = UIView:GetComp(GO,"","Animation")
        if anim and not anim:IsNull() then
            local find, name = AnimationUtil.GetFirstClipName(anim)
            AnimationUtil.Play(anim,name)
            --printf("家具没有动画，无法播放购买动画")
        end
    end

    --实例化家具GO后的回调
    if self.CreateFurEndCallback then
        self.CreateFurEndCallback(GO,self.roomID,index,isBuy)
        if not self.workers[index] and self.furLevelConfig[levelID].isPresonFurniture then
            self.workers[index] = true
        end
    end
end

---virtual 显示房间气泡
function CycleInstanceRoomBase:ShowBubble(bubbleType)
end

---virtual 隐藏房间气泡
function CycleInstanceRoomBase:HideBubble()
end

---获取房间内的第几个家具,循环副本一般只有一个家具
function CycleInstanceRoomBase:GetFurnitureGoByIndex(index)
    if self.roomGO.furList then
        return self.roomGO.furList[index]
    end
    return nil
end

---获取第1个家具的第index个子节点家具
function CycleInstanceRoomBase:GetSubFurnitureGoByIndex(index)
    if self.roomGO.subFurList then
        --subFurList的 key 可能存为string?
        local go = self.roomGO.subFurList[1][index].GO
        if go then
            return go
        else
            return self.roomGO.subFurList[1][tostring(index)].GO
        end
    end
    return nil
end

---获取房间内的装饰家具节点
---@return UnityEngine.GameObject
function CycleInstanceRoomBase:GetDecorationFurnitureGoByFurID(furID)

    if not self.roomGO.decorationList or Tools:GetTableSize(self.roomGO.decorationList) == 0 then
        return nil
    end
    local furCfg = self.furConfig[furID]
    local decorationName = furCfg.object_name
    return self.roomGO.decorationList[decorationName]
end

---设为是否缺少原料
function CycleInstanceRoomBase:SetIsLackOfMaterial(isLack)
    self.m_isLackOfMaterial = isLack
end

---是否缺少原料
---@return boolean
function CycleInstanceRoomBase:IsLackOfMaterial()
    return self.m_isLackOfMaterial
end

---@return boolean
function CycleInstanceRoomBase:IsUpgrading()
    return self.roomData.isUpgrading
end

---播放房间升级特效
function CycleInstanceRoomBase:PlayLevelUpVfx()
    local levelUp = self.roomGO["levelUp"]
    if levelUp then
        levelUp:SetActive(false)
        levelUp:SetActive(true)
    end
end

return CycleInstanceRoomBase