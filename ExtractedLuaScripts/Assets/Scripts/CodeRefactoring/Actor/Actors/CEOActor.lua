---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2025/2/8 16:30
---

local Class = require("Framework.Lua.Class")
local PersonBase = require("CodeRefactoring.Actor.Actors.PersonBase")
---@class CEOActor:PersonBase
---@field super PersonBase
local CEOActor = Class("CEOActor",PersonBase)

local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local UnityHelper = CS.Common.Utils.UnityHelper
local Bus = require "CodeRefactoring.Actor.Actors.BusNew"
local CompanyMode = GameTableDefine.CompanyMode
local EventDispatcher = EventDispatcher
local FloorMode = GameTableDefine.FloorMode
local ConfigMgr = GameTableDefine.ConfigMgr
local CEODataManager = GameTableDefine.CEODataManager
local FloatUI = GameTableDefine.FloatUI
local GameTimeManager = GameTimeManager

local DIALOG_CD = 120

function CEOActor:ctor(...)
    self:getSuper(CEOActor).ctor(self,...)
    self.m_type = ActorDefine.ActorType.CEOActor ---必须放在基类ctor后
    self.m_targetRotation = nil ---@type UnityEngine.Vector3 面向的点，一般是工位上要面向的点
    self.m_roomData = nil ---@type RoomRootData
    self.m_ceoID = 0
    self.m_ceoConfig = nil
    self.m_lastTalkPopTime = 0

    self.m_busPosition = nil ---@type UnityEngine.Vector3 -上下班BUS的位置
    self.m_workStateGO = nil ---@type UnityEngine.GameObject -工作状态的标识特效

    self.m_offWorkWithCompanyHandler = nil
    self.m_offWorkWithBuildingHandler = nil
    self.m_gotoWorkHandler = nil
end

function CEOActor:Init(rootGo, prefab, position, targetPosition, targetRotation, roomData)
    self.m_targetRotation = targetRotation
    self.m_roomData = roomData

    self.m_ceoID = CEODataManager:GetCEOByRoomIndex(self.m_roomData.config.room_index)
    self.m_ceoConfig = ConfigMgr.config_ceo[self.m_ceoID]
    self.m_lastTalkPopTime = 0

    self:getSuper(CEOActor).Init(self,rootGo, prefab, position, targetPosition, 0)
    print("创建 CEOActor")
end

function CEOActor:OnUpdate(actor, dt)
end

function CEOActor:OnLoadGOSuccess()
    self:getSuper(CEOActor).OnLoadGOSuccess(self)

    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING) then
        self.m_stateMachine:ChangeState(ActorDefine.State.CEOInBusState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING) then
        self.m_go.transform.position = self.m_targetPosition
        UnityHelper.RotateTowards(self.m_go.transform, self.m_targetRotation)
        self.m_stateMachine:ChangeState(ActorDefine.State.CEOWorkState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_BY_BUS) then
        self.m_stateMachine:ChangeState(ActorDefine.State.CEOInBusState)
        local bus = Bus:GetBusEntity()---@type BusNew
        bus:AddWaitingPassenger(self)
    else
        self.m_stateMachine:ChangeState(ActorDefine.State.CEOGoToWorkState,true)
    end
    local stateTrans = UnityHelper.FindTheChild(self.m_go, "WorkState")
    self.m_workStateGO = stateTrans and stateTrans.gameObject or nil

    self.m_offWorkWithCompanyHandler = handler(self,self.OnCompanyOffWork)
    self.m_offWorkWithBuildingHandler = handler(self,self.OnBuildingOffWork)
    self.m_gotoWorkHandler = handler(self,self.OnCompanyGotoWork)
    EventDispatcher:RegEvent(GameEventDefine.CEOOffWorkWithCompany,self.m_offWorkWithCompanyHandler)
    EventDispatcher:RegEvent(GameEventDefine.CEOOffWorkWithBuilding,self.m_offWorkWithBuildingHandler)
    EventDispatcher:RegEvent(GameEventDefine.CEOGoToWork,self.m_gotoWorkHandler)
    self:InitFloatUIView()
end

function CEOActor:Exit()
    self:getSuper(CEOActor).Exit(self)
end

function CEOActor:OnDestroy()
    self.m_busPosition = nil
    -- self.m_roomData.ceoActor = nil
    self.m_roomData = nil
    self.m_workStateGO = nil
    EventDispatcher:UnRegEvent(GameEventDefine.CEOOffWorkWithCompany,self.m_offWorkWithCompanyHandler)
    EventDispatcher:UnRegEvent(GameEventDefine.CEOOffWorkWithBuilding,self.m_offWorkWithBuildingHandler)
    EventDispatcher:UnRegEvent(GameEventDefine.CEOGoToWork,self.m_gotoWorkHandler)
    self.m_offWorkWithCompanyHandler = nil
    self.m_offWorkWithBuildingHandler = nil
    self.m_gotoWorkHandler = nil
    self:getSuper(CEOActor).OnDestroy(self)
end

function CEOActor:IsExistCompany()
    local roomIndex = self.m_roomData.config.room_index
    return CompanyMode:CompanyExist(roomIndex)
end

function CEOActor:OnBuildingOffWork()
    if not self:IsExistCompany() then
        local bus = Bus:GetBusEntity()
        self:AddFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING)
        self:RemoveFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING)
        bus:AddWaitingPassenger(self)
    end
end

function CEOActor:OnCompanyOffWork(roomID)
    if self:IsExistCompany() then
        local curRoomID = FloorMode:GetRoomIdByRoomIndex(self.m_roomData.config.room_index)
        if roomID == curRoomID then
            local bus = Bus:GetBusEntity()
            self:AddFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING)
            self:RemoveFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING)
            bus:AddWaitingPassenger(self)
        end
    end
end

function CEOActor:OnCompanyGotoWork(roomID)
    if self:IsExistCompany() then
        local curRoomID = FloorMode:GetRoomIdByRoomIndex(self.m_roomData.config.room_index)
        if roomID == curRoomID then
            local bus = Bus:GetBusEntity()
            self:RemoveFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING)
            bus:AddWaitingPassenger(self)
        end
    end
end

function CEOActor:InitFloatUIView()
    FloatUI:SetObjectCrossCamera(self, function(view)
        self.m_view = view
    end, function()
        if not self.m_view then
            return
        end
        self.m_view = nil
    end, 0)
end

function CEOActor:IsInDialogCD()
    local time = GameTimeManager:GetCurLocalTime(true)
    return time - self.m_lastTalkPopTime <= DIALOG_CD
end

function CEOActor:CheckPopTalking(talkingType)
    if not self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING) then
        return
    end

    if self:IsInDialogCD() then
        return
    end

    local content,mood
    if talkingType == CEODataManager.PopTalkType.CEOFurLevelNotEnough then
        content = self.m_ceoConfig.ceo_dialog_1
        mood = CEODataManager.Mood.Bad
    elseif talkingType == CEODataManager.PopTalkType.CompanyLevelMax then
        content = self.m_ceoConfig.ceo_dialog_2
        mood = CEODataManager.Mood.Good
    elseif talkingType == CEODataManager.PopTalkType.CompanyDissatisfied then
        content = self.m_ceoConfig.ceo_dialog_3
        mood = CEODataManager.Mood.Bad
    elseif talkingType == CEODataManager.PopTalkType.Satisfied then
        content = self.m_ceoConfig.ceo_dialog_4
        mood = CEODataManager.Mood.Good
    end
    if content then
        self:ShowTalkPop(content,mood)
    end
end

function CEOActor:ShowTalkPop(content,mood)
    if self.m_view then
        content = GameTextLoader:ReadText(content)
        self.m_view:Invoke("ShowCEOTalkingPop", content, mood)
        self.m_lastTalkPopTime = GameTimeManager:GetCurLocalTime(true)
    end
end

---是否有家具不满足员工需求
function CEOActor:CheckFurnitureUnsatisfiedPop()
    local employee = self.m_roomData.employee[1]
    if not employee or not employee.m_unsatisfiedFurIDs then
        return false
    end
    return #employee.m_unsatisfiedFurIDs>0
end

function CEOActor:Event(msg, params)
    if msg == ActorDefine.Event.EVENT_GET_IN_BUS then
        self.m_busPosition = params
    end
    self.super.Event(self, msg, params)
end

return CEOActor