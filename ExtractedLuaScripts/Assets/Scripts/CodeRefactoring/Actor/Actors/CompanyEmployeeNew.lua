---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2023/8/28 15:17
---
---普通公司职员

local Class = require("Framework.Lua.Class")
local PersonBase = require("CodeRefactoring.Actor.Actors.PersonBase")
---@class CompanyEmployeeNew:PersonBase
---@field super PersonBase
local CompanyEmployeeNew = Class("CompanyEmployeeNew", PersonBase)

local FloatUI = GameTableDefine.FloatUI
local UnityHelper = CS.Common.Utils.UnityHelper
local CfgMgr = GameTableDefine.ConfigMgr
local CompanyMode = GameTableDefine.CompanyMode
local FloorMode = GameTableDefine.FloorMode
local GameClockManager = GameTableDefine.GameClockManager
local GreatBuildingMana = GameTableDefine.GreateBuildingMana
local TimeManager = GameTimeManager
local InteractionsManager = require("CodeRefactoring.Interactions.InteractionsManager")
local Bus = require "CodeRefactoring.Actor.Actors.BusNew"
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
--local PERSON_ACTION = require("CodeRefactoring.Actor.PersonActionDefine")
local Tools = Tools
local Vector3 = CS.UnityEngine.Vector3

--CompanyEmployeeNew.propertyServiceWindow = {}

local MOOD_STATE_BAD = 1
local MOOD_STATE_NORMAL = 2
local MOOD_STATE_GOOD = 3
local MOOD_STATE_HAPPY = 4

--CompanyEmployeeNew.m_type = "TYPE_EMPLOYEE"

CompanyEmployeeNew.BUFF_HIGH_MOOD = 1 << 1

CompanyEmployeeNew.POP_TYPE_HIGH_MOOD = 1
CompanyEmployeeNew.POP_TYPE_FURN_SAT    = 2
CompanyEmployeeNew.POP_TYPE_FURN_UNSAT  = 3
CompanyEmployeeNew.POP_TYPE_ROOM_UNLOCK = 4
CompanyEmployeeNew.POP_TYPE_FURN_LV     = 5
CompanyEmployeeNew.POP_TYPE_QUEUE       = 6

function CompanyEmployeeNew:ctor(...)
    self:getSuper(CompanyEmployeeNew).ctor(self,...)
    self.m_type = ActorDefine.ActorType.Employee ---必须放在基类ctor后
    self.m_targetRotation = nil ---@type UnityEngine.Vector3 面向的点，一般是工位上要面向的点
    self.m_dismissPosition = nil
    self.m_roomData = nil
    self.m_buff = nil
    self.m_furnitureIndex = -1
    self.m_moodState = 0 ---@type number -心情状态枚举值 0,1,2,3
    self.m_moodData = nil
    self.m_triggerCounter = nil
    self.m_interactionRoomGo = nil ---@type InteractionsNew[]
    self.m_updateInteractionTag = nil ---标记Interaction家具是否改变，改变后需要重新计算最近的交互房间
    self.m_mood = 0
    self.m_standardMood = 0
    self.m_targetMood = 0 ---@type number -目标心情值
    self.m_employeeLocalData = nil ---员工存档
    self.m_furnitureRequirement = nil ---@type boolean[] ---家具是否满足需求
    self.m_moodTransferValue = 0
    self.m_lastUpdateTime = 0
    self.m_dialogCD = nil
    self.m_randomAnim = nil
    self.m_idlePosition = nil
    self.m_queueFront = nil ---@type CompanyEmployeeNew
    self.m_queueBack = nil ---@type CompanyEmployeeNew
    self.m_busPosition = nil ---@type UnityEngine.Vector3 -上下班BUS的位置
    self.m_viewStack = nil
    self.m_lastAction = nil
    self.m_deltaTime = 0 ---update()更新积累的间隔
    self.m_personRoomPos = nil ---@type UnityEngine.Vector3
    self.m_allFurnitureIsEnough = false ---@type boolean 家具是否全部满足需求
    self.m_floor = 1 ---工位所在楼层

    self.m_unsatisfiedFurIDs = {} ---经常使用的list，一开始申请一块，减少GC
end

function CompanyEmployeeNew:Init(rootGo, prefab, position, targetPosition, targetRotation, dismissPosition, roomData, furnitureIndex, personID)

    self.m_targetRotation = targetRotation
    self.m_dismissPosition = dismissPosition
    self.m_roomData = roomData
    self.m_furnitureIndex = furnitureIndex
    self.m_buff = {buffValue=0, buffTime = {}, buffCDTime = {}}
    self.m_triggerCounter = {}
    self.m_interactionRoomGo = {}
    self.m_moodData = {}
    self.m_furnitureRequirement = {}
    self.m_deltaTime = 0
    self.m_allFurnitureIsEnough = false

    local scene = FloorMode:GetScene()
    if scene then
        local personRoomID = FloorMode:GetRoomIdByRoomIndex(self.m_roomData.config.room_index)
        local personRoomGO = scene:GetRoomRootGoData(personRoomID)
        if not personRoomGO then
            --printf("无法找到房间位置")
        end
        self.m_floor = scene:GetRoomFloor(personRoomID)
        self.m_personRoomPos = personRoomGO.go.transform.position
    else
        self.m_personRoomPos = nil
        self.m_floor = 1
    end

    self:getSuper(CompanyEmployeeNew).Init(self,rootGo, prefab, position, targetPosition, personID)
    self:SetMood()
    --print("创建 CompanyEmployeeNew", personID)
end

--region 心情
function CompanyEmployeeNew:SetMood()
    self.m_mood = 70
    self.m_standardMood = 70
    self.m_targetMood = 70
    self:UpdateFurnitureMood()
    if not self.m_employeeLocalData then
        return
    end
    if self.m_employeeLocalData.mood then
        self.m_mood = self.m_employeeLocalData.mood
    end
    if self.m_employeeLocalData.trigger then
        for i,v in pairs(self.m_employeeLocalData.trigger or {}) do
            self.m_triggerCounter[tonumber(i)] = v
        end
    end
    self:SetTargetMood("standard_mood", self.m_standardMood)
    self:MoodStateChange()
end

function CompanyEmployeeNew:UpdateMood()
    --self:UpdateTargetMood()
    if self.m_mood == self.m_targetMood then -- 需要配置
        return
    end
    self.m_mood = math.max(self.m_mood + self.m_moodTransferValue,GreatBuildingMana:GetMoodImprove())
    --self.m_mood = math.max(math.min(self.m_mood, self.m_targetMood), GreatBuildingMana:GetMoodImprove())
    self:SetTargetMood("standard_mood", self.m_standardMood) --设置默认心情，如果低于默认则增加，如果高于默认则减少
    self:MoodStateChange()
end

---更新心情基础值
function CompanyEmployeeNew:UpdateFurnitureMood()
    local companyData = CompanyMode:CompanyExist(self.m_roomData.config.room_index)
    local roomFurnitureData = FloorMode:GetRoomLocalData(self.m_roomData.config.room_index)
    if not companyData then
        return
    end

    local companyCfg = CfgMgr.config_company[companyData.company_id]
    local targetMood = GreatBuildingMana:GetMoodImprove()
    local currFurnitureData = nil

    local furnituresDataFiltrationById = {}
    for i, v in ipairs(roomFurnitureData.furnitures or {}) do
        local furnitureCfg = CfgMgr.config_furnitures[v.id] or {}
        if not furnituresDataFiltrationById[v.id]
                and (furnitureCfg.fixedmood_facility == 2 or (furnitureCfg.fixedmood_facility == 1 and self.m_furnitureIndex == i))
        then
            for k, fLId in ipairs(companyCfg.facility_requirement or {}) do
                local fCLCg = CfgMgr.config_furnitures_levels[fLId] or {}
                if fCLCg.furniture_id == v.id and v.level >= fCLCg.level then
                    local furnitureLevelCfg = CfgMgr.config_furnitures_levels[v.id][fCLCg.level] -- 公司表的设施等级为标准来计算
                    targetMood = targetMood + furnitureLevelCfg.mood_bonus
                    if furnitureCfg.fixedmood_facility == 2 and not furnituresDataFiltrationById[v.id] then
                        furnituresDataFiltrationById[v.id] = true
                    end
                end
                if fCLCg.furniture_id == v.id then
                    if self.m_furnitureRequirement[fLId] == nil then
                        self.m_furnitureRequirement[fLId] = false
                    end
                    self.m_furnitureRequirement[fLId] = v.level >= fCLCg.level or self.m_furnitureRequirement[fLId]
                end
            end
        end
        if i == self.m_furnitureIndex then
            currFurnitureData = v
        end
    end
    self:CheckRequirementEnough()
    self.m_standardMood = targetMood
    self.m_employeeLocalData = currFurnitureData.employee_info
    self:SetTargetMood("standard_mood", self.m_standardMood)
end

---综合角色状况计算心情增减
function CompanyEmployeeNew:UpdateTargetMood()
    self.m_targetMood = 0
    self.m_moodTransferValue = 0
    local minNum, maxNum = nil, nil
    local size = Tools:GetTableSize(self.m_moodData)
    for i,v in pairs(self.m_moodData) do
        if (size > 1 and i ~= "standard_mood") or size == 1 then
            if not minNum or v.targetMood < minNum then
                minNum = v.targetMood
            end
            if not maxNum or v.targetMood > maxNum then
                maxNum = v.targetMood
            end
            self.m_moodTransferValue = self.m_moodTransferValue + v.transferValue
        end
    end
    self.m_targetMood = self.m_moodTransferValue > 0 and maxNum or minNum
    self:ShowMoodTransferHint()
end

---设置某种行为的心情目标值
function CompanyEmployeeNew:SetTargetMood(moodType, targetMood, transferValue)
    if targetMood then
        if not transferValue then
            if self.m_mood > targetMood then
                transferValue = CfgMgr.config_global.base_moon_down_rate
            elseif self.m_mood< targetMood then
                transferValue =  CfgMgr.config_global.base_moon_up_rate
            else
                transferValue = 0
            end
        end
        if self.m_moodData[moodType] then
            if self.m_moodData[moodType].targetMood == targetMood and
                    self.m_moodData[moodType].transferValue == transferValue then
                return
            else
                self.m_moodData[moodType].targetMood = targetMood
                self.m_moodData[moodType].transferValue = transferValue
            end
        else
            self.m_moodData[moodType] = {}
            self.m_moodData[moodType].targetMood = targetMood
            self.m_moodData[moodType].transferValue = transferValue
        end
    else
        if not self.m_moodData[moodType] then
            return
        end
        self.m_moodData[moodType] = nil
    end

    self:UpdateTargetMood()
end

function CompanyEmployeeNew:MoodStateChange()
    local moodState = 0
    if self.m_mood <= CfgMgr.config_global.mood_section[1] then
        moodState = MOOD_STATE_BAD
    elseif self.m_mood <= CfgMgr.config_global.mood_section[2] then
        moodState = MOOD_STATE_NORMAL
    elseif self.m_mood <= CfgMgr.config_global.mood_section[3] then
        moodState = MOOD_STATE_GOOD
    else
        moodState = MOOD_STATE_HAPPY
    end
    if self.m_moodState ~= moodState then
        self:ShowMoodChangeHint(moodState)
    end
    self.m_moodState = moodState
end

function CompanyEmployeeNew:ShowMoodTransferHint()
    if self.m_view then
        self.m_view:Invoke("ShowMoodTransfer")
    end
end

function CompanyEmployeeNew:ShowMoodChangeHint(state)
    local moodHint = nil
    if state == MOOD_STATE_BAD then
        moodHint = "NervousBumble"
    elseif state == MOOD_STATE_NORMAL then
        moodHint = "NormalBumble"
    elseif state == MOOD_STATE_GOOD then
        moodHint = "HappyBumble"
    elseif state == MOOD_STATE_HAPPY then
        moodHint = "JoyfulBumble"
    end
    if self.m_view and moodHint then
        self.m_view:Invoke("ShowPersonMoodState", moodHint)
    end
end

function CompanyEmployeeNew:GetMoodState()
    return self.m_moodState
end

function CompanyEmployeeNew:GetMood()
    return self.m_mood or 0
end

function CompanyEmployeeNew:GetMoodChange()
    return self.m_moodTransferValue or 0
end
--endregion

function CompanyEmployeeNew:OnUpdate(dt)
    --self:getSuper(PersonBase).OnUpdate(self,dt) 父级确定没有UPDATE

    if not self.m_go then
        return
    end

    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING) then
        return
    end
    self.m_deltaTime = self.m_deltaTime + dt
    if TimeManager:GetSocketTime() - self.m_lastUpdateTime < 1 then
        return
    end
    self.m_lastUpdateTime = TimeManager:GetSocketTime()
    self:UpdateMood() -- 心情
    self:Behavior(self.m_deltaTime) -- 互动
    self:UpdateBuff() -- 增益
    self:SaveTriggerInfo() -- 存档
    self.m_deltaTime = 0
end

function CompanyEmployeeNew:Exit()
    if self.m_idlePosition then
        self.m_idlePosition.person = nil
        self.m_idlePosition = nil
    end
    self.m_furnitureRequirement = nil
    self.m_dialogCD = nil
    self.m_interactionRoomGo = nil
    self.m_triggerCounter = nil
    self.m_queueFront = nil
    self.m_queueBack = nil
    self.m_flags = 0
    self.gameObject = nil
    self.m_busPosition = nil
    self.m_moodData = nil
    self:getSuper(CompanyEmployeeNew).Exit(self)
end

function CompanyEmployeeNew:OnDestroy()
    if self.m_idlePosition then
        self.m_idlePosition.person = nil
        self.m_idlePosition = nil
    end
    self.m_targetRotation = nil
    self.m_dismissPosition = nil
    self.m_roomData = nil
    self.m_buff = nil
    self.m_furnitureIndex = -1
    self.m_moodState = 0
    self.m_moodData = nil
    self.m_triggerCounter = nil
    self.m_interactionRoomGo = nil
    self.m_updateInteractionTag = nil
    self.m_mood = 0
    self.m_standardMood = 0
    self.m_targetMood = 0
    self.m_employeeLocalData = nil
    self.m_furnitureRequirement = nil
    self.m_moodTransferValue = 0
    self.m_lastUpdateTime = 0
    self.m_dialogCD = nil
    self.m_randomAnim = nil
    self.m_idlePosition = nil
    self.m_queueFront = nil
    self.m_queueBack = nil
    self.m_busPosition = nil
    self.m_viewStack = nil
    self.m_lastAction = nil
    self.m_flags = 0
    self.gameObject = nil
    self.m_busPosition = nil
    self:getSuper(CompanyEmployeeNew).OnDestroy(self)
end

function CompanyEmployeeNew:Event(msg, params)
    if msg == ActorDefine.Event.EVENT_GET_IN_BUS then
        self.m_busPosition = params
    elseif msg == ActorDefine.Event.EVENT_EMPLOYEE_DISMISS then
        self:Dismiss()
    end
    self.super.Event(self, msg, params)
end

--region FloatUI
function CompanyEmployeeNew:InitFloatUIView()
    self.m_viewStack = {}
    FloatUI:SetObjectCrossCamera(self, function(view)
        self.m_view = view
        view:Invoke("ShowNpcFloat", self)
        for cmd, args in pairs(self.m_viewStack) do
            self.m_view:Invoke(cmd, table.unpack(args, 1, #args))
        end
    end, function()
        if not self.m_view then
            return
        end
        self.m_view:Invoke("HidePersonActionHint", self.m_lastAction)
        self.m_view = nil
    end, 0)
end

function CompanyEmployeeNew:InvokeFloatUIView(cmd, ...)
    if self.m_view then
        self.m_view:Invoke(cmd, ...)
    end
    if self.m_viewStack then
        self.m_viewStack[cmd] = {...}
    end
end

function CompanyEmployeeNew:CheckFloatState()
    local acton = nil
    local moodIndicator = 0
    local args = nil
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET) then
        acton = "WCBumble"
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST) then
        acton = "RestBumble"
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING) then
        acton = "ConferenceBumble"
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT) then
        acton = "EntertainmentBumble"
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM) then
        acton = "GymBumble"
    end
    if self.m_randomAnim then
        args = self.m_randomAnim.addexp
    end

    self:InvokeFloatUIView("ShowPersonActionHint", acton, self.m_lastAction, self.m_stateMachine:IsState("EmployeeStandUpState"), args)
    self.m_lastAction = acton
end

---@param interaction InteractionsNew
function CompanyEmployeeNew:UpdatePersonInteraction(interaction,dt)
    if interaction then
        interaction:UpdatePersonInteraction(self,dt)
    end
end

--endregion
function CompanyEmployeeNew:Behavior(dt)
    if not self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING)
            or self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_DISMISS)
            or not self.m_go
            or self.m_go:IsNull()
    then
        return
    end
    if self.m_buff and self.m_buff.buffValue and self.m_buff.buffValue ~= 0 then
        return
    end

    self:UpdatePersonInteraction(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING),dt)
    self:UpdatePersonInteraction(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET),dt)
    self:UpdatePersonInteraction(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST),dt)
    self:UpdatePersonInteraction(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT),dt)
    self:UpdatePersonInteraction(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM),dt)
end

---存档
function CompanyEmployeeNew:SaveTriggerInfo()
    if self.m_employeeLocalData then
        if not self.m_employeeLocalData.trigger then
            self.m_employeeLocalData.trigger = {}
        end
        for i,v in pairs(self.m_triggerCounter) do
            self.m_employeeLocalData.trigger[tostring(i)] = v
        end
        self.m_employeeLocalData.mood = self.m_mood
    end
end

function CompanyEmployeeNew:GetInteractionEntity(tag)
    if self.m_interactionRoomGo[tag] and
            (self.m_updateInteractionTag == self.m_interactionRoomGo[tag]:GetPersonUpdateInteractionTag() or
            self.m_stateMachine:IsState("EmployeeWorkState"))
    then
        return self.m_interactionRoomGo[tag]
    end
    local defaultEntity = nil
    --选择优先级最高的房间
    local personRoomPos = self.m_personRoomPos
    local personFloor = self.m_floor
    local minDis = 99999
    local targetEntity = nil
    local isFindSameFloorEntity = false
    local entities = InteractionsManager:GetEntities(tag)
    for k,entity in pairs(entities or {}) do
        if entity.m_go and not entity.m_go:IsNull() then
            if isFindSameFloorEntity then
                if personFloor == entity.m_floor then
                    local posEntity = entity.m_go.transform.position
                    local dis = personRoomPos:DistanceXZ(posEntity)
                    if dis < minDis then
                        minDis = dis
                        targetEntity = entity
                    end
                end
            else
                local posEntity = entity.m_go.transform.position
                local dis = Vector3.Distance(personRoomPos,posEntity)
                if personFloor == entity.m_floor then
                    isFindSameFloorEntity = true
                    targetEntity = entity
                    minDis = dis
                else
                    if dis < minDis then
                        minDis = dis
                        targetEntity = entity
                    end
                end
            end
        end
    end
    self.m_interactionRoomGo[tag] = targetEntity
    if self.m_interactionRoomGo[tag] then
        self.m_updateInteractionTag = self.m_interactionRoomGo[tag]:GetPersonUpdateInteractionTag() 
        if not self.m_triggerCounter[tag] then
            self.m_interactionRoomGo[tag]:ResetTriggerCounter(self)
        end
        return self.m_interactionRoomGo[tag]
    else
        return defaultEntity
    end
end

--region Buff
function CompanyEmployeeNew:UpdateBuff()
    if not self.m_buff then
        return
    end

    if not self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING)
            or self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_DISMISS | ActorDefine.Flag.FLAG_EMPLOYEE_ON_ACTION)
    then
        if UnityHelper.HasFlag(self.m_buff.buffValue or 0, self.BUFF_HIGH_MOOD) then
            self.m_buff.buffValue = UnityHelper.RemoveFlag(self.m_buff.buffValue or 0, self.BUFF_HIGH_MOOD)
            self.m_buff.buffTime[self.BUFF_HIGH_MOOD] = 0
            FloorMode:GetScene():GetGo(self.m_go, "VFX_highmood"):SetActive(false)
        end
        return
    end
    self:UpdateHighMoodBuff()
end

function CompanyEmployeeNew:UpdateHighMoodBuff()
    if not self.m_stateMachine:IsState("EmployeeWorkState") then
        return
    end

    local curTime = TimeManager:GetCurrentServerTime()
    if UnityHelper.HasFlag(self.m_buff.buffValue or 0, CompanyEmployeeNew.BUFF_HIGH_MOOD) then
        if self.m_buff.buffTime[CompanyEmployeeNew.BUFF_HIGH_MOOD] < curTime then
            self.m_buff.buffValue = UnityHelper.RemoveFlag(self.m_buff.buffValue or 0, CompanyEmployeeNew.BUFF_HIGH_MOOD)
            FloorMode:GetScene():GetGo(self.m_go, "VFX_highmood"):SetActive(false)
        end
        return
    end

    local p = CfgMgr.config_global.highmood_probility(self.m_mood)
    if self.m_mood >= CfgMgr.config_global.highmood_threshold
            and math.random(0,100) < p
            and (self.m_buff.buffCDTime[CompanyEmployeeNew.BUFF_HIGH_MOOD] or 0) < curTime
    then
        self.m_buff.buffValue = UnityHelper.AddFlag(self.m_buff.buffValue or 0, CompanyEmployeeNew.BUFF_HIGH_MOOD)
        self.m_buff.buffTime[CompanyEmployeeNew.BUFF_HIGH_MOOD] = curTime + CfgMgr.config_global.highmood_duration
        self.m_buff.buffCDTime[CompanyEmployeeNew.BUFF_HIGH_MOOD] = curTime + CfgMgr.config_global.highmood_cooltime
        FloorMode:GetScene():GetGo(self.m_go, "VFX_highmood"):SetActive(true)
        self:CheckPopTalking(CompanyEmployeeNew.POP_TYPE_HIGH_MOOD)
    end
end

function CompanyEmployeeNew:IsHighMoodBuff()
    return self:IsBuff(CompanyEmployeeNew.BUFF_HIGH_MOOD)
end

function CompanyEmployeeNew:IsBuff(buff)
    if not self.m_buff then
        return false
    end
    return UnityHelper.HasFlag(self.m_buff.buffValue or 0, buff)
end
--endregion

function CompanyEmployeeNew:CheckPopTalking(talkingType)
    if not self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING) then
        return
    end

    local cfg = CfgMgr.config_dialog[talkingType]
    if not cfg then
        return
    end

    if cfg.type == self.POP_TYPE_HIGH_MOOD then
        self:ShowTalkPop(cfg)
    elseif cfg.type == self.POP_TYPE_FURN_SAT then
        self:ShowTalkPop(cfg)
    elseif cfg.type == self.POP_TYPE_FURN_UNSAT then
        self:CheckFurnitureUnsatisfiedPop(cfg)
    elseif cfg.type == self.POP_TYPE_ROOM_UNLOCK then
        self:CheckRoomUnlockPop(cfg)
    elseif cfg.type == self.POP_TYPE_FURN_LV then
        self:CheckInteractiveEndPop(cfg)
    elseif cfg.type == self.POP_TYPE_QUEUE then
        self:CheckInteractiveQueuePop(cfg)
    end
end

function CompanyEmployeeNew:ShowTalkPop(cfg, insertText)
    if not self.m_view then
        return
    end
    if math.random(0, 100) >= cfg.dialog_probility then
        return
    end
    if cfg.dialog_cooltime then
        self.m_dialogCD = self.m_dialogCD or {}
        if (self.m_dialogCD[cfg.id] or 0) >= TimeManager:GetSocketTime() then
            return
        end
    end

    --判断已经在显示中的对话气泡有没有达到公司额度
    local scene = FloorMode:GetScene()
    if scene and not scene:UseRoomFloatUI(self.m_roomData.config.room_index) then
        return
    end

    if cfg.dialog_cooltime then
        self.m_dialogCD[cfg.id] = TimeManager:GetSocketTime() + cfg.dialog_cooltime
    end

    local text = cfg.npc_dialog[math.random(1, #cfg.npc_dialog)]
    text = GameTextLoader:ReadText(text)
    if insertText then
        text = string.format(text, insertText)
    end

    self.m_view:Invoke("ShowPersonTalkingPop", text, self:GetMoodState())
end

function CompanyEmployeeNew:CheckFurnitureUnsatisfiedPop(cfg)
    if not next(self.m_furnitureRequirement) then
         return
    end
    local fIds = self.m_unsatisfiedFurIDs
    local count = 0
    for k, v in pairs(self.m_furnitureRequirement) do
        if not v then
            count = count +1
            fIds[count] = k
        end
    end
    if count>0 then
        local fId = fIds[math.random(1, count)]
        local fLvId, fLv = CfgMgr.config_furnitures_levels[fId].furniture_id, CfgMgr.config_furnitures_levels[fId].level
        local insertText = FloorMode:GetFurnitureName(fLvId, fLv)
        self:ShowTalkPop(cfg, insertText)
    else
        printf("111")
    end
end

function CompanyEmployeeNew:CheckRoomUnlockPop(cfg)
    local roomIndex = nil
    for i,v in ipairs(cfg.room_index or {}) do
        local data = FloorMode:GetRoomLocalData(v)
        if data and data.unlock == false then
            roomIndex = v
            break
        end
    end
    if roomIndex then
        local room_index_number = string.match(roomIndex, "%d+")
        local insertText = FloorMode:GetRoomName(room_index_number)
        self:ShowTalkPop(cfg, insertText)
    end
end

function CompanyEmployeeNew:CheckInteractiveEndPop(cfg)
    if not self.m_randomAnim then
        return
    end
    local lv = self.m_randomAnim.furnitureLv or 1
    local newCfg = Tools:CopyTable(cfg)

    for i,v in ipairs(newCfg.npc_dialog or {}) do
        newCfg.npc_dialog[i] = string.format(v, lv)
    end

    local furnitureName = FloorMode:GetFurnitureName(self.m_randomAnim.fId, lv)
    self:ShowTalkPop(newCfg, furnitureName)
end

function CompanyEmployeeNew:CheckInteractiveQueuePop(cfg)
    local interactions = self:GetCurrentInteractionEntity()
    if not interactions then
        return
    end
    local roomName = FloorMode:GetRoomName(interactions.m_config.room_index_number)
    self:ShowTalkPop(cfg, roomName)
end

function CompanyEmployeeNew:GetCurrentInteractionEntity()
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET) then
        return self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST) then
        return self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING) then
        return self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT) then
        return self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM) then
        return self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM)
    end
end

function CompanyEmployeeNew:GetDailyMeetingLocalData()
    if not self.m_employeeLocalData then
        return {num = "0", max = "0"} -- debug info
    end
    if tonumber(self.m_employeeLocalData.met_day) then
        self.m_employeeLocalData.daily_meeting_info = {day = self.m_employeeLocalData.met_day, num = 1, max = 1}
        self.m_employeeLocalData.met_day = nil
    end
    if not self.m_employeeLocalData.daily_meeting_info then
        self.m_employeeLocalData.daily_meeting_info = {}
    end

    local gameH, gameM, gameD = GameClockManager:GetCurrGameTime()
    if self.m_employeeLocalData.daily_meeting_info.day ~= gameD then
        self.m_employeeLocalData.daily_meeting_info = {day = gameD, num = 0, max = 1}
    end
    return self.m_employeeLocalData.daily_meeting_info
end

function CompanyEmployeeNew:CheckDailyMeetingValid()
    local localData = self:GetDailyMeetingLocalData()
    if localData.num < localData.max then
        return true
    end
    return false
end

function CompanyEmployeeNew:AddDailyMeetingMaxLimit()
    local localData = self:GetDailyMeetingLocalData()
    localData.max = localData.max + 1
end

function CompanyEmployeeNew:AddDailyMeetingNumber()
    local localData = self:GetDailyMeetingLocalData()
    localData.num = localData.num + 1
end

function CompanyEmployeeNew:GetDebugInfo()
    local toiletInfo    = string.format("尿:%.2f",self.m_triggerCounter[ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET] or 0).. "\n"
    local restInfo      = string.format("疲:%.2f",self.m_triggerCounter[ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST] or 0).. "\n"
    local enterInfo     = string.format("娱:%.2f",self.m_triggerCounter[ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT] or 0).. "\n"
    local gymInfo       = string.format("健:%.2f",self.m_triggerCounter[ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM] or 0).. "\n"
    local moodInfo      = string.format("心:%.2f",self.m_mood or 0).. "\n"
    local moodTInfo     = string.format("变:%.2f",self.m_moodTransferValue or 0).. "\n"
    local meetingInfo   = string.format("会:%.2f",self:GetDailyMeetingLocalData().num or 0).. "\n"
    local buffInfo      = string.format("益:%.2f",self.m_buff.buffValue or 0).. "\n"
    local stateInfo     = "态:" .. self.m_stateMachine:GetStateName() .. "\n"
    local queueInfo     = "队:"
    local flagInfo      = {}
    for i=1,40 do
        if self:HasFlag(1 << i) then
            table.insert(flagInfo, i)
        end
        if i>=30 and i <= 33 and self:HasFlag(1 << i) then
            queueInfo = queueInfo .. i .. ","
        end
    end
    queueInfo = queueInfo .. (self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_IN_QUEUE) and self:GetQueueId() or 0) .. "\n"
    flagInfo = "旗:"..table.concat(flagInfo, ",") .. "\n"
    return table.concat({queueInfo, toiletInfo, restInfo, enterInfo, gymInfo, moodInfo, moodTInfo, meetingInfo, buffInfo, stateInfo, flagInfo})
end

function CompanyEmployeeNew:SetPersonBonuses(randomAnim, types, localData,accessoryInfo)
    local data = localData or self.m_idlePosition.localData
    local config = CfgMgr.config_furnitures_levels[data.id][data.level] or {}
    for i, type in ipairs(types or {}) do
        randomAnim[type] = config[type] or 0
    end
    randomAnim.furnitureLv = data.level
    randomAnim.fId = data.id
    local accessory_info = accessoryInfo or data.accessory_info
    if not accessory_info then
        return
    end
    for k, v in pairs(accessory_info) do
        if k == FloorMode.F_TYPE_AUX_CONDITION or k == FloorMode.F_TYPE_AUX_PROPERTY then
            for i, info in pairs(v) do
                local accessoryLevelId = info.lvId
                local accessoryId, accessoryLevel = CfgMgr.config_furnitures_levels[accessoryLevelId].furniture_id, CfgMgr.config_furnitures_levels[accessoryLevelId].level
                local accessoryConfig = CfgMgr.config_furnitures_levels[accessoryId][accessoryLevel]
                for _, type in ipairs(types or {}) do
                    randomAnim[type] = randomAnim[type] + (accessoryConfig[type] or 0)
                end
            end
        end
    end
end

function CompanyEmployeeNew:ResetInteractionTriggerCounter(interaction)
    if interaction then
        interaction:ResetTriggerCounter(self)
    end
end

function CompanyEmployeeNew:ResetTriggerCounter()
    self:ResetInteractionTriggerCounter(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING))
    self:ResetInteractionTriggerCounter(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_TOILET))
    self:ResetInteractionTriggerCounter(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_REST))
    self:ResetInteractionTriggerCounter(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_ENTERTAINMENT))
    self:ResetInteractionTriggerCounter(self:GetInteractionEntity(ActorDefine.Flag.FLAG_EMPLOYEE_ON_GYM))
end

function CompanyEmployeeNew:GetQueueId()
    if not self.m_queueFront then
        return 1
    end
    if self.m_queueFront == self then
        return 1
    end
    return self.m_queueFront:GetQueueId() + 1
end

function CompanyEmployeeNew:OnLoadGOSuccess()
    self:SetModeActive(true)
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING) then
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeInBusState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING) then
        self.m_go.transform.position = self.m_targetPosition
        UnityHelper.RotateTowards(self.m_go.transform, self.m_targetRotation)
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeWorkState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_BY_BUS) then
        local bus = Bus:GetBusEntity()
        bus:AddWaitingPassenger(self)
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeInBusState)
    else
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeGoToWorkState,true)
    end
    self:InitFloatUIView()
end

---被解雇时如果在排队那么从队伍中离开
function CompanyEmployeeNew:LeaveFromQueueWhenDismissed()
    for toiletType,interactions in pairs(self.m_interactionRoomGo) do
        if interactions then
            interactions:RemovePersonFromQueue(self)
        end
    end
end

---解雇员工，会按照当前状态来确定该做些什么
function CompanyEmployeeNew:Dismiss()
    if self.m_stateMachine:IsState("EmployeeGoToWorkState") and self.m_stateMachine.m_curState.m_isMoving then
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeDismissState)
    elseif self.m_stateMachine:IsState("EmployeeGoToToiletState") then
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeDismissState)
        self:CheckFloatState()
    elseif self.m_stateMachine:IsState("EmployeeQueueUpState") then
        --从排队中移除 耗费了多余的性能
        self:LeaveFromQueueWhenDismissed()
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeDismissState)
        self:CheckFloatState()
    elseif self.m_stateMachine:IsState("EmployeeToiletState") then
        self.m_stateMachine:ChangeState(ActorDefine.State.EmployeeDismissState)
    end
    local meetingRoom = self.m_interactionRoomGo[ActorDefine.Flag.FLAG_EMPLOYEE_ON_MEETING]
    if meetingRoom and meetingRoom.m_roomIndex == self.m_roomData.config.room_index then
        meetingRoom.m_roomIndex = nil
    end
end

---检查个人需求是否全部满足
function CompanyEmployeeNew:CheckRequirementEnough()
    local requirements = self.m_furnitureRequirement
    if requirements then
        for k,v in pairs(requirements) do
            if not v then
                self.m_allFurnitureIsEnough = false
                return false
            end
        end
        self.m_allFurnitureIsEnough = true
        return true
    else
        self.m_allFurnitureIsEnough = true
        return true
    end
end

return CompanyEmployeeNew