---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2023/9/12 11:08
---

local Class = require("Framework.Lua.Class")
local PersonBase = require("CodeRefactoring.Actor.Actors.PersonBase")
---@class PropertyWorker:PersonBase
---@field super PersonBase
local PropertyWorker = Class("PropertyWorker",PersonBase)

local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local FloorMode = GameTableDefine.FloorMode
local PropertyServiceManager = require("CodeRefactoring.Actor.PropertyServiceManager")
local CfgMgr = GameTableDefine.ConfigMgr
local UnityHelper = CS.Common.Utils.UnityHelper
local Bus = require "CodeRefactoring.Actor.Actors.BusNew"

PropertyWorker.EVENT_LEAVE_SCENE = 1001

function PropertyWorker:ctor(...)
    self:getSuper(PropertyWorker).ctor(self,...)
    self.m_type = ActorDefine.ActorType.PropertyWorker ---必须放在基类ctor后
    self.m_targetRotation = nil ---@type UnityEngine.Vector3 面向的点，一般是工位上要面向的点
    self.m_roomData = nil
    self.m_furnitureIndex = -1
    self.m_triggerCounter = {}
    --self.m_employeeLocalData = nil ---员工存档
    --self.m_lastUpdateTime = 0
    --self.m_randomAnim = nil
    self.m_busPosition = nil ---@type UnityEngine.Vector3 -上下班BUS的位置
    self.m_propertyLocalData = nil
    self.m_workStateGO = nil ---@type UnityEngine.GameObject -工作状态的标识特效
end

function PropertyWorker:Init(rootGo, prefab, position, targetPosition, targetRotation, dismissPosition, roomData, furnitureIndex, personID)
    self.m_targetRotation = targetRotation
    self.m_roomData = roomData
    self.m_furnitureIndex = furnitureIndex

    self:getSuper(PropertyWorker).Init(self,rootGo, prefab, position, targetPosition, personID)
    --print("创建 CompanyEmployeeNew", personID)
end

function PropertyWorker:OnUpdate(actor, dt)
end

function PropertyWorker:SetPropertyLevelLocalData(data)
    self.m_propertyLocalData = data
end

function PropertyWorker:OnLoadGOSuccess()
    self:getSuper(PropertyWorker).OnLoadGOSuccess(self)

    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING) then
        self.m_stateMachine:ChangeState(ActorDefine.State.PropertyInBusState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_ON_WORKING) then
        self.m_go.transform.position = self.m_targetPosition
        UnityHelper.RotateTowards(self.m_go.transform, self.m_targetRotation)
        self.m_stateMachine:ChangeState(ActorDefine.State.PropertyWorkState)
    elseif self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_BY_BUS) then
        self.m_stateMachine:ChangeState(ActorDefine.State.PropertyInBusState)
        local bus ---@type BusNew
        if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_MANAGER_WORKER) then
            bus = Bus:GetCarEntity() or Bus:GetBusEntity()
        else
            bus = Bus:GetBusEntity()
        end
        bus:AddWaitingPassenger(self)
    else
        self.m_stateMachine:ChangeState(ActorDefine.State.PropertyGoToWorkState,true)
    end
    local stateTrans = UnityHelper.FindTheChild(self.m_go, "WorkState")
    self.m_workStateGO = stateTrans and stateTrans.gameObject or nil
    --只有BOSS和维修工才参与服务
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_PROPERTY_WORKER | ActorDefine.Flag.FLAG_EMPLOYEE_MANAGER_WORKER) then
        PropertyServiceManager:AddProperty(self)
    end
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_MANAGER_WORKER) then
        GameTableDefine.ActorManager:RegFloorBossEntity(self)
    end
end

function PropertyWorker:Exit()
    PropertyServiceManager:RemoveProperty(self)
    self:getSuper(PropertyWorker).Exit(self)
end

function PropertyWorker:OnDestroy()
    PropertyServiceManager:RemoveProperty(self)
    self.m_busPosition = nil
    self.m_roomData = nil
    --self.m_employeeLocalData = nil
    self.m_propertyLocalData = nil
    self.m_workStateGO = nil
    if self:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_MANAGER_WORKER) then
        GameTableDefine.ActorManager:UnRegFloorBossEntity(self)
    end
    self:getSuper(PropertyWorker).OnDestroy(self)
end

function PropertyWorker:Event(msg, params)
    if msg == ActorDefine.Event.EVENT_GET_IN_BUS then
        self.m_busPosition = params
    end
    self.super.Event(self, msg, params)
end

function PropertyWorker:SetPersonBonuses(randomAnim, types, localData)
    local data = localData
    local config = CfgMgr.config_furnitures_levels[data.id][data.level] or {}
    for i, type in ipairs(types or {}) do
        randomAnim[type] = config[type] or 0
    end
    randomAnim.furnitureLv = data.level
    randomAnim.fId = data.id
    if not data.accessory_info then
        return
    end
    for k, v in pairs(data.accessory_info) do
        if k == FloorMode.F_TYPE_AUX_CONDITION or k == FloorMode.F_TYPE_AUX_PROPERTY then
            for i, info in pairs(v) do
                local accessoryLevelId = info.lvId
                local accessoryId, accessoryLevel = CfgMgr.config_furnitures_levels[accessoryLevelId].furniture_id, CfgMgr.config_furnitures_levels[accessoryLevelId].level
                local accessoryConfig = CfgMgr.config_furnitures_levels[accessoryId][accessoryLevel]
                for _, type in ipairs(types or {}) do
                    randomAnim[type] = randomAnim[type] + (accessoryConfig[type] or 0)
                end
            end
        end
    end
end

function PropertyWorker:ResetTriggerCounter()
    --printf("PropertyWorker:ResetTriggerCounter()")
end

return PropertyWorker