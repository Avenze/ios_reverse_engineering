---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by GXY.
--- DateTime: 2023/9/1 11:48
---
local Class = require("Framework.Lua.Class")
local AIStateBase = require("CodeRefactoring.AI.StateMachines.AIStateBase")
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local CfgMgr = GameTableDefine.ConfigMgr
local InstanceDataManager = GameTableDefine.InstanceDataManager
local InstanceModel = GameTableDefine.InstanceModel
local InstanceAIBlackBoard = GameTableDefine.InstanceAIBlackBoard
local UIView = require("Framework.UI.View") -- 当工具类使用


---@class InstanceWorkerInitState:AIStateBase
---@field m_owner InstanceWorkerClass
local InstanceWorkerInitState = Class("InstanceWorkerInitState", AIStateBase)

function InstanceWorkerInitState:ctor()
end

function InstanceWorkerInitState:OnEnter(...)
    local actor = select(1, ...)
    local isBuy = select(2, ...)
    local stateMachine = actor.aiStateMachine ---@type PersonStateMachine
    local actorData = actor.data
    if actorData.workPosTr:IsNull() then
        actorData.furGO = InstanceModel:GetSceneRoomFurnitureGo(actorData.roomId ,actorData.furIndex)
        actorData.workPosTr = UIView:GetTrans(actorData.furGO, "workPos") --工位点
        actorData.workFaceTr = UIView:GetTrans(actorData.furGO, "face") --工位点朝向
        actorData.actPosTr = UIView:GetTrans(actorData.roomGO, "actionPos/actionPos_" .. actorData.furIndex) or actorData.workPosTr --工位点
        actorData.actFaceTr = UIView:GetTrans(actorData.roomGO, "actionPos/actionPos_" .. actorData.furIndex .. "/face") or UIView:GetTrans(actorData.furGO, "face") --工位点
        
        actor.gameObject.transform.position = actorData.actPosTr.position
        actor.gameObject.transform.rotation = actorData.actFaceTr.rotation
        -- error(actorData.roomId .."    "..actorData.furIndex)
    end
    actor.gameObject.transform.position = actorData.spawnPos

    -- 根据当前时间阶段初始化行为
    local timeType = InstanceDataManager.lastTimeType
    if timeType == InstanceDataManager.timeType.work then
        if isBuy then
            -- 变换行为
            actor:TryTransState(
                    function()
                        stateMachine:ChangeState(ActorDefine.State.InstanceWorkerRunToWorkSeat,actor)
                    end
            )
        else
            -- 初始化在工作点
            actor.gameObject.transform.position = actorData.actPosTr.position
            actor.gameObject.transform.rotation = actorData.actFaceTr.rotation
            -- 变换行为
            actor:TryTransState(
                    function()
                        stateMachine:ChangeState(ActorDefine.State.InstanceWorkerWork)
                    end
            )
        end
    elseif timeType == InstanceDataManager.timeType.eat then
        -- 获取吃饭对应的角色, 在座位的初始化到座位上, 不在座位的初始化到工位点
        if not InstanceModel.actorSeatBind[InstanceModel.timeType] or next(InstanceModel.actorSeatBind[InstanceModel.timeType]) == nil then
            InstanceModel:WorkerAttrRevert(InstanceModel.timeType, true)
        end
        local actorSeatBind = InstanceModel.actorSeatBind[InstanceModel.timeType]
        if not actorSeatBind then
            return
        end
        local rooms = InstanceModel:GetRoomDataByType(3)
        local targetRoomID = rooms[1].roomID
        if actorSeatBind[actorData.roomID] and actorSeatBind[actorData.roomID][actorData.furnitureIndex] then
            local roomId, furIndex, index = InstanceAIBlackBoard:GetActorBindSeat(targetRoomID, actor)
            --local roomGO = InstanceModel:GetRoomGameObjectByID(roomId)
            local furGO = InstanceModel:GetFurGameObject(roomId,furIndex )
            local workPosName = "workPos_" .. index
            local workPosTrans = UIView:GetTrans(furGO, workPosName)
            actor:TryTransState(
                    function()
                        stateMachine:ChangeState(ActorDefine.State.InstanceWorkerEat, actor, targetRoomID, workPosTrans, roomId, furIndex)
                    end
            )
        else

            actor:TryTransState(
                    function()
                        stateMachine:ChangeState(ActorDefine.State.InstanceWorkerRunToEatQueue, actor, targetRoomID)
                    end
            )
        end

    elseif timeType == InstanceDataManager.timeType.sleep then
        -- 获取睡觉对应的角色, 在床上的初始化到床上, 不再床上的初始化到工位点
        if not InstanceModel.actorSeatBind[InstanceModel.timeType] or next(InstanceModel.actorSeatBind[InstanceModel.timeType]) == nil then
            InstanceModel:WorkerAttrRevert(InstanceModel.timeType, true)
        end
        local actorSeatBind = InstanceModel.actorSeatBind[timeType]
        if not actorSeatBind then
            return
        end
        if actorSeatBind[actorData.roomID] and actorSeatBind[actorData.roomID][actorData.furnitureIndex] then
            local targetRoomID = actorSeatBind[actorData.roomID][actorData.furnitureIndex]
            local roomId, furIndex, index = InstanceAIBlackBoard:GetActorBindSeat(targetRoomID, actor)
            local roomGO = InstanceModel:GetRoomGameObjectByID(roomId)
            local workPosName = "workPos_" .. index
            local workPosTrans = UIView:GetTrans(roomGO, workPosName)
            actor:TryTransState(
                    function()
                        stateMachine:ChangeState(ActorDefine.State.InstanceWorkerSleep, actor, targetRoomID, workPosTrans)
                    end
            )
        else

            actor:TryTransState(
                    function()
                        if isBuy and InstanceModel:FindSleepSeat(actor) then --睡觉时间招募新工人
                            stateMachine:ChangeState(ActorDefine.State.InstanceWorkerRunToSleepQueue, actor ,actorSeatBind[actorData.roomID][actorData.furnitureIndex])
                        else
                            stateMachine:ChangeState(ActorDefine.State.InstanceWorkerRunToSleepQueue, actor )
                        end
                    end
            )
        end

    end

    actor:SetTheDisplayOfBubbles("state")

end

function InstanceWorkerInitState:OnExit()

end

return InstanceWorkerInitState