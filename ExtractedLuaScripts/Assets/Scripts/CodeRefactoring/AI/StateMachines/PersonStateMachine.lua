---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2023/8/28 16:32
---
local ActorManager = GameTableDefine.ActorManager
local Class = require("Framework.Lua.Class")
local AIStateMachine = require("CodeRefactoring.AI.AIStateMachine")
---@class PersonStateMachine:AIStateMachine
local PersonStateMachine = Class("PersonStateMachine",AIStateMachine)
local STATE_PATH = "CodeRefactoring.AI.StateMachines."
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
require("GameUtils.LuaTools")
local LuaTools = LuaTools
PersonStateMachine.LoadedState = {}
PersonStateMachine.IsLoadedState = false
PersonStateMachine.IsLoadingState = false
local DebugState = true
local GameObject = CS.UnityEngine.GameObject
local UnityHelper = CS.Common.Utils.UnityHelper

function PersonStateMachine:RequireAllState()
    if not PersonStateMachine.IsLoadedState then
        if not PersonStateMachine.IsLoadingState then
            PersonStateMachine.IsLoadingState = true
            for k,v in pairs(ActorDefine.State) do
                --assert(require(STATE_PATH..v),"require "..v.."失败了")
                local class = require(STATE_PATH..v)
                if class and class.create then
                    PersonStateMachine.LoadedState[v] = class
                end
            end
            PersonStateMachine.IsLoadedState = true
            PersonStateMachine.IsLoadingState = false
        end
    end
end

function PersonStateMachine:GetLoadedState(stateClassName)
    return PersonStateMachine.LoadedState[stateClassName]
end

function PersonStateMachine:ctor()
    self.m_states = {} ---@type AIStateBase[]
    self.m_owner = nil ---@type ActorBase
    self.m_curState = nil ---@type AIStateBase
    self.m_preState = nil ---@type AIStateBase
end

function PersonStateMachine:SetOwner(actor)
    self.m_owner = actor
    self.actor = actor
end

function PersonStateMachine:ChangeState(stateType,...)
    local state
    if stateType then
        state = self.m_states[stateType]
        if not state then
            -- self:RequireAllState()
            -- local class = PersonStateMachine.LoadedState[stateType]
            -- if not class or not class.create then
            --     print( stateType .. " class is nil")
            --     return
            -- else
            --     print(stateType .. " class is not nil")
            -- end
            if ActorManager.StateInstances[stateType] then
                state = ActorManager.StateInstances[stateType].create()
                state:SetOwner(self.m_owner)
                self.m_states[stateType] = state
            else
                return
            end
        end
    end
    if self.m_curState then
        self.m_curState:OnExit()
    end
    self.m_preState = self.m_curState
    self.m_curState = state
    if state then
        state:OnEnter(...)
    end
    if DebugState then
        self:SetDebugStateGO(self:GetStateName())
    end
end

function PersonStateMachine:Event(msg,params)
    if self.m_curState and self.m_curState.Event then
        self.m_curState:Event(msg,params)
    end
end

---返回是状态类型
---@return boolean
function PersonStateMachine:IsState(state)
    if not state then
        return self.m_curState == nil
    end

    local curCName
    if self.m_curState then
        curCName = self.m_curState.__cname
    else
        return false
    end

    local cname
    if type(state) == "string" then
        cname = state
    else
        cname = state.__cname
    end
    return curCName == cname or LuaTools:IsStringEndWith(cname,curCName)
end

---返回是状态类型
---@return boolean
function PersonStateMachine:PreStateIsState(state)
    if not state then
        return self.m_preState == nil
    end
    local cname
    if type(state) == "string" then
        cname = state
    else
        cname = state.__cname
    end
    if self.m_preState then
        return self.m_preState.__cname == cname
    else
        return false
    end
end

function PersonStateMachine:GetStateName()
    if self.m_curState then
        return self.m_curState.__cname
    else
        return "nil"
    end
end

---删除GameObject时调用
function PersonStateMachine:OnDestroy()
    if self.m_curState then
        self.m_curState:OnDestroy()
        self.m_curState = nil
        self.m_preState = nil
        self.m_debugStateGO = nil
    end
end

function PersonStateMachine:SetDebugStateGO(state)
    if (not self.m_owner) or (not self.m_owner.gameObject) then
        return
    end
    if not self.m_debugStateGO then
        self.m_debugStateGO = GameObject() ---@type UnityEngine.GameObject
        UnityHelper.AddChildToParent(self.m_owner.gameObject.transform,self.m_debugStateGO.transform)
    end
    self.m_debugStateGO.name = "State = "..state
end

return PersonStateMachine