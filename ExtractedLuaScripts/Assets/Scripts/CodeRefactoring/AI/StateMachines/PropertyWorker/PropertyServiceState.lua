---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2023/9/12 14:50
---

local AIStateBase = require("CodeRefactoring.AI.StateMachines.AIStateBase")
local Class = require("Framework.Lua.Class")
---@class PropertyServiceState:AIStateBase
---@field m_owner PropertyWorker
local PropertyServiceState = Class("PropertyServiceState",AIStateBase)
local PropertyServiceManager = require("CodeRefactoring.Actor.PropertyServiceManager")
local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local CfgMgr = GameTableDefine.ConfigMgr
local PERSON_ACTION = require("CodeRefactoring.Actor.PersonActionDefine")
local TimeManager = GameTimeManager
local FloatUI = GameTableDefine.FloatUI
local Timer = GameTimer

function PropertyServiceState:ctor()
    self.m_timeCount = nil
    self.m_timePoint = nil
    self.m_timerID = nil
end

function PropertyServiceState:OnEnter(...)
    if self.m_owner.m_workStateGO then
        self.m_owner.m_workStateGO:SetActive(true)
    end
    self:MoveToServicePoint()
end

function PropertyServiceState:MoveToServicePoint()
    local window = PropertyServiceManager.propertyServiceWindow[self.m_owner]
    if window then
        local destination = window.position
        local rotation = window.dir
        self.m_owner:RandomElevatorMoveTo(destination,rotation,function()
            self:DoService()
        end,CfgMgr.config_global.character_run_v)
    end
end

function PropertyServiceState:DoService()
    self.m_owner:SetAnimator(PERSON_ACTION.REPAIR)

    local bonus = {}
    self.m_owner:SetPersonBonuses(bonus, {"time"}, self.m_owner.m_propertyLocalData)
    self.m_timeCount = bonus.time or 0
    self.m_timePoint = TimeManager:GetSocketTime() + self.m_timeCount
    FloatUI:SetObjectCrossCamera(self.m_owner, function(view)
        self.m_owner.m_view = view
    end, function()
        self.m_owner.m_view = nil
    end, 0)

    --Update
    self.m_timerID = Timer:CreateNewTimer(0.5,function()
        local t = TimeManager:GetSocketTime()
        if t > self.m_timePoint then
            Timer:StopTimer(self.m_timerID)
            self.m_timerID = nil
            self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.PropertyGoToWorkState)
            return
        end

        if self.m_owner.m_view then
            local percentage = (self.m_timePoint - t) / self.m_timeCount * 100
            self.m_owner.m_view:Invoke("ShowPropertyWorking", percentage)
        end
    end,true)
end

function PropertyServiceState:OnExit()
    self.m_owner:RemoveFloatUIView()
    PropertyServiceManager:RoomServiceComplete(self.m_owner)
    self.m_owner:RemoveFlag(ActorDefine.Flag.FLAG_EMPLOYEE_PROPERTY_ON_WORKING)
    if self.m_owner.m_workStateGO then
        self.m_owner.m_workStateGO:SetActive(false)
    end
    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
end

function PropertyServiceState:OnDestroy()
    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
end

function PropertyServiceState:Event(msg, params)
end

return PropertyServiceState