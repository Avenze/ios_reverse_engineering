---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2023/10/10 10:53
---

local Class = require("Framework.Lua.Class")
local AIStateBase = require("CodeRefactoring.AI.StateMachines.AIStateBase")
---@class EventInstanceIdle:AIStateBase
---@field m_owner EventInstanceNew
local EventInstanceIdle = Class("EventInstanceIdleState",AIStateBase)

local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local CfgMgr = GameTableDefine.ConfigMgr
local Timer = GameTimer
local GameStateManager = GameStateManager
local InstanceDataManager = GameTableDefine.InstanceDataManager
local CycleInstanceDataManager = GameTableDefine.CycleInstanceDataManager
local GameTimeManager = GameTimeManager

function EventInstanceIdle:ctor()
end

function EventInstanceIdle:OnEnter()
    self.m_owner.m_go:SetActive(false)
    self.m_owner.m_go.transform.position = self.m_owner.m_initPosition
    local iaaCD = CfgMgr.config_global.instance_iaa_cd
    local interval = math.random(iaaCD[1],iaaCD[2])
    self.m_timerID = Timer:CreateNewTimer(interval,handler(self,self.Update),true)
end

function EventInstanceIdle:Update()
    local iaaLimit = CfgMgr.config_global.instance_iaa_limit
    local now = GameTimeManager:GetCurrentServerTime(true)
    local curDay = GameTimeManager:GetTimeLengthDate(now).d

    if GameStateManager:IsInstanceState() then
        local eventData = InstanceDataManager:GetEventData()
        if eventData.count < iaaLimit and curDay == eventData.day or curDay > eventData.day then
            self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.EventInstanceComing)
            InstanceDataManager:AddEventTime()
        end
    elseif GameStateManager:IsCycleInstanceState() then
        local eventData = CycleInstanceDataManager:GetCurrentModel():GetEventData()
        if eventData.count < iaaLimit and curDay == eventData.day or curDay > eventData.day then
            self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.EventInstanceComing)
            CycleInstanceDataManager:GetCurrentModel():AddEventTime()
        end
    end
end

function EventInstanceIdle:OnDestroy()
    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
end

function EventInstanceIdle:OnExit()
    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
    self.m_owner.m_go:SetActive(true)
end

return EventInstanceIdle