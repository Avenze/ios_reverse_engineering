---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chenlongfa.
--- DateTime: 2025/2/8 16:30
---

local Class = require("Framework.Lua.Class")
local AIStateBase = require("CodeRefactoring.AI.StateMachines.AIStateBase")
---@class CEOOffWorkState:AIStateBase
---@field m_owner CEOActor
---下班
local CEOOffWorkState = Class("CEOOffWorkState",AIStateBase)

local ActorDefine = require("CodeRefactoring.Actor.ActorDefine")
local CfgMgr = GameTableDefine.ConfigMgr
local Bus = require("CodeRefactoring.Actor.Actors.BusNew")
local Timer = GameTimer
local Vector3 = CS.UnityEngine.Vector3

function CEOOffWorkState:ctor()
    self.m_isWaitingBus = false
    self.m_isMoveTOBus = false
    self.m_targetBus = nil
    self.m_lastPosition = nil
    self.m_timerID = nil
end

function CEOOffWorkState:OnEnter(...)
    self.m_isMoveTOBus = false
    if self.m_owner:HasFlag(ActorDefine.Flag.FLAG_EMPLOYEE_OFF_WORKING) then
        if self.m_owner.m_busPosition then
            self:MoveToBus()
        else
            self.m_isWaitingBus = true
            --等待BUS停靠,返回工作状态
            self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.CEOGoToWorkState)
        end
    else
        self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.CEOGoToWorkState,true)
    end
end

function CEOOffWorkState:MoveToBus()

    if self.m_isMoveTOBus then
        return
    end

    local bus = Bus:GetBusEntity()
    if not bus.m_stateMachine:IsState("BusArrivedState") then --车不是等待乘客的状态,继续等下一班车
        self.m_owner.m_busPosition = nil
        self.m_owner.m_stateMachine:ChangeState(ActorDefine.State.CEOGoToWorkState)
        bus:AddWaitingPassenger(self.m_owner)
        return
    end
    self.m_targetBus = bus
    self.m_isMoveTOBus = true
    self.m_targetBus:PassengerMoveToBus(self.m_owner)

    local destination = self.m_owner.m_busPosition
    local speed = CfgMgr.config_global.character_run_v
    self.m_owner:RandomElevatorMoveTo(destination,self.m_owner.m_targetRotation,function()
        self.m_isMoveTOBus = false
        self.m_targetBus:PassengerUnMoveToBus(self.m_owner)
        self.m_targetBus:Event(ActorDefine.Event.EVENT_PERSON_IN, {self.m_owner, 0})
    end,speed)

    --寻路失败时的临时处理
    self.m_lastPosition = self.m_owner.m_go.transform.position
    self.m_timerID = Timer:CreateNewTimer(5,function()
        local newPos = self.m_owner.m_go.transform.position
        if Vector3.Distance(newPos,self.m_lastPosition) < 0.1 then
            self.m_owner:StopMove()
            self.m_isMoveTOBus = false
            self.m_targetBus:PassengerUnMoveToBus(self.m_owner)
            self.m_targetBus:Event(ActorDefine.Event.EVENT_PERSON_IN, {self.m_owner, 0})
        end
        self.m_timerID = nil
    end)
end

function CEOOffWorkState:OnExit()
    if self.m_isMoveTOBus then
        self.m_isMoveTOBus = false
        self.m_targetBus:PassengerUnMoveToBus(self.m_owner)
        self.m_owner:StopMove()
    end
    self.m_targetBus = nil

    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
end

function CEOOffWorkState:OnDestroy()
    if self.m_timerID then
        Timer:StopTimer(self.m_timerID)
        self.m_timerID = nil
    end
end

function CEOOffWorkState:Event(msg, params)
    if self.m_isWaitingBus and msg == ActorDefine.Event.EVENT_GET_IN_BUS then
        if self.m_owner.m_busPosition then
            self:MoveToBus()
            self.m_isWaitingBus = false
        end
    end
end

return CEOOffWorkState